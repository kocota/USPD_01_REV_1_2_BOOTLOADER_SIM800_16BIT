
USPD_01_REV_1_2_BOOTLOADER_SIM800_16BIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ded8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800e068  0800e068  0001e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e62c  0800e62c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e62c  0800e62c  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e634  0800e634  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e634  0800e634  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e638  0800e638  0001e638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800e63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0001a0b4  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001a134  2001a134  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029053  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ac  00000000  00000000  000490ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  0004e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001910  00000000  00000000  0004ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f99  00000000  00000000  000518d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e36  00000000  00000000  00078871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cb3  00000000  00000000  0009a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017b35a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007344  00000000  00000000  0017b3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e050 	.word	0x0800e050

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800e050 	.word	0x0800e050

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000009c 	.word	0x2000009c
 80005a8:	20000150 	.word	0x20000150

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000350 	.word	0x20000350
 80005dc:	20000404 	.word	0x20000404

080005e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_SystemReset+0x28>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <__NVIC_SystemReset+0x20>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0004 	.word	0x05fa0004

0800060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_TxCpltCallback+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d104      	bne.n	8000628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_UART_TxCpltCallback+0x28>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f838 	bl	8006698 <osSemaphoreRelease>
	  }
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004800 	.word	0x40004800
 8000634:	20018458 	.word	0x20018458

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a11      	ldr	r2, [pc, #68]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d11c      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x4c>
	  {
		  connect_timer = 0;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	b2d1      	uxtb	r1, r2
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 800065a:	7011      	strb	r1, [r2, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HAL_UART_RxCpltCallback+0x64>)
 8000664:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], osWaitForever);
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_RxCpltCallback+0x68>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	4611      	mov	r1, r2
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f86d 	bl	8006754 <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800067a:	2201      	movs	r2, #1
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <HAL_UART_RxCpltCallback+0x6c>)
 8000680:	f004 fd36 	bl	80050f0 <HAL_UART_Receive_DMA>
	  }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004800 	.word	0x40004800
 8000690:	20007f95 	.word	0x20007f95
 8000694:	20000804 	.word	0x20000804
 8000698:	20016bdc 	.word	0x20016bdc
 800069c:	20016cdc 	.word	0x20016cdc
 80006a0:	200080b8 	.word	0x200080b8
 80006a4:	20008064 	.word	0x20008064

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b0b6      	sub	sp, #216	; 0xd8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f001 f8d1 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 fab1 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 fbff 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 fbd5 	bl	8000e68 <MX_DMA_Init>
  MX_IWDG_Init();
 80006be:	f000 fb19 	bl	8000cf4 <MX_IWDG_Init>
  MX_SPI2_Init();
 80006c2:	f000 fb71 	bl	8000da8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 fba5 	bl	8000e14 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80006ca:	f000 fb29 	bl	8000d20 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON(); // пикаем бузером
 80006ce:	f00b fac3 	bl	800bc58 <BUZ_ON>
  HAL_Delay(50);
 80006d2:	2032      	movs	r0, #50	; 0x32
 80006d4:	f001 f934 	bl	8001940 <HAL_Delay>
  BUZ_OFF();
 80006d8:	f00b faca 	bl	800bc70 <BUZ_OFF>

  LED_VD3_ON();
 80006dc:	f00b fad4 	bl	800bc88 <LED_VD3_ON>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 80006e0:	4b9c      	ldr	r3, [pc, #624]	; (8000954 <main+0x2ac>)
 80006e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
		fm25v02_write(2*i+1, 0x00);
	}
	*/


	fm25v02_write(2*IP_1_REG, 0x00);
 80006e4:	2100      	movs	r1, #0
 80006e6:	f242 105e 	movw	r0, #8542	; 0x215e
 80006ea:	f00b fa2b 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_1_REG+1, 195);
 80006ee:	21c3      	movs	r1, #195	; 0xc3
 80006f0:	f242 105f 	movw	r0, #8543	; 0x215f
 80006f4:	f00b fa26 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_2_REG, 0x00);
 80006f8:	2100      	movs	r1, #0
 80006fa:	f242 1060 	movw	r0, #8544	; 0x2160
 80006fe:	f00b fa21 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_2_REG+1, 208);
 8000702:	21d0      	movs	r1, #208	; 0xd0
 8000704:	f242 1061 	movw	r0, #8545	; 0x2161
 8000708:	f00b fa1c 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_3_REG, 0x00);
 800070c:	2100      	movs	r1, #0
 800070e:	f242 1062 	movw	r0, #8546	; 0x2162
 8000712:	f00b fa17 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_3_REG+1, 163);
 8000716:	21a3      	movs	r1, #163	; 0xa3
 8000718:	f242 1063 	movw	r0, #8547	; 0x2163
 800071c:	f00b fa12 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_4_REG, 0x00);
 8000720:	2100      	movs	r1, #0
 8000722:	f242 1064 	movw	r0, #8548	; 0x2164
 8000726:	f00b fa0d 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*IP_4_REG+1, 67);
 800072a:	2143      	movs	r1, #67	; 0x43
 800072c:	f242 1065 	movw	r0, #8549	; 0x2165
 8000730:	f00b fa08 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*PORT_HIGH_REG, 0x00);
 8000734:	2100      	movs	r1, #0
 8000736:	f242 1066 	movw	r0, #8550	; 0x2166
 800073a:	f00b fa03 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*PORT_HIGH_REG+1, 136);
 800073e:	2188      	movs	r1, #136	; 0x88
 8000740:	f242 1067 	movw	r0, #8551	; 0x2167
 8000744:	f00b f9fe 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*PORT_LOW_REG, 0x00);
 8000748:	2100      	movs	r1, #0
 800074a:	f242 1068 	movw	r0, #8552	; 0x2168
 800074e:	f00b f9f9 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*PORT_LOW_REG+1, 234);
 8000752:	21ea      	movs	r1, #234	; 0xea
 8000754:	f242 1069 	movw	r0, #8553	; 0x2169
 8000758:	f00b f9f4 	bl	800bb44 <fm25v02_write>

	fm25v02_write(2*ID_HIGH_REG, 0x00);
 800075c:	2100      	movs	r1, #0
 800075e:	f242 1056 	movw	r0, #8534	; 0x2156
 8000762:	f00b f9ef 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*ID_HIGH_REG+1, 0x00);
 8000766:	2100      	movs	r1, #0
 8000768:	f242 1057 	movw	r0, #8535	; 0x2157
 800076c:	f00b f9ea 	bl	800bb44 <fm25v02_write>

	fm25v02_write(2*ID_LOW_REG, 0x00);
 8000770:	2100      	movs	r1, #0
 8000772:	f242 1058 	movw	r0, #8536	; 0x2158
 8000776:	f00b f9e5 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*ID_LOW_REG+1, 0x00);
 800077a:	2100      	movs	r1, #0
 800077c:	f242 1059 	movw	r0, #8537	; 0x2159
 8000780:	f00b f9e0 	bl	800bb44 <fm25v02_write>


  	read_bootloader_registers_no_rtos(); // читаем ригистры бутлоадера до запуска операционной системы
 8000784:	f00c fc0c 	bl	800cfa0 <read_bootloader_registers_no_rtos>


	start_address = ((((uint32_t)(bootloader_registers.start_address_firmware_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.start_address_firmware_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.start_address_firmware_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.start_address_firmware_low_reg))&0x000000FF);
 8000788:	4b73      	ldr	r3, [pc, #460]	; (8000958 <main+0x2b0>)
 800078a:	885b      	ldrh	r3, [r3, #2]
 800078c:	061a      	lsls	r2, r3, #24
 800078e:	4b72      	ldr	r3, [pc, #456]	; (8000958 <main+0x2b0>)
 8000790:	889b      	ldrh	r3, [r3, #4]
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000798:	431a      	orrs	r2, r3
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <main+0x2b0>)
 800079c:	88db      	ldrh	r3, [r3, #6]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	431a      	orrs	r2, r3
 80007a4:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <main+0x2b0>)
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	4a6b      	ldr	r2, [pc, #428]	; (800095c <main+0x2b4>)
 80007ae:	6013      	str	r3, [r2, #0]

	end_address = ((((uint32_t)(bootloader_registers.end_address_firmware_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.end_address_firmware_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.end_address_firmware_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.end_address_firmware_low_reg))&0x000000FF);
 80007b0:	4b69      	ldr	r3, [pc, #420]	; (8000958 <main+0x2b0>)
 80007b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007b4:	061a      	lsls	r2, r3, #24
 80007b6:	4b68      	ldr	r3, [pc, #416]	; (8000958 <main+0x2b0>)
 80007b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007ba:	041b      	lsls	r3, r3, #16
 80007bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4b65      	ldr	r3, [pc, #404]	; (8000958 <main+0x2b0>)
 80007c4:	895b      	ldrh	r3, [r3, #10]
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4b62      	ldr	r3, [pc, #392]	; (8000958 <main+0x2b0>)
 80007ce:	899b      	ldrh	r3, [r3, #12]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	4a62      	ldr	r2, [pc, #392]	; (8000960 <main+0x2b8>)
 80007d6:	6013      	str	r3, [r2, #0]

	//end_address = 0x08029EEB;

	firmware_length = end_address - start_address + 1;
 80007d8:	4b61      	ldr	r3, [pc, #388]	; (8000960 <main+0x2b8>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b5f      	ldr	r3, [pc, #380]	; (800095c <main+0x2b4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <main+0x2bc>)
 80007e6:	6013      	str	r3, [r2, #0]

	firmware_crc = (((bootloader_registers.crc_firmware_low_reg)<<8)&0xFF00) | ((bootloader_registers.crc_firmware_high_reg)&0x00FF);
 80007e8:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <main+0x2b0>)
 80007ea:	8a1b      	ldrh	r3, [r3, #16]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b59      	ldr	r3, [pc, #356]	; (8000958 <main+0x2b0>)
 80007f2:	89db      	ldrh	r3, [r3, #14]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b59      	ldr	r3, [pc, #356]	; (8000968 <main+0x2c0>)
 8000802:	801a      	strh	r2, [r3, #0]

	if( (start_address >= 0x08000000) && (start_address <= 0x080FFFFF) && ((start_address + firmware_length) <= 0x080FFFFF) && (firmware_length <= 0xFFFFF) ) // стартовый адресс для расчета контрольной суммы должен входить в диапазон основной памяти контроллера, длина прошивки не должна превышать длину памяти программ контроллера иначе при чтении будет хардфолт
 8000804:	4b55      	ldr	r3, [pc, #340]	; (800095c <main+0x2b4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800080c:	d31e      	bcc.n	800084c <main+0x1a4>
 800080e:	4b53      	ldr	r3, [pc, #332]	; (800095c <main+0x2b4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000816:	d219      	bcs.n	800084c <main+0x1a4>
 8000818:	4b50      	ldr	r3, [pc, #320]	; (800095c <main+0x2b4>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b51      	ldr	r3, [pc, #324]	; (8000964 <main+0x2bc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4413      	add	r3, r2
 8000822:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000826:	d211      	bcs.n	800084c <main+0x1a4>
 8000828:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <main+0x2bc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000830:	d20c      	bcs.n	800084c <main+0x1a4>
	{
		calculating_firmware_crc = CRC16((unsigned char*)start_address, firmware_length);
 8000832:	4b4a      	ldr	r3, [pc, #296]	; (800095c <main+0x2b4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <main+0x2bc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	4610      	mov	r0, r2
 8000840:	f00c fef2 	bl	800d628 <CRC16>
 8000844:	4603      	mov	r3, r0
 8000846:	4a49      	ldr	r2, [pc, #292]	; (800096c <main+0x2c4>)
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e002      	b.n	8000852 <main+0x1aa>
	}
	else
	{
		calculating_firmware_crc = 0;
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <main+0x2c4>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
	}



	if( (firmware_crc == calculating_firmware_crc) && (firmware_crc != 0) ) // если рассчетная контрольная сумма прошивки совпадает с указанной и не равна 0
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <main+0x2c0>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b44      	ldr	r3, [pc, #272]	; (800096c <main+0x2c4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d111      	bne.n	8000884 <main+0x1dc>
 8000860:	4b41      	ldr	r3, [pc, #260]	; (8000968 <main+0x2c0>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <main+0x1dc>
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную корректность прошивки
 8000868:	2100      	movs	r1, #0
 800086a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800086e:	f00b f969 	bl	800bb44 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
 8000872:	2101      	movs	r1, #1
 8000874:	f240 201d 	movw	r0, #541	; 0x21d
 8000878:	f00b f964 	bl	800bb44 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0001;
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <main+0x2b0>)
 800087e:	2201      	movs	r2, #1
 8000880:	835a      	strh	r2, [r3, #26]
 8000882:	e00c      	b.n	800089e <main+0x1f6>

	else // если рассчетная контрольная сумма прошивки не совпадает с указанной
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную ошибку контрольной суммы прошивки
 8000884:	2100      	movs	r1, #0
 8000886:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800088a:	f00b f95b 	bl	800bb44 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 800088e:	2100      	movs	r1, #0
 8000890:	f240 201d 	movw	r0, #541	; 0x21d
 8000894:	f00b f956 	bl	800bb44 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0000;
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <main+0x2b0>)
 800089a:	2200      	movs	r2, #0
 800089c:	835a      	strh	r2, [r3, #26]
	//fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
	//bootloader_registers.firmware_correctness_reg = 0x0001;
	//-----------------------


  	if( bootloader_registers.working_mode_reg == 0 ) // если включен нормальный режим работы
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <main+0x2b0>)
 80008a0:	8b9b      	ldrh	r3, [r3, #28]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 80c3 	bne.w	8000a2e <main+0x386>
  	{
  		if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <main+0x2b0>)
 80008aa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <main+0x2b0>)
 80008ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f080 80b9 	bcs.w	8000a28 <main+0x380>
  		{
  			if( bootloader_registers.firmware_correctness_reg == 1 ) // если прошивка корректна (контрольная сумма совпадает)
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <main+0x2b0>)
 80008b8:	8b5b      	ldrh	r3, [r3, #26]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d16c      	bne.n	8000998 <main+0x2f0>
  			{

  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // обнуляем корректность прошивки
 80008be:	2100      	movs	r1, #0
 80008c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80008c4:	f00b f93e 	bl	800bb44 <fm25v02_write>
  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 80008c8:	2100      	movs	r1, #0
 80008ca:	f240 201d 	movw	r0, #541	; 0x21d
 80008ce:	f00b f939 	bl	800bb44 <fm25v02_write>
  				bootloader_registers.firmware_correctness_reg = 0x0000;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <main+0x2b0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	835a      	strh	r2, [r3, #26]

  				fm25v02_write(2*WORKING_MODE_REG, 0x00); // обнуляем корректность прошивки
 80008d8:	2100      	movs	r1, #0
 80008da:	f240 201e 	movw	r0, #542	; 0x21e
 80008de:	f00b f931 	bl	800bb44 <fm25v02_write>
  				fm25v02_write(2*WORKING_MODE_REG+1, 0x00);
 80008e2:	2100      	movs	r1, #0
 80008e4:	f240 201f 	movw	r0, #543	; 0x21f
 80008e8:	f00b f92c 	bl	800bb44 <fm25v02_write>
  				bootloader_registers.working_mode_reg = 0x0000;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <main+0x2b0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	839a      	strh	r2, [r3, #28]

  				fm25v02_read(271, &test_data1); // обнуляем регистр режима работы с номером 271 в fram памяти, нужно только для старой прошивки
 80008f2:	491f      	ldr	r1, [pc, #124]	; (8000970 <main+0x2c8>)
 80008f4:	f240 100f 	movw	r0, #271	; 0x10f
 80008f8:	f00b f8ea 	bl	800bad0 <fm25v02_read>


  				HAL_UART_DeInit(&huart3);
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <main+0x2cc>)
 80008fe:	f004 fb4a 	bl	8004f96 <HAL_UART_DeInit>
  				HAL_SPI_DeInit(&hspi2);
 8000902:	481d      	ldr	r0, [pc, #116]	; (8000978 <main+0x2d0>)
 8000904:	f003 fb05 	bl	8003f12 <HAL_SPI_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_rx);
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <main+0x2d4>)
 800090a:	f001 f9ff 	bl	8001d0c <HAL_DMA_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_tx);
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <main+0x2d8>)
 8000910:	f001 f9fc 	bl	8001d0c <HAL_DMA_DeInit>

  				HAL_RCC_DeInit();
 8000914:	f003 f8ac 	bl	8003a70 <HAL_RCC_DeInit>

  				HAL_DeInit(); // деинициализируем HAL
 8000918:	f000 ffbe 	bl	8001898 <HAL_DeInit>

  				JumpAddress = *(__IO uint32_t*) (ApplicationAddress2+4); // адрес перехода
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <main+0x2dc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3304      	adds	r3, #4
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <main+0x2e0>)
 8000926:	6013      	str	r3, [r2, #0]
  				Jump_To_Application = (pFunction) JumpAddress; // приводим адрес к типу функции
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <main+0x2e0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <main+0x2e4>)
 8000930:	601a      	str	r2, [r3, #0]
  				__set_MSP (*(__IO uint32_t*) ApplicationAddress2);// устанавливаем указатель стека
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <main+0x2dc>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800093c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000940:	f383 8808 	msr	MSP, r3
}
 8000944:	bf00      	nop

  				SCB->VTOR = FLASH_BASE | 0x10000; // смещаем таблицу векторов прерываний
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <main+0x2e8>)
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <main+0x2ec>)
 800094a:	609a      	str	r2, [r3, #8]

  				Jump_To_Application(); // переход к основной программе
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <main+0x2e4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4798      	blx	r3
 8000952:	e06c      	b.n	8000a2e <main+0x386>
 8000954:	40023800 	.word	0x40023800
 8000958:	20019f98 	.word	0x20019f98
 800095c:	20018454 	.word	0x20018454
 8000960:	20018464 	.word	0x20018464
 8000964:	20018468 	.word	0x20018468
 8000968:	2001844e 	.word	0x2001844e
 800096c:	2001845c 	.word	0x2001845c
 8000970:	20016b1c 	.word	0x20016b1c
 8000974:	20008064 	.word	0x20008064
 8000978:	20007fa8 	.word	0x20007fa8
 800097c:	20008004 	.word	0x20008004
 8000980:	20016b34 	.word	0x20016b34
 8000984:	20000000 	.word	0x20000000
 8000988:	20016b20 	.word	0x20016b20
 800098c:	20016b9c 	.word	0x20016b9c
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	08010000 	.word	0x08010000

  			}
  			else if( bootloader_registers.firmware_correctness_reg == 0 )
 8000998:	4b89      	ldr	r3, [pc, #548]	; (8000bc0 <main+0x518>)
 800099a:	8b5b      	ldrh	r3, [r3, #26]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d146      	bne.n	8000a2e <main+0x386>
  			{
  				fm25v02_read(2*JUMP_ATTEMPT_REG, &temp_h); // увеличиваем количество попыток перейти в основную программу
 80009a0:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 7009 	mov.w	r0, #548	; 0x224
 80009aa:	f00b f891 	bl	800bad0 <fm25v02_read>
  				fm25v02_read(2*JUMP_ATTEMPT_REG+1, &temp_l);
 80009ae:	f107 03ce 	add.w	r3, r7, #206	; 0xce
 80009b2:	4619      	mov	r1, r3
 80009b4:	f240 2025 	movw	r0, #549	; 0x225
 80009b8:	f00b f88a 	bl	800bad0 <fm25v02_read>
  				temp_jump_attempt = (((uint16_t)temp_h)<<8)|((uint16_t)(temp_l));
 80009bc:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  				temp_jump_attempt = temp_jump_attempt + 1;
 80009d2:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80009d6:	3301      	adds	r3, #1
 80009d8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  				temp_h = (uint8_t)(temp_jump_attempt>>8);
 80009dc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  				temp_l = (uint8_t)(temp_jump_attempt);
 80009ea:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
  				fm25v02_write(2*JUMP_ATTEMPT_REG, temp_h);
 80009f4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 7009 	mov.w	r0, #548	; 0x224
 80009fe:	f00b f8a1 	bl	800bb44 <fm25v02_write>
  				fm25v02_write(2*JUMP_ATTEMPT_REG+1, temp_l);
 8000a02:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000a06:	4619      	mov	r1, r3
 8000a08:	f240 2025 	movw	r0, #549	; 0x225
 8000a0c:	f00b f89a 	bl	800bb44 <fm25v02_write>

  				HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f000 ff95 	bl	8001940 <HAL_Delay>

  				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 8000a16:	4b6b      	ldr	r3, [pc, #428]	; (8000bc4 <main+0x51c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f005 fd28 	bl	8006474 <osMutexWait>
  				NVIC_SystemReset();
 8000a24:	f7ff fddc 	bl	80005e0 <__NVIC_SystemReset>
  			}
  		}

  		else
  		{
  			start_default_task_delay = 100;
 8000a28:	4b67      	ldr	r3, [pc, #412]	; (8000bc8 <main+0x520>)
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000a3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 fd00 	bl	8006444 <osMutexCreate>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <main+0x524>)
 8000a48:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 8000a56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 fcf2 	bl	8006444 <osMutexCreate>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <main+0x51c>)
 8000a64:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 8000a72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 fd7f 	bl	800657c <osSemaphoreCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a53      	ldr	r2, [pc, #332]	; (8000bd0 <main+0x528>)
 8000a82:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 8000a90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a94:	2101      	movs	r1, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 fd70 	bl	800657c <osSemaphoreCreate>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a4d      	ldr	r2, [pc, #308]	; (8000bd4 <main+0x52c>)
 8000aa0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <main+0x530>)
 8000aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 8000aae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fc10 	bl	80062dc <osTimerCreate>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <main+0x534>)
 8000ac0:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8000ac2:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <main+0x538>)
 8000ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 8000ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fc00 	bl	80062dc <osTimerCreate>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a41      	ldr	r2, [pc, #260]	; (8000be4 <main+0x53c>)
 8000ae0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 6000, uint8_t);
 8000ae2:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <main+0x540>)
 8000ae4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 8000aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 fe05 	bl	8006704 <osMessageCreate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <main+0x544>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b00:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <main+0x548>)
 8000b02:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fb7d 	bl	800621a <osThreadCreate>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <main+0x54c>)
 8000b24:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <main+0x550>)
 8000b28:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fb6a 	bl	800621a <osThreadCreate>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <main+0x554>)
 8000b4a:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <main+0x558>)
 8000b4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8000b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f005 fb57 	bl	800621a <osThreadCreate>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a25      	ldr	r2, [pc, #148]	; (8000c04 <main+0x55c>)
 8000b70:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <main+0x560>)
 8000b74:	f107 041c 	add.w	r4, r7, #28
 8000b78:	461d      	mov	r5, r3
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fb44 	bl	800621a <osThreadCreate>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <main+0x564>)
 8000b96:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <main+0x568>)
 8000b9a:	463c      	mov	r4, r7
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 8000baa:	463b      	mov	r3, r7
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fb33 	bl	800621a <osThreadCreate>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <main+0x56c>)
 8000bb8:	6013      	str	r3, [r2, #0]
  //ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bba:	f005 fb27 	bl	800620c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <main+0x516>
 8000bc0:	20019f98 	.word	0x20019f98
 8000bc4:	20016bd8 	.word	0x20016bd8
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	20016b2c 	.word	0x20016b2c
 8000bd0:	20018458 	.word	0x20018458
 8000bd4:	20016bb0 	.word	0x20016bb0
 8000bd8:	08001229 	.word	0x08001229
 8000bdc:	20016b24 	.word	0x20016b24
 8000be0:	08001249 	.word	0x08001249
 8000be4:	20016b30 	.word	0x20016b30
 8000be8:	0800e0a8 	.word	0x0800e0a8
 8000bec:	200080b8 	.word	0x200080b8
 8000bf0:	0800e0b8 	.word	0x0800e0b8
 8000bf4:	20007fa4 	.word	0x20007fa4
 8000bf8:	0800e0d4 	.word	0x0800e0d4
 8000bfc:	20016bac 	.word	0x20016bac
 8000c00:	0800e0f0 	.word	0x0800e0f0
 8000c04:	20016ba8 	.word	0x20016ba8
 8000c08:	0800e10c 	.word	0x0800e10c
 8000c0c:	20016ba4 	.word	0x20016ba4
 8000c10:	0800e128 	.word	0x0800e128
 8000c14:	20016b98 	.word	0x20016b98

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2230      	movs	r2, #48	; 0x30
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00c fd6a 	bl	800d700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <SystemClock_Config+0xd4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <SystemClock_Config+0xd4>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <SystemClock_Config+0xd4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <SystemClock_Config+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000c74:	230d      	movs	r3, #13
 8000c76:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c90:	2319      	movs	r3, #25
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f986 	bl	8002fb8 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cb2:	f000 fb0b 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fbe7 	bl	80034a8 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ce0:	f000 faf4 	bl	80012cc <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3750      	adds	r7, #80	; 0x50
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_IWDG_Init+0x24>)
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <MX_IWDG_Init+0x28>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_IWDG_Init+0x24>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <MX_IWDG_Init+0x24>)
 8000d06:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d0a:	609a      	str	r2, [r3, #8]
  //}
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200080ac 	.word	0x200080ac
 8000d1c:	40003000 	.word	0x40003000

08000d20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <MX_RTC_Init+0x84>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d46:	227f      	movs	r2, #127	; 0x7f
 8000d48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <MX_RTC_Init+0x80>)
 8000d64:	f002 ff52 	bl	8003c0c <HAL_RTC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 faad 	bl	80012cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20016bb8 	.word	0x20016bb8
 8000da4:	40002800 	.word	0x40002800

08000da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_SPI2_Init+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000ddc:	2220      	movs	r2, #32
 8000dde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_SPI2_Init+0x64>)
 8000dfa:	f003 f801 	bl	8003e00 <HAL_SPI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e04:	f000 fa62 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20007fa8 	.word	0x20007fa8
 8000e10:	40003800 	.word	0x40003800

08000e14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_USART3_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART3_UART_Init+0x4c>)
 8000e4c:	f004 f856 	bl	8004efc <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f000 fa39 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20008064 	.word	0x20008064
 8000e64:	40004800 	.word	0x40004800

08000e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_DMA_Init+0x4c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	200c      	movs	r0, #12
 8000e90:	f000 fe56 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e94:	200c      	movs	r0, #12
 8000e96:	f000 fe6f 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	200e      	movs	r0, #14
 8000ea0:	f000 fe4e 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ea4:	200e      	movs	r0, #14
 8000ea6:	f000 fe67 	bl	8001b78 <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
 8000ed2:	4bb3      	ldr	r3, [pc, #716]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4ab2      	ldr	r2, [pc, #712]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4bb0      	ldr	r3, [pc, #704]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	4bac      	ldr	r3, [pc, #688]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4aab      	ldr	r2, [pc, #684]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4ba9      	ldr	r3, [pc, #676]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4ba5      	ldr	r3, [pc, #660]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4aa4      	ldr	r2, [pc, #656]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4ba2      	ldr	r3, [pc, #648]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b9e      	ldr	r3, [pc, #632]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a9d      	ldr	r2, [pc, #628]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b9b      	ldr	r3, [pc, #620]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b97      	ldr	r3, [pc, #604]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a96      	ldr	r2, [pc, #600]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b90      	ldr	r3, [pc, #576]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a8f      	ldr	r2, [pc, #572]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b8d      	ldr	r3, [pc, #564]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a88      	ldr	r2, [pc, #544]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b86      	ldr	r3, [pc, #536]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b82      	ldr	r3, [pc, #520]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a81      	ldr	r2, [pc, #516]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b7f      	ldr	r3, [pc, #508]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a7a      	ldr	r2, [pc, #488]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b78      	ldr	r3, [pc, #480]	; (80011a0 <MX_GPIO_Init+0x2e8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4875      	ldr	r0, [pc, #468]	; (80011a4 <MX_GPIO_Init+0x2ec>)
 8000fd0:	f001 ffbe 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	4873      	ldr	r0, [pc, #460]	; (80011a8 <MX_GPIO_Init+0x2f0>)
 8000fdc:	f001 ffb8 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	4871      	ldr	r0, [pc, #452]	; (80011ac <MX_GPIO_Init+0x2f4>)
 8000fe8:	f001 ffb2 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ff2:	486d      	ldr	r0, [pc, #436]	; (80011a8 <MX_GPIO_Init+0x2f0>)
 8000ff4:	f001 ffac 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2138      	movs	r1, #56	; 0x38
 8000ffc:	486c      	ldr	r0, [pc, #432]	; (80011b0 <MX_GPIO_Init+0x2f8>)
 8000ffe:	f001 ffa7 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	486b      	ldr	r0, [pc, #428]	; (80011b4 <MX_GPIO_Init+0x2fc>)
 8001008:	f001 ffa2 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f248 010c 	movw	r1, #32780	; 0x800c
 8001012:	4869      	ldr	r0, [pc, #420]	; (80011b8 <MX_GPIO_Init+0x300>)
 8001014:	f001 ff9c 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2160      	movs	r1, #96	; 0x60
 800101c:	4866      	ldr	r0, [pc, #408]	; (80011b8 <MX_GPIO_Init+0x300>)
 800101e:	f001 ff97 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2128      	movs	r1, #40	; 0x28
 8001026:	4863      	ldr	r0, [pc, #396]	; (80011b4 <MX_GPIO_Init+0x2fc>)
 8001028:	f001 ff92 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001032:	4862      	ldr	r0, [pc, #392]	; (80011bc <MX_GPIO_Init+0x304>)
 8001034:	f001 ff8c 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4860      	ldr	r0, [pc, #384]	; (80011c0 <MX_GPIO_Init+0x308>)
 8001040:	f001 ff86 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001044:	2340      	movs	r3, #64	; 0x40
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4852      	ldr	r0, [pc, #328]	; (80011a4 <MX_GPIO_Init+0x2ec>)
 800105c:	f001 fce0 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001060:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	484b      	ldr	r0, [pc, #300]	; (80011a8 <MX_GPIO_Init+0x2f0>)
 800107a:	f001 fcd1 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4845      	ldr	r0, [pc, #276]	; (80011ac <MX_GPIO_Init+0x2f4>)
 8001098:	f001 fcc2 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800109c:	2338      	movs	r3, #56	; 0x38
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	483f      	ldr	r0, [pc, #252]	; (80011b0 <MX_GPIO_Init+0x2f8>)
 80010b4:	f001 fcb4 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 80010b8:	2329      	movs	r3, #41	; 0x29
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4839      	ldr	r0, [pc, #228]	; (80011b4 <MX_GPIO_Init+0x2fc>)
 80010d0:	f001 fca6 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH5 PH6
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 80010d4:	f248 036c 	movw	r3, #32876	; 0x806c
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4832      	ldr	r0, [pc, #200]	; (80011b8 <MX_GPIO_Init+0x300>)
 80010ee:	f001 fc97 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f2:	2310      	movs	r3, #16
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <MX_GPIO_Init+0x300>)
 8001106:	f001 fc8b 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800110a:	2304      	movs	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4829      	ldr	r0, [pc, #164]	; (80011c4 <MX_GPIO_Init+0x30c>)
 800111e:	f001 fc7f 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001122:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <MX_GPIO_Init+0x2f8>)
 8001138:	f001 fc72 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x308>)
 8001150:	f001 fc66 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001154:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800115e:	2302      	movs	r3, #2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <MX_GPIO_Init+0x304>)
 800116e:	f001 fc57 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001172:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001184:	2308      	movs	r3, #8
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_GPIO_Init+0x308>)
 8001190:	f001 fc46 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
 800119e:	e013      	b.n	80011c8 <MX_GPIO_Init+0x310>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021800 	.word	0x40021800
 80011c4:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <MX_GPIO_Init+0x364>)
 80011d8:	f001 fc22 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <MX_GPIO_Init+0x368>)
 80011f8:	f001 fc12 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_GPIO_Init+0x36c>)
 8001210:	f001 fc06 	bl	8002a20 <HAL_GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021800 	.word	0x40021800
 8001220:	40020400 	.word	0x40020400
 8001224:	40021000 	.word	0x40021000

08001228 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <Callback_AT_Timer+0x1c>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]

}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20016bb4 	.word	0x20016bb4

08001248 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	//modem_reset_state = 1;

	osMutexWait(Fm25v02MutexHandle, 5000); // ждем освобождение мьютекса записи в память
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <Callback_Ring_Center_Timer+0x38>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f241 3188 	movw	r1, #5000	; 0x1388
 8001258:	4618      	mov	r0, r3
 800125a:	f005 f90b 	bl	8006474 <osMutexWait>
	osThreadSuspend(M95TaskHandle);
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <Callback_Ring_Center_Timer+0x3c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f005 fb2a 	bl	80068bc <osThreadSuspend>
	modem_reset_state = 0;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <Callback_Ring_Center_Timer+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	//AT_QPOWD(0);
	m95_power_off();
 800126e:	f00a fd57 	bl	800bd20 <m95_power_off>
	HAL_Delay(5000);
 8001272:	f241 3088 	movw	r0, #5000	; 0x1388
 8001276:	f000 fb63 	bl	8001940 <HAL_Delay>
	NVIC_SystemReset();
 800127a:	f7ff f9b1 	bl	80005e0 <__NVIC_SystemReset>
 800127e:	bf00      	nop
 8001280:	20016bd8 	.word	0x20016bd8
 8001284:	20016bac 	.word	0x20016bac
 8001288:	20000805 	.word	0x20000805

0800128c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	//HAL_IWDG_Refresh(&hiwdg);
	LED_VD3_TOGGLE();
 8001294:	f00a fd04 	bl	800bca0 <LED_VD3_TOGGLE>

    osDelay(start_default_task_delay);
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <StartDefaultTask+0x18>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f005 f808 	bl	80062b2 <osDelay>
	LED_VD3_TOGGLE();
 80012a2:	e7f7      	b.n	8001294 <StartDefaultTask+0x8>
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 fb21 	bl	8001900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40010000 	.word	0x40010000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	NVIC_SystemReset();
 80012d0:	f7ff f986 	bl	80005e0 <__NVIC_SystemReset>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_MspInit+0x54>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_MspInit+0x54>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_MspInit+0x54>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_MspInit+0x54>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_MspInit+0x54>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_MspInit+0x54>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
 800131a:	f000 fc11 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_RTC_MspInit+0x4c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d111      	bne.n	8001370 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800134c:	2302      	movs	r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001354:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4618      	mov	r0, r3
 800135c:	f002 faa6 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001366:	f7ff ffb1 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_RTC_MspInit+0x50>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40002800 	.word	0x40002800
 800137c:	42470e3c 	.word	0x42470e3c

08001380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_SPI_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_SPI_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013da:	230e      	movs	r3, #14
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ea:	2305      	movs	r3, #5
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_SPI_MspInit+0x8c>)
 80013f6:	f001 fb13 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40003800 	.word	0x40003800
 8001408:	40023800 	.word	0x40023800
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_SPI_MspDeInit+0x30>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d109      	bne.n	8001436 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_SPI_MspDeInit+0x34>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_SPI_MspDeInit+0x34>)
 8001428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 800142e:	210e      	movs	r1, #14
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_SPI_MspDeInit+0x38>)
 8001432:	f001 fc91 	bl	8002d58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40003800 	.word	0x40003800
 8001444:	40023800 	.word	0x40023800
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a4c      	ldr	r2, [pc, #304]	; (800159c <HAL_UART_MspInit+0x150>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f040 8091 	bne.w	8001592 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <HAL_UART_MspInit+0x154>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <HAL_UART_MspInit+0x154>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_UART_MspInit+0x154>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_UART_MspInit+0x154>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_UART_MspInit+0x154>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_UART_MspInit+0x154>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ba:	2307      	movs	r3, #7
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <HAL_UART_MspInit+0x158>)
 80014c6:	f001 faab 	bl	8002a20 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014cc:	4a37      	ldr	r2, [pc, #220]	; (80015ac <HAL_UART_MspInit+0x160>)
 80014ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 800150c:	f000 fb50 	bl	8001bb0 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001516:	f7ff fed9 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 800151e:	635a      	str	r2, [r3, #52]	; 0x34
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <HAL_UART_MspInit+0x15c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_UART_MspInit+0x168>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800152e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001532:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001546:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x164>)
 8001568:	f000 fb22 	bl	8001bb0 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001572:	f7ff feab 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
 800157c:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_UART_MspInit+0x164>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2027      	movs	r0, #39	; 0x27
 8001588:	f000 fada 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800158c:	2027      	movs	r0, #39	; 0x27
 800158e:	f000 faf3 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004800 	.word	0x40004800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	20016b34 	.word	0x20016b34
 80015ac:	40026058 	.word	0x40026058
 80015b0:	20008004 	.word	0x20008004
 80015b4:	40026028 	.word	0x40026028

080015b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <HAL_UART_MspDeInit+0x4c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d117      	bne.n	80015fa <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_UART_MspDeInit+0x50>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_UART_MspDeInit+0x50>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80015d6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80015da:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_UART_MspDeInit+0x54>)
 80015dc:	f001 fbbc 	bl	8002d58 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fb91 	bl	8001d0c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fb8c 	bl	8001d0c <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80015f4:	2027      	movs	r0, #39	; 0x27
 80015f6:	f000 facd 	bl	8001b94 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004800 	.word	0x40004800
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	2019      	movs	r0, #25
 8001626:	f000 fa8b 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800162a:	2019      	movs	r0, #25
 800162c:	f000 faa4 	bl	8001b78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_InitTick+0xa4>)
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_InitTick+0xa4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6453      	str	r3, [r2, #68]	; 0x44
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_InitTick+0xa4>)
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f002 f8f6 	bl	8003848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800165c:	f002 f8e0 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8001660:	4603      	mov	r3, r0
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <HAL_InitTick+0xa8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3b01      	subs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_InitTick+0xac>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_InitTick+0xb0>)
 8001678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_InitTick+0xac>)
 800167c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001680:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_InitTick+0xac>)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_InitTick+0xac>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_InitTick+0xac>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <HAL_InitTick+0xac>)
 8001696:	f003 f983 	bl	80049a0 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <HAL_InitTick+0xac>)
 80016a2:	f003 f9d7 	bl	8004a54 <HAL_TIM_Base_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3730      	adds	r7, #48	; 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	2001846c 	.word	0x2001846c
 80016c0:	40010000 	.word	0x40010000

080016c4 <__NVIC_SystemReset>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016c8:	f3bf 8f4f 	dsb	sy
}
 80016cc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <__NVIC_SystemReset+0x24>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016d6:	4904      	ldr	r1, [pc, #16]	; (80016e8 <__NVIC_SystemReset+0x24>)
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_SystemReset+0x28>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016de:	f3bf 8f4f 	dsb	sy
}
 80016e2:	bf00      	nop
    __NOP();
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <__NVIC_SystemReset+0x20>
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	05fa0004 	.word	0x05fa0004

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	NVIC_SystemReset();
 80016fa:	f7ff ffe3 	bl	80016c4 <__NVIC_SystemReset>

080016fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <BusFault_Handler+0x4>

0800170a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <UsageFault_Handler+0x4>

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream1_IRQHandler+0x10>)
 8001726:	f000 fc39 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20008004 	.word	0x20008004

08001734 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Stream3_IRQHandler+0x10>)
 800173a:	f000 fc2f 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20016b34 	.word	0x20016b34

08001748 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800174e:	f003 f9f1 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2001846c 	.word	0x2001846c

0800175c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <USART3_IRQHandler+0x10>)
 8001762:	f003 fcf5 	bl	8005150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20008064 	.word	0x20008064

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f00b ff74 	bl	800d68c <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20000808 	.word	0x20000808
 80017d8:	2001a138 	.word	0x2001a138

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182a:	f7ff ffd7 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f00b ff33 	bl	800d698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7fe ff39 	bl	80006a8 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001844:	0800e63c 	.word	0x0800e63c
  ldr r2, =_sbss
 8001848:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800184c:	2001a134 	.word	0x2001a134

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f954 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff fec4 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fd24 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_DeInit+0x54>)
 800189e:	f04f 32ff 	mov.w	r2, #4294967295
 80018a2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_DeInit+0x54>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_DeInit+0x54>)
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_DeInit+0x54>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_DeInit+0x54>)
 80018ba:	f04f 32ff 	mov.w	r2, #4294967295
 80018be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_DeInit+0x54>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_DeInit+0x54>)
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_DeInit+0x54>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_DeInit+0x54>)
 80018d6:	f04f 32ff 	mov.w	r2, #4294967295
 80018da:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_DeInit+0x54>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80018e2:	f000 f805 	bl	80018f0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000010 	.word	0x20000010
 8001924:	200184b4 	.word	0x200184b4

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200184b4 	.word	0x200184b4

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000010 	.word	0x20000010

08001988 <__NVIC_SetPriorityGrouping>:
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_DisableIRQ>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db12      	blt.n	8001a60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	490a      	ldr	r1, [pc, #40]	; (8001a6c <__NVIC_DisableIRQ+0x44>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	3320      	adds	r3, #32
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a54:	f3bf 8f4f 	dsb	sy
}
 8001a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a5a:	f3bf 8f6f 	isb	sy
}
 8001a5e:	bf00      	nop
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff28 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff3d 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff30 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff40 	bl	8001a28 <__NVIC_DisableIRQ>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff feb4 	bl	8001928 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e099      	b.n	8001d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bec:	e00f      	b.n	8001c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fe9b 	bl	8001928 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d908      	bls.n	8001c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e078      	b.n	8001d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e8      	bne.n	8001bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_DMA_Init+0x158>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d107      	bne.n	8001c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4313      	orrs	r3, r2
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f023 0307 	bic.w	r3, r3, #7
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d117      	bne.n	8001cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fb5f 	bl	8002378 <DMA_CheckFifoParam>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e016      	b.n	8001d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fb16 	bl	800230c <DMA_CalcBaseAndBitshift>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	f010803f 	.word	0xf010803f

08001d0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e050      	b.n	8001dc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e048      	b.n	8001dc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2221      	movs	r2, #33	; 0x21
 8001d6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 facc 	bl	800230c <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	223f      	movs	r2, #63	; 0x3f
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_DMA_Start_IT+0x26>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e040      	b.n	8001e70 <HAL_DMA_Start_IT+0xa8>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d12f      	bne.n	8001e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fa4a 	bl	80022b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0216 	orr.w	r2, r2, #22
 8001e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0208 	orr.w	r2, r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e005      	b.n	8001e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e86:	f7ff fd4f 	bl	8001928 <HAL_GetTick>
 8001e8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e052      	b.n	8001f50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0216 	bic.w	r2, r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_DMA_Abort+0x62>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efa:	e013      	b.n	8001f24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efc:	f7ff fd14 	bl	8001928 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d90c      	bls.n	8001f24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e015      	b.n	8001f50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1e4      	bne.n	8001efc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f36:	223f      	movs	r2, #63	; 0x3f
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00c      	b.n	8001f90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa8:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <HAL_DMA_IRQHandler+0x258>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <HAL_DMA_IRQHandler+0x25c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01a      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2204      	movs	r2, #4
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2204      	movs	r2, #4
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2210      	movs	r2, #16
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d043      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03c      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	2210      	movs	r2, #16
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d018      	beq.n	80020de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d024      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
 80020ca:	e01f      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e016      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0208 	bic.w	r2, r2, #8
 80020fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2220      	movs	r2, #32
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 808e 	beq.w	800223a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8086 	beq.w	800223a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	2220      	movs	r2, #32
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b05      	cmp	r3, #5
 8002144:	d136      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_IRQHandler+0x1da>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	223f      	movs	r2, #63	; 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d07d      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
        }
        return;
 80021b2:	e078      	b.n	80022a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01c      	beq.n	80021fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d030      	beq.n	800223a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e02b      	b.n	800223a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d027      	beq.n	800223a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e022      	b.n	800223a <HAL_DMA_IRQHandler+0x29e>
 80021f4:	20000008 	.word	0x20000008
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0210 	bic.w	r2, r2, #16
 8002218:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	2b00      	cmp	r3, #0
 8002240:	d032      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d022      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	429a      	cmp	r2, r3
 8002270:	d307      	bcc.n	8002282 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_DMA_IRQHandler+0x2ca>
 8002280:	e000      	b.n	8002284 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002282:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e000      	b.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022a6:	bf00      	nop
    }
  }
}
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d108      	bne.n	80022f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ee:	e007      	b.n	8002300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3b10      	subs	r3, #16
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <DMA_CalcBaseAndBitshift+0x64>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d909      	bls.n	800234e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	; 0x58
 800234c:	e007      	b.n	800235e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	aaaaaaab 	.word	0xaaaaaaab
 8002374:	0800e390 	.word	0x0800e390

08002378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0x5a>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d856      	bhi.n	8002446 <DMA_CheckFifoParam+0xce>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <DMA_CheckFifoParam+0x28>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	08002447 	.word	0x08002447
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d046      	beq.n	800244a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e043      	b.n	800244a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ca:	d140      	bne.n	800244e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e03d      	b.n	800244e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023da:	d121      	bne.n	8002420 <DMA_CheckFifoParam+0xa8>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d837      	bhi.n	8002452 <DMA_CheckFifoParam+0xda>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <DMA_CheckFifoParam+0x70>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	080023ff 	.word	0x080023ff
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	08002411 	.word	0x08002411
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e030      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d025      	beq.n	8002456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240e:	e022      	b.n	8002456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002418:	d11f      	bne.n	800245a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241e:	e01c      	b.n	800245a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d903      	bls.n	800242e <DMA_CheckFifoParam+0xb6>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d003      	beq.n	8002434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800242c:	e018      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      break;
 8002432:	e015      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e00b      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002446:	bf00      	nop
 8002448:	e00a      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e008      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e006      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
 8002454:	e004      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
 8002458:	e002      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;   
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
    }
  } 
  
  return status; 
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002482:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_FLASH_Program+0xa0>)
 8002484:	7e1b      	ldrb	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_FLASH_Program+0x1e>
 800248a:	2302      	movs	r3, #2
 800248c:	e03b      	b.n	8002506 <HAL_FLASH_Program+0x96>
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_FLASH_Program+0xa0>)
 8002490:	2201      	movs	r2, #1
 8002492:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002494:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002498:	f000 f870 	bl	800257c <FLASH_WaitForLastOperation>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d12b      	bne.n	80024fe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80024ac:	783b      	ldrb	r3, [r7, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f000 f91b 	bl	80026ec <FLASH_Program_Byte>
 80024b6:	e016      	b.n	80024e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80024be:	883b      	ldrh	r3, [r7, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	68b8      	ldr	r0, [r7, #8]
 80024c4:	f000 f8ee 	bl	80026a4 <FLASH_Program_HalfWord>
 80024c8:	e00d      	b.n	80024e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d105      	bne.n	80024dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	f000 f8c3 	bl	8002660 <FLASH_Program_Word>
 80024da:	e004      	b.n	80024e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80024dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e0:	68b8      	ldr	r0, [r7, #8]
 80024e2:	f000 f88b 	bl	80025fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ea:	f000 f847 	bl	800257c <FLASH_WaitForLastOperation>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_FLASH_Program+0xa4>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <HAL_FLASH_Program+0xa4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_FLASH_Program+0xa0>)
 8002500:	2200      	movs	r2, #0
 8002502:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002504:	7dfb      	ldrb	r3, [r7, #23]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200184b8 	.word	0x200184b8
 8002514:	40023c00 	.word	0x40023c00

08002518 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_FLASH_Unlock+0x38>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	da0b      	bge.n	8002542 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_FLASH_Unlock+0x38>)
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_FLASH_Unlock+0x3c>)
 800252e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_FLASH_Unlock+0x38>)
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_FLASH_Unlock+0x40>)
 8002534:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_FLASH_Unlock+0x38>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da01      	bge.n	8002542 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002542:	79fb      	ldrb	r3, [r7, #7]
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40023c00 	.word	0x40023c00
 8002554:	45670123 	.word	0x45670123
 8002558:	cdef89ab 	.word	0xcdef89ab

0800255c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_FLASH_Lock+0x1c>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_FLASH_Lock+0x1c>)
 8002566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800256a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40023c00 	.word	0x40023c00

0800257c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <FLASH_WaitForLastOperation+0x78>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800258e:	f7ff f9cb 	bl	8001928 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002594:	e010      	b.n	80025b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d00c      	beq.n	80025b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <FLASH_WaitForLastOperation+0x38>
 80025a4:	f7ff f9c0 	bl	8001928 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d201      	bcs.n	80025b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e019      	b.n	80025ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <FLASH_WaitForLastOperation+0x7c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e8      	bne.n	8002596 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <FLASH_WaitForLastOperation+0x7c>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <FLASH_WaitForLastOperation+0x7c>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <FLASH_WaitForLastOperation+0x7c>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025e2:	f000 f8a5 	bl	8002730 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
  
}  
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200184b8 	.word	0x200184b8
 80025f8:	40023c00 	.word	0x40023c00

080025fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4a13      	ldr	r2, [pc, #76]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	4a10      	ldr	r2, [pc, #64]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 800261a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800261e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <FLASH_Program_DoubleWord+0x60>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002632:	f3bf 8f6f 	isb	sy
}
 8002636:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	000a      	movs	r2, r1
 8002646:	2300      	movs	r3, #0
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	3104      	adds	r1, #4
 800264c:	4613      	mov	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40023c00 	.word	0x40023c00

08002660 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <FLASH_Program_Word+0x40>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <FLASH_Program_Word+0x40>)
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <FLASH_Program_Word+0x40>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <FLASH_Program_Word+0x40>)
 800267c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002680:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <FLASH_Program_Word+0x40>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <FLASH_Program_Word+0x40>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <FLASH_Program_HalfWord+0x44>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	801a      	strh	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <FLASH_Program_Byte+0x40>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <FLASH_Program_Byte+0x40>)
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <FLASH_Program_Byte+0x40>)
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <FLASH_Program_Byte+0x40>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <FLASH_Program_Byte+0x40>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <FLASH_Program_Byte+0x40>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	701a      	strb	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	4a23      	ldr	r2, [pc, #140]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 800274a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 800274e:	2210      	movs	r2, #16
 8002750:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 8002768:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 800276c:	2220      	movs	r2, #32
 800276e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 8002786:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 800278a:	2240      	movs	r2, #64	; 0x40
 800278c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 80027a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <FLASH_SetErrorCode+0xa8>)
 80027c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <FLASH_SetErrorCode+0xa4>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	60da      	str	r2, [r3, #12]
  }
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	200184b8 	.word	0x200184b8

080027dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80027f0:	7e1b      	ldrb	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_FLASHEx_Erase+0x1e>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e058      	b.n	80028ac <HAL_FLASHEx_Erase+0xd0>
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002804:	f7ff feba 	bl	800257c <FLASH_WaitForLastOperation>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d148      	bne.n	80028a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d115      	bne.n	800284e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 f844 	bl	80028bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002834:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002838:	f7ff fea0 	bl	800257c <FLASH_WaitForLastOperation>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6113      	str	r3, [r2, #16]
 800284c:	e028      	b.n	80028a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e01c      	b.n	8002890 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	68b8      	ldr	r0, [r7, #8]
 8002860:	f000 f850 	bl	8002904 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002868:	f7ff fe88 	bl	800257c <FLASH_WaitForLastOperation>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002876:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800287a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	601a      	str	r2, [r3, #0]
          break;
 8002888:	e00a      	b.n	80028a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3301      	adds	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4413      	add	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3da      	bcc.n	8002856 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80028a0:	f000 f878 	bl	8002994 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	761a      	strb	r2, [r3, #24]

  return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200184b8 	.word	0x200184b8
 80028b8:	40023c00 	.word	0x40023c00

080028bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <FLASH_MassErase+0x44>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <FLASH_MassErase+0x44>)
 80028ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <FLASH_MassErase+0x44>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <FLASH_MassErase+0x44>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <FLASH_MassErase+0x44>)
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4313      	orrs	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <FLASH_MassErase+0x44>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6113      	str	r3, [r2, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00

08002904 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e010      	b.n	8002942 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d103      	bne.n	800292e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e009      	b.n	8002942 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d103      	bne.n	800293c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e002      	b.n	8002942 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800293c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002940:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	490f      	ldr	r1, [pc, #60]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002960:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002964:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4313      	orrs	r3, r2
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <FLASH_Erase_Sector+0x8c>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6113      	str	r3, [r2, #16]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40023c00 	.word	0x40023c00

08002994 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <FLASH_FlushCaches+0x88>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <FLASH_FlushCaches+0x88>)
 80029fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a02:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <FLASH_FlushCaches+0x88>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <FLASH_FlushCaches+0x88>)
 8002a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0e:	6013      	str	r3, [r2, #0]
  }
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e16b      	b.n	8002d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 815a 	bne.w	8002d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d130      	bne.n	8002ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0201 	and.w	r2, r3, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d017      	beq.n	8002b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d123      	bne.n	8002b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	69b9      	ldr	r1, [r7, #24]
 8002b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0203 	and.w	r2, r3, #3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80b4 	beq.w	8002d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_GPIO_Init+0x30c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc2:	4a5b      	ldr	r2, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_GPIO_Init+0x314>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a51      	ldr	r2, [pc, #324]	; (8002d38 <HAL_GPIO_Init+0x318>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x222>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_GPIO_Init+0x31c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x21e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x320>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x21a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_GPIO_Init+0x324>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x216>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <HAL_GPIO_Init+0x328>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x212>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	; (8002d4c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x20e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x20a>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x228>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x310>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_GPIO_Init+0x334>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae90 	bls.w	8002a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e0cd      	b.n	8002f10 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d74:	2201      	movs	r2, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	f040 80bd 	bne.w	8002f0a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d90:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_GPIO_DeInit+0x1d0>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a5d      	ldr	r2, [pc, #372]	; (8002f2c <HAL_GPIO_DeInit+0x1d4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02b      	beq.n	8002e12 <HAL_GPIO_DeInit+0xba>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <HAL_GPIO_DeInit+0x1d8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d025      	beq.n	8002e0e <HAL_GPIO_DeInit+0xb6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a5b      	ldr	r2, [pc, #364]	; (8002f34 <HAL_GPIO_DeInit+0x1dc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01f      	beq.n	8002e0a <HAL_GPIO_DeInit+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_GPIO_DeInit+0x1e0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_DeInit+0xae>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_GPIO_DeInit+0x1e4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_DeInit+0xaa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_GPIO_DeInit+0x1e8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_DeInit+0xa6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a57      	ldr	r2, [pc, #348]	; (8002f44 <HAL_GPIO_DeInit+0x1ec>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_DeInit+0xa2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_GPIO_DeInit+0x1f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_DeInit+0x9e>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00e      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002df6:	2308      	movs	r3, #8
 8002df8:	e00c      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	e00a      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002dfe:	2305      	movs	r3, #5
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002e02:	2304      	movs	r3, #4
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_DeInit+0xbc>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d132      	bne.n	8002e8a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4947      	ldr	r1, [pc, #284]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e32:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4944      	ldr	r1, [pc, #272]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	4940      	ldr	r1, [pc, #256]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	493d      	ldr	r1, [pc, #244]	; (8002f4c <HAL_GPIO_DeInit+0x1f4>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_GPIO_DeInit+0x1d0>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	482a      	ldr	r0, [pc, #168]	; (8002f28 <HAL_GPIO_DeInit+0x1d0>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	400a      	ands	r2, r1
 8002e84:	3302      	adds	r3, #2
 8002e86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2103      	movs	r1, #3
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	08d2      	lsrs	r2, r2, #3
 8002ec0:	4019      	ands	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2103      	movs	r1, #3
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	401a      	ands	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f af2e 	bls.w	8002d74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	041a      	lsls	r2, r3, #16
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e264      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d075      	beq.n	80030c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	4ba3      	ldr	r3, [pc, #652]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d00c      	beq.n	8002ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d112      	bne.n	8003014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fee:	4b9d      	ldr	r3, [pc, #628]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d10b      	bne.n	8003014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	4b99      	ldr	r3, [pc, #612]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05b      	beq.n	80030c0 <HAL_RCC_OscConfig+0x108>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d157      	bne.n	80030c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e23f      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301c:	d106      	bne.n	800302c <HAL_RCC_OscConfig+0x74>
 800301e:	4b91      	ldr	r3, [pc, #580]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a90      	ldr	r2, [pc, #576]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xb0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x98>
 8003036:	4b8b      	ldr	r3, [pc, #556]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a8a      	ldr	r2, [pc, #552]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a87      	ldr	r2, [pc, #540]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xb0>
 8003050:	4b84      	ldr	r3, [pc, #528]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a83      	ldr	r2, [pc, #524]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b81      	ldr	r3, [pc, #516]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a80      	ldr	r2, [pc, #512]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fc5a 	bl	8001928 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fc56 	bl	8001928 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e204      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xc0>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fc46 	bl	8001928 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fc42 	bl	8001928 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1f0      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	4b6c      	ldr	r3, [pc, #432]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0xe8>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b62      	ldr	r3, [pc, #392]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x152>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1c4      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b56      	ldr	r3, [pc, #344]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4952      	ldr	r1, [pc, #328]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e03a      	b.n	8003196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b4f      	ldr	r3, [pc, #316]	; (8003268 <HAL_RCC_OscConfig+0x2b0>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fbfb 	bl	8001928 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003136:	f7fe fbf7 	bl	8001928 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1a5      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4940      	ldr	r1, [pc, #256]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]
 8003168:	e015      	b.n	8003196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x2b0>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fbda 	bl	8001928 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe fbd6 	bl	8001928 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e184      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d030      	beq.n	8003204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_RCC_OscConfig+0x2b4>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fbba 	bl	8001928 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fe fbb6 	bl	8001928 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e164      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x200>
 80031d6:	e015      	b.n	8003204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x2b4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7fe fba3 	bl	8001928 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e6:	f7fe fb9f 	bl	8001928 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e14d      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a0 	beq.w	8003352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_OscConfig+0x2b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d121      	bne.n	8003292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCC_OscConfig+0x2b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_RCC_OscConfig+0x2b8>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fe fb65 	bl	8001928 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e011      	b.n	8003286 <HAL_RCC_OscConfig+0x2ce>
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	42470000 	.word	0x42470000
 800326c:	42470e80 	.word	0x42470e80
 8003270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe fb58 	bl	8001928 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e106      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b85      	ldr	r3, [pc, #532]	; (800349c <HAL_RCC_OscConfig+0x4e4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
 800329a:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a80      	ldr	r2, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	e01c      	b.n	80032e2 <HAL_RCC_OscConfig+0x32a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d10c      	bne.n	80032ca <HAL_RCC_OscConfig+0x312>
 80032b0:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a7a      	ldr	r2, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
 80032c8:	e00b      	b.n	80032e2 <HAL_RCC_OscConfig+0x32a>
 80032ca:	4b75      	ldr	r3, [pc, #468]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a74      	ldr	r2, [pc, #464]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d015      	beq.n	8003316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fb1d 	bl	8001928 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fb19 	bl	8001928 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0c5      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ee      	beq.n	80032f2 <HAL_RCC_OscConfig+0x33a>
 8003314:	e014      	b.n	8003340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fe fb07 	bl	8001928 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fb03 	bl	8001928 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0af      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003334:	4b5a      	ldr	r3, [pc, #360]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ee      	bne.n	800331e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003346:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a55      	ldr	r2, [pc, #340]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800334c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 809b 	beq.w	8003492 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335c:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d05c      	beq.n	8003422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d141      	bne.n	80033f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003370:	4b4c      	ldr	r3, [pc, #304]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fe fad7 	bl	8001928 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe fad3 	bl	8001928 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e081      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003390:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe faac 	bl	8001928 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe faa8 	bl	8001928 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e056      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x41c>
 80033f2:	e04e      	b.n	8003492 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_OscConfig+0x4ec>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fa95 	bl	8001928 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fa91 	bl	8001928 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e03f      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003414:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x44a>
 8003420:	e037      	b.n	8003492 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e032      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d028      	beq.n	800348e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d121      	bne.n	800348e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d11a      	bne.n	800348e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800345e:	4013      	ands	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003464:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003466:	4293      	cmp	r3, r2
 8003468:	d111      	bne.n	800348e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d107      	bne.n	800348e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40007000 	.word	0x40007000
 80034a0:	40023800 	.word	0x40023800
 80034a4:	42470060 	.word	0x42470060

080034a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0cc      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d90c      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800351e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d044      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d119      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d003      	beq.n	8003566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003562:	2b03      	cmp	r3, #3
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b3f      	ldr	r3, [pc, #252]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e06f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e067      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b37      	ldr	r3, [pc, #220]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4934      	ldr	r1, [pc, #208]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003598:	f7fe f9c6 	bl	8001928 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fe f9c2 	bl	8001928 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e04f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d20c      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd ffde 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023c00 	.word	0x40023c00
 8003664:	40023800 	.word	0x40023800
 8003668:	0800e378 	.word	0x0800e378
 800366c:	20000008 	.word	0x20000008
 8003670:	2000000c 	.word	0x2000000c

08003674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800367a:	2100      	movs	r1, #0
 800367c:	6079      	str	r1, [r7, #4]
 800367e:	2100      	movs	r1, #0
 8003680:	60f9      	str	r1, [r7, #12]
 8003682:	2100      	movs	r1, #0
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003686:	2100      	movs	r1, #0
 8003688:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800368a:	4952      	ldr	r1, [pc, #328]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800368c:	6889      	ldr	r1, [r1, #8]
 800368e:	f001 010c 	and.w	r1, r1, #12
 8003692:	2908      	cmp	r1, #8
 8003694:	d00d      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003696:	2908      	cmp	r1, #8
 8003698:	f200 8094 	bhi.w	80037c4 <HAL_RCC_GetSysClockFreq+0x150>
 800369c:	2900      	cmp	r1, #0
 800369e:	d002      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x32>
 80036a0:	2904      	cmp	r1, #4
 80036a2:	d003      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x38>
 80036a4:	e08e      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a6:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80036a8:	60bb      	str	r3, [r7, #8]
       break;
 80036aa:	e08e      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ac:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_RCC_GetSysClockFreq+0x168>)
 80036ae:	60bb      	str	r3, [r7, #8]
      break;
 80036b0:	e08b      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b2:	4948      	ldr	r1, [pc, #288]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036b4:	6849      	ldr	r1, [r1, #4]
 80036b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036bc:	4945      	ldr	r1, [pc, #276]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036be:	6849      	ldr	r1, [r1, #4]
 80036c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036c4:	2900      	cmp	r1, #0
 80036c6:	d024      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c8:	4942      	ldr	r1, [pc, #264]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ca:	6849      	ldr	r1, [r1, #4]
 80036cc:	0989      	lsrs	r1, r1, #6
 80036ce:	4608      	mov	r0, r1
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036d8:	f04f 0500 	mov.w	r5, #0
 80036dc:	ea00 0204 	and.w	r2, r0, r4
 80036e0:	ea01 0305 	and.w	r3, r1, r5
 80036e4:	493d      	ldr	r1, [pc, #244]	; (80037dc <HAL_RCC_GetSysClockFreq+0x168>)
 80036e6:	fb01 f003 	mul.w	r0, r1, r3
 80036ea:	2100      	movs	r1, #0
 80036ec:	fb01 f102 	mul.w	r1, r1, r2
 80036f0:	1844      	adds	r4, r0, r1
 80036f2:	493a      	ldr	r1, [pc, #232]	; (80037dc <HAL_RCC_GetSysClockFreq+0x168>)
 80036f4:	fba2 0101 	umull	r0, r1, r2, r1
 80036f8:	1863      	adds	r3, r4, r1
 80036fa:	4619      	mov	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	f7fc fdbc 	bl	8000280 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e04a      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	ea02 0400 	and.w	r4, r2, r0
 800372a:	ea03 0501 	and.w	r5, r3, r1
 800372e:	4620      	mov	r0, r4
 8003730:	4629      	mov	r1, r5
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	014b      	lsls	r3, r1, #5
 800373c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003740:	0142      	lsls	r2, r0, #5
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	1b00      	subs	r0, r0, r4
 8003748:	eb61 0105 	sbc.w	r1, r1, r5
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	018b      	lsls	r3, r1, #6
 8003756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800375a:	0182      	lsls	r2, r0, #6
 800375c:	1a12      	subs	r2, r2, r0
 800375e:	eb63 0301 	sbc.w	r3, r3, r1
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	00d9      	lsls	r1, r3, #3
 800376c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003770:	00d0      	lsls	r0, r2, #3
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	1912      	adds	r2, r2, r4
 8003778:	eb45 0303 	adc.w	r3, r5, r3
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	0299      	lsls	r1, r3, #10
 8003786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800378a:	0290      	lsls	r0, r2, #10
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	461a      	mov	r2, r3
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	f7fc fd70 	bl	8000280 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4613      	mov	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	60bb      	str	r3, [r7, #8]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80037c6:	60bb      	str	r3, [r7, #8]
      break;
 80037c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ca:	68bb      	ldr	r3, [r7, #8]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	017d7840 	.word	0x017d7840

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000008 	.word	0x20000008

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	0800e388 	.word	0x0800e388

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff ffdc 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	0800e388 	.word	0x0800e388

08003848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	220f      	movs	r2, #15
 8003856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0203 	and.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <HAL_RCC_GetClockConfig+0x60>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d035      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038d4:	4b62      	ldr	r3, [pc, #392]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038da:	f7fe f825 	bl	8001928 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038e2:	f7fe f821 	bl	8001928 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b0      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f4:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	019a      	lsls	r2, r3, #6
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	071b      	lsls	r3, r3, #28
 800390c:	4955      	ldr	r1, [pc, #340]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003914:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800391a:	f7fe f805 	bl	8001928 <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003922:	f7fe f801 	bl	8001928 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e090      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8083 	beq.w	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a43      	ldr	r2, [pc, #268]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3e      	ldr	r2, [pc, #248]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003976:	f7fd ffd7 	bl	8001928 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7fd ffd3 	bl	8001928 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e062      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003990:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d028      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ba:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d114      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fd ffa1 	bl	8001928 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fd ff9d 	bl	8001928 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e02a      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ee      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a18:	d10d      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2e:	490d      	ldr	r1, [pc, #52]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
 8003a34:	e005      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a40:	6093      	str	r3, [r2, #8]
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4e:	4905      	ldr	r1, [pc, #20]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	42470068 	.word	0x42470068
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	42470e40 	.word	0x42470e40

08003a70 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a76:	f7fd ff57 	bl	8001928 <HAL_GetTick>
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fd ff4d 	bl	8001928 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0a7      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003aa8:	4b52      	ldr	r3, [pc, #328]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a51      	ldr	r2, [pc, #324]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd ff38 	bl	8001928 <HAL_GetTick>
 8003ab8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003aba:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fd ff31 	bl	8001928 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e089      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ae4:	f7fd ff20 	bl	8001928 <HAL_GetTick>
 8003ae8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003aea:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a41      	ldr	r2, [pc, #260]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003af0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003af4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd ff16 	bl	8001928 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e070      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b16:	f7fd ff07 	bl	8001928 <HAL_GetTick>
 8003b1a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b26:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fd fefd 	bl	8001928 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e057      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fd feee 	bl	8001928 <HAL_GetTick>
 8003b4c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b5c:	f7fd fee4 	bl	8001928 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03e      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b6e:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_RCC_DeInit+0x188>)
 8003b7e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b82:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <HAL_RCC_DeInit+0x18c>)
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b92:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003b94:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003ba6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003baa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bb6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <HAL_RCC_DeInit+0x184>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bce:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_DeInit+0x190>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <HAL_RCC_DeInit+0x194>)
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_DeInit+0x198>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fd18 	bl	8001610 <HAL_InitTick>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	04003010 	.word	0x04003010
 8003bfc:	20003000 	.word	0x20003000
 8003c00:	20000008 	.word	0x20000008
 8003c04:	00f42400 	.word	0x00f42400
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e066      	b.n	8003cf0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7f5b      	ldrb	r3, [r3, #29]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fb7a 	bl	800132c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	22ca      	movs	r2, #202	; 0xca
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2253      	movs	r2, #83	; 0x53
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f87a 	bl	8003d48 <RTC_EnterInitMode>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d12c      	bne.n	8003cb8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c70:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68d2      	ldr	r2, [r2, #12]
 8003c98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6919      	ldr	r1, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f881 	bl	8003db6 <RTC_ExitInitMode>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	22ff      	movs	r2, #255	; 0xff
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d12:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d14:	f7fd fe08 	bl	8001928 <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d1a:	e009      	b.n	8003d30 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d1c:	f7fd fe04 	bl	8001928 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d2a:	d901      	bls.n	8003d30 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e007      	b.n	8003d40 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ee      	beq.n	8003d1c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d122      	bne.n	8003dac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d76:	f7fd fdd7 	bl	8001928 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d7c:	e00c      	b.n	8003d98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d7e:	f7fd fdd3 	bl	8001928 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8c:	d904      	bls.n	8003d98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <RTC_EnterInitMode+0x64>
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d1e8      	bne.n	8003d7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff89 	bl	8003cf8 <HAL_RTC_WaitForSynchro>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2204      	movs	r2, #4
 8003df0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07b      	b.n	8003f0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d009      	beq.n	8003e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	e005      	b.n	8003e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fa94 	bl	8001380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	ea42 0103 	orr.w	r1, r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0104 	and.w	r1, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0210 	and.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e01a      	b.n	8003f5a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd fa67 	bl	8001410 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b088      	sub	sp, #32
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_SPI_Transmit+0x22>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e126      	b.n	80041d2 <HAL_SPI_Transmit+0x270>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8c:	f7fd fccc 	bl	8001928 <HAL_GetTick>
 8003f90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa6:	e10b      	b.n	80041c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0x52>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb8:	e102      	b.n	80041c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	d10f      	bne.n	8004022 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d007      	beq.n	8004040 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	d14b      	bne.n	80040e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_Transmit+0xf6>
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d13e      	bne.n	80040d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800407c:	e02b      	b.n	80040d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d112      	bne.n	80040b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	881a      	ldrh	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80040b0:	e011      	b.n	80040d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b2:	f7fd fc39 	bl	8001928 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d803      	bhi.n	80040ca <HAL_SPI_Transmit+0x168>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_Transmit+0x16e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040d4:	e074      	b.n	80041c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ce      	bne.n	800407e <HAL_SPI_Transmit+0x11c>
 80040e0:	e04c      	b.n	800417c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Transmit+0x18e>
 80040ea:	8afb      	ldrh	r3, [r7, #22]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d140      	bne.n	8004172 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004116:	e02c      	b.n	8004172 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d113      	bne.n	800414e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
 800414c:	e011      	b.n	8004172 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414e:	f7fd fbeb 	bl	8001928 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d803      	bhi.n	8004166 <HAL_SPI_Transmit+0x204>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d102      	bne.n	800416c <HAL_SPI_Transmit+0x20a>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004170:	e026      	b.n	80041c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1cd      	bne.n	8004118 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fbcb 	bl	800491c <SPI_EndRxTxTransaction>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e000      	b.n	80041c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b088      	sub	sp, #32
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f6:	d112      	bne.n	800421e <HAL_SPI_Receive+0x44>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2204      	movs	r2, #4
 8004204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f8f1 	bl	80043fc <HAL_SPI_TransmitReceive>
 800421a:	4603      	mov	r3, r0
 800421c:	e0ea      	b.n	80043f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_SPI_Receive+0x52>
 8004228:	2302      	movs	r3, #2
 800422a:	e0e3      	b.n	80043f4 <HAL_SPI_Receive+0x21a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004234:	f7fd fb78 	bl	8001928 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d002      	beq.n	800424c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004246:	2302      	movs	r3, #2
 8004248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800424a:	e0ca      	b.n	80043e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <HAL_SPI_Receive+0x7e>
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800425c:	e0c1      	b.n	80043e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2204      	movs	r2, #4
 8004262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	d10f      	bne.n	80042c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d007      	beq.n	80042e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d162      	bne.n	80043b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042ec:	e02e      	b.n	800434c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d115      	bne.n	8004328 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f103 020c 	add.w	r2, r3, #12
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004326:	e011      	b.n	800434c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004328:	f7fd fafe 	bl	8001928 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d803      	bhi.n	8004340 <HAL_SPI_Receive+0x166>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d102      	bne.n	8004346 <HAL_SPI_Receive+0x16c>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	75fb      	strb	r3, [r7, #23]
          goto error;
 800434a:	e04a      	b.n	80043e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cb      	bne.n	80042ee <HAL_SPI_Receive+0x114>
 8004356:	e031      	b.n	80043bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d113      	bne.n	800438e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	b292      	uxth	r2, r2
 8004372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800438c:	e011      	b.n	80043b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438e:	f7fd facb 	bl	8001928 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d803      	bhi.n	80043a6 <HAL_SPI_Receive+0x1cc>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d102      	bne.n	80043ac <HAL_SPI_Receive+0x1d2>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043b0:	e017      	b.n	80043e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1cd      	bne.n	8004358 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa45 	bl	8004850 <SPI_EndRxTransaction>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
 80043de:	e000      	b.n	80043e2 <HAL_SPI_Receive+0x208>
  }

error :
 80043e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26>
 800441e:	2302      	movs	r3, #2
 8004420:	e18a      	b.n	8004738 <HAL_SPI_TransmitReceive+0x33c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442a:	f7fd fa7d 	bl	8001928 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00f      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004452:	d107      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800446a:	e15b      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004484:	e14e      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b04      	cmp	r3, #4
 8004490:	d003      	beq.n	800449a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2205      	movs	r2, #5
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	887a      	ldrh	r2, [r7, #2]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d007      	beq.n	80044ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d178      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x10a>
 8004500:	8b7b      	ldrh	r3, [r7, #26]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d166      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	e053      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d11b      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d113      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	1c9a      	adds	r2, r3, #2
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d119      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	b292      	uxth	r2, r2
 8004596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b4:	f7fd f9b8 	bl	8001928 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d807      	bhi.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d003      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045d2:	e0a7      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1a6      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1a1      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045e8:	e07c      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x1fc>
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d16b      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461e:	e057      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d11c      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d114      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d119      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x2ae>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046aa:	f7fd f93d 	bl	8001928 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d803      	bhi.n	80046c2 <HAL_SPI_TransmitReceive+0x2c6>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d102      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2cc>
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ce:	e029      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1a2      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x224>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d19d      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f917 	bl	800491c <SPI_EndRxTxTransaction>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004700:	e010      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	e000      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004738:	4618      	mov	r0, r3
 800473a:	3730      	adds	r7, #48	; 0x30
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004750:	f7fd f8ea 	bl	8001928 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	4413      	add	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004760:	f7fd f8e2 	bl	8001928 <HAL_GetTick>
 8004764:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	015b      	lsls	r3, r3, #5
 800476c:	0d1b      	lsrs	r3, r3, #20
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	fb02 f303 	mul.w	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004776:	e054      	b.n	8004822 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d050      	beq.n	8004822 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004780:	f7fd f8d2 	bl	8001928 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	429a      	cmp	r2, r3
 800478e:	d902      	bls.n	8004796 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d13d      	bne.n	8004812 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ae:	d111      	bne.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b8:	d004      	beq.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d107      	bne.n	80047d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047dc:	d10f      	bne.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e017      	b.n	8004842 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	3b01      	subs	r3, #1
 8004820:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	429a      	cmp	r2, r3
 800483e:	d19b      	bne.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000008 	.word	0x20000008

08004850 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004864:	d111      	bne.n	800488a <SPI_EndRxTransaction+0x3a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486e:	d004      	beq.n	800487a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004878:	d107      	bne.n	800488a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004892:	d12a      	bne.n	80048ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d012      	beq.n	80048c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff ff49 	bl	8004740 <SPI_WaitFlagStateUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02d      	beq.n	8004910 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e026      	b.n	8004912 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2101      	movs	r1, #1
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff ff36 	bl	8004740 <SPI_WaitFlagStateUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01a      	beq.n	8004910 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e013      	b.n	8004912 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2101      	movs	r1, #1
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff ff23 	bl	8004740 <SPI_WaitFlagStateUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e000      	b.n	8004912 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <SPI_EndRxTxTransaction+0x7c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <SPI_EndRxTxTransaction+0x80>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0d5b      	lsrs	r3, r3, #21
 8004934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d112      	bne.n	800496e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fef4 	bl	8004740 <SPI_WaitFlagStateUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e00f      	b.n	800498e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3b01      	subs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d0f2      	beq.n	800496e <SPI_EndRxTxTransaction+0x52>
 8004988:	e000      	b.n	800498c <SPI_EndRxTxTransaction+0x70>
        break;
 800498a:	bf00      	nop
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000008 	.word	0x20000008
 800499c:	165e9f81 	.word	0x165e9f81

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e041      	b.n	8004a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f839 	bl	8004a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 f9d8 	bl	8004d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04e      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d01d      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d010      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	e007      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40001800 	.word	0x40001800

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8ee 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8e0 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8f1 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8c4 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8b6 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8c7 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f89a 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f88c 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f89d 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f870 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f862 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f873 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc faf8 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f902 	bl	8004ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f838 	bl	8004d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0220 	mvn.w	r2, #32
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8cc 	bl	8004ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a40      	ldr	r2, [pc, #256]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d00f      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a3d      	ldr	r2, [pc, #244]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a3b      	ldr	r2, [pc, #236]	; (8004eb4 <TIM_Base_SetConfig+0x120>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02b      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d027      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d023      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <TIM_Base_SetConfig+0x120>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01b      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d017      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <TIM_Base_SetConfig+0x128>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <TIM_Base_SetConfig+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <TIM_Base_SetConfig+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a25      	ldr	r2, [pc, #148]	; (8004ec8 <TIM_Base_SetConfig+0x134>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a24      	ldr	r2, [pc, #144]	; (8004ecc <TIM_Base_SetConfig+0x138>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <TIM_Base_SetConfig+0x13c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0xf8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800
 8004ec8:	40001800 	.word	0x40001800
 8004ecc:	40001c00 	.word	0x40001c00
 8004ed0:	40002000 	.word	0x40002000

08004ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e03f      	b.n	8004f8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fa92 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2224      	movs	r2, #36	; 0x24
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 ff71 	bl	8005e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e021      	b.n	8004fec <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	; 0x24
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fbe:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fc faf9 	bl	80015b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d165      	bne.n	80050da <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Transmit_DMA+0x26>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e05e      	b.n	80050dc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit_DMA+0x38>
 8005028:	2302      	movs	r3, #2
 800502a:	e057      	b.n	80050dc <HAL_UART_Transmit_DMA+0xe8>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2221      	movs	r2, #33	; 0x21
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <HAL_UART_Transmit_DMA+0xf0>)
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <HAL_UART_Transmit_DMA+0xf4>)
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <HAL_UART_Transmit_DMA+0xf8>)
 800506a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	2200      	movs	r2, #0
 8005072:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3304      	adds	r3, #4
 8005088:	461a      	mov	r2, r3
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f7fc fe9c 	bl	8001dc8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005098:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	617b      	str	r3, [r7, #20]
   return(result);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c2:	627a      	str	r2, [r7, #36]	; 0x24
 80050c4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6a39      	ldr	r1, [r7, #32]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3730      	adds	r7, #48	; 0x30
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	080056c1 	.word	0x080056c1
 80050e8:	0800575b 	.word	0x0800575b
 80050ec:	080058d3 	.word	0x080058d3

080050f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	d11d      	bne.n	8005146 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Receive_DMA+0x26>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e016      	b.n	8005148 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_UART_Receive_DMA+0x38>
 8005124:	2302      	movs	r3, #2
 8005126:	e00f      	b.n	8005148 <HAL_UART_Receive_DMA+0x58>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	461a      	mov	r2, r3
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fc13 	bl	8005968 <UART_Start_Receive_DMA>
 8005142:	4603      	mov	r3, r0
 8005144:	e000      	b.n	8005148 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b0ba      	sub	sp, #232	; 0xe8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800518e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_UART_IRQHandler+0x66>
 80051a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fd7f 	bl	8005cb2 <UART_Receive_IT>
      return;
 80051b4:	e256      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80de 	beq.w	800537c <HAL_UART_IRQHandler+0x22c>
 80051c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80d1 	beq.w	800537c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_UART_IRQHandler+0xae>
 80051e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_UART_IRQHandler+0xd2>
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_UART_IRQHandler+0xf6>
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <HAL_UART_IRQHandler+0x126>
 8005252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0208 	orr.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 81ed 	beq.w	800565a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_UART_IRQHandler+0x14e>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fd0a 	bl	8005cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <HAL_UART_IRQHandler+0x17a>
 80052c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d04f      	beq.n	800536a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fc12 	bl	8005af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d141      	bne.n	8005362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800530a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800530e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1d9      	bne.n	80052de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d013      	beq.n	800535a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	4a7d      	ldr	r2, [pc, #500]	; (800552c <HAL_UART_IRQHandler+0x3dc>)
 8005338:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fe0a 	bl	8001f58 <HAL_DMA_Abort_IT>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d016      	beq.n	8005378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005358:	e00e      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f99a 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e00a      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f996 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e006      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f992 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005376:	e170      	b.n	800565a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	bf00      	nop
    return;
 800537a:	e16e      	b.n	800565a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	f040 814a 	bne.w	800561a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8143 	beq.w	800561a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 813c 	beq.w	800561a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	f040 80b4 	bne.w	8005530 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8140 	beq.w	800565e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053e6:	429a      	cmp	r2, r3
 80053e8:	f080 8139 	bcs.w	800565e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	f000 8088 	beq.w	8005512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800542e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800543a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800545e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800547a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e1      	bne.n	800544e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800549a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e3      	bne.n	800548a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80054f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e3      	bne.n	80054d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc fcb3 	bl	8001e78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551a:	b29b      	uxth	r3, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8c0 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005528:	e099      	b.n	800565e <HAL_UART_IRQHandler+0x50e>
 800552a:	bf00      	nop
 800552c:	08005bbb 	.word	0x08005bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005538:	b29b      	uxth	r3, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 808b 	beq.w	8005662 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800554c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8086 	beq.w	8005662 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800557a:	647a      	str	r2, [r7, #68]	; 0x44
 800557c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e3      	bne.n	8005556 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	623b      	str	r3, [r7, #32]
   return(result);
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055b2:	633a      	str	r2, [r7, #48]	; 0x30
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	617b      	str	r3, [r7, #20]
   return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800560c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f848 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005618:	e023      	b.n	8005662 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x4ea>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fad5 	bl	8005be2 <UART_Transmit_IT>
    return;
 8005638:	e014      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <HAL_UART_IRQHandler+0x514>
 8005646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb15 	bl	8005c82 <UART_EndTransmit_IT>
    return;
 8005658:	e004      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
    return;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
      return;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
      return;
 8005662:	bf00      	nop
  }
}
 8005664:	37e8      	adds	r7, #232	; 0xe8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop

0800566c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d137      	bne.n	800574c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	2200      	movs	r2, #0
 80056e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	623b      	str	r3, [r7, #32]
   return(result);
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3314      	adds	r3, #20
 8005700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005702:	633a      	str	r2, [r7, #48]	; 0x30
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e5      	bne.n	80056e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	60fb      	str	r3, [r7, #12]
   return(result);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
 800572e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005736:	61fa      	str	r2, [r7, #28]
 8005738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	617b      	str	r3, [r7, #20]
   return(result);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e5      	bne.n	8005716 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800574a:	e002      	b.n	8005752 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800574c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800574e:	f7fa ff5d 	bl	800060c <HAL_UART_TxCpltCallback>
}
 8005752:	bf00      	nop
 8005754:	3740      	adds	r7, #64	; 0x40
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff7f 	bl	800566c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d172      	bne.n	8005878 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	2200      	movs	r2, #0
 8005796:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e5      	bne.n	8005798 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	667b      	str	r3, [r7, #100]	; 0x64
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057ec:	647a      	str	r2, [r7, #68]	; 0x44
 80057ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	623b      	str	r3, [r7, #32]
   return(result);
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005816:	663b      	str	r3, [r7, #96]	; 0x60
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005820:	633a      	str	r2, [r7, #48]	; 0x30
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d119      	bne.n	8005878 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	60fb      	str	r3, [r7, #12]
   return(result);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0310 	bic.w	r3, r3, #16
 800585a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005864:	61fa      	str	r2, [r7, #28]
 8005866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	69b9      	ldr	r1, [r7, #24]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	617b      	str	r3, [r7, #20]
   return(result);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e5      	bne.n	8005844 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	2b01      	cmp	r3, #1
 800587e:	d106      	bne.n	800588e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005884:	4619      	mov	r1, r3
 8005886:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005888:	f7ff ff0e 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800588c:	e002      	b.n	8005894 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800588e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005890:	f7fa fed2 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8005894:	bf00      	nop
 8005896:	3770      	adds	r7, #112	; 0x70
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d108      	bne.n	80058c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fef3 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058c2:	e002      	b.n	80058ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fedb 	bl	8005680 <HAL_UART_RxHalfCpltCallback>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b21      	cmp	r3, #33	; 0x21
 8005904:	d108      	bne.n	8005918 <UART_DMAError+0x46>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f000 f8c6 	bl	8005aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b22      	cmp	r3, #34	; 0x22
 8005938:	d108      	bne.n	800594c <UART_DMAError+0x7a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005946:	68b8      	ldr	r0, [r7, #8]
 8005948:	f000 f8d4 	bl	8005af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0210 	orr.w	r2, r3, #16
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005958:	68b8      	ldr	r0, [r7, #8]
 800595a:	f7ff fe9b 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b098      	sub	sp, #96	; 0x60
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2222      	movs	r2, #34	; 0x22
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	4a40      	ldr	r2, [pc, #256]	; (8005a98 <UART_Start_Receive_DMA+0x130>)
 8005996:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <UART_Start_Receive_DMA+0x134>)
 800599e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4a3e      	ldr	r2, [pc, #248]	; (8005aa0 <UART_Start_Receive_DMA+0x138>)
 80059a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	2200      	movs	r2, #0
 80059ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059b0:	f107 0308 	add.w	r3, r7, #8
 80059b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	f7fc f9fe 	bl	8001dc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d019      	beq.n	8005a26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e5      	bne.n	80059f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a46:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a70:	653b      	str	r3, [r7, #80]	; 0x50
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3314      	adds	r3, #20
 8005a78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6a39      	ldr	r1, [r7, #32]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3760      	adds	r7, #96	; 0x60
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08005777 	.word	0x08005777
 8005a9c:	0800589d 	.word	0x0800589d
 8005aa0:	080058d3 	.word	0x080058d3

08005aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	61ba      	str	r2, [r7, #24]
 8005ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6979      	ldr	r1, [r7, #20]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ae8:	bf00      	nop
 8005aea:	3724      	adds	r7, #36	; 0x24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b095      	sub	sp, #84	; 0x54
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d119      	bne.n	8005ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0310 	bic.w	r3, r3, #16
 8005b82:	647b      	str	r3, [r7, #68]	; 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8c:	61ba      	str	r2, [r7, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bae:	bf00      	nop
 8005bb0:	3754      	adds	r7, #84	; 0x54
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fd5d 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b21      	cmp	r3, #33	; 0x21
 8005bf4:	d13e      	bne.n	8005c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d114      	bne.n	8005c2a <UART_Transmit_IT+0x48>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]
 8005c28:	e008      	b.n	8005c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6211      	str	r1, [r2, #32]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10f      	bne.n	8005c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e000      	b.n	8005c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fa fcb2 	bl	800060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08c      	sub	sp, #48	; 0x30
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	f040 80ab 	bne.w	8005e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd0:	d117      	bne.n	8005d02 <UART_Receive_IT+0x50>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d113      	bne.n	8005d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005d00:	e026      	b.n	8005d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d007      	beq.n	8005d26 <UART_Receive_IT+0x74>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <UART_Receive_IT+0x82>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e008      	b.n	8005d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d15a      	bne.n	8005e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0220 	bic.w	r2, r2, #32
 8005d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d135      	bne.n	8005e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	623a      	str	r2, [r7, #32]
 8005dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d10a      	bne.n	8005e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fc4d 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
 8005e0e:	e002      	b.n	8005e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fa fc11 	bl	8000638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e002      	b.n	8005e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3730      	adds	r7, #48	; 0x30
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	b09f      	sub	sp, #124	; 0x7c
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3e:	68d9      	ldr	r1, [r3, #12]
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	ea40 0301 	orr.w	r3, r0, r1
 8005e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e6c:	f021 010c 	bic.w	r1, r1, #12
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e76:	430b      	orrs	r3, r1
 8005e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	6999      	ldr	r1, [r3, #24]
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	ea40 0301 	orr.w	r3, r0, r1
 8005e90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4bc5      	ldr	r3, [pc, #788]	; (80061ac <UART_SetConfig+0x384>)
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d004      	beq.n	8005ea6 <UART_SetConfig+0x7e>
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4bc3      	ldr	r3, [pc, #780]	; (80061b0 <UART_SetConfig+0x388>)
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d103      	bne.n	8005eae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ea6:	f7fd fcbb 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8005eaa:	6778      	str	r0, [r7, #116]	; 0x74
 8005eac:	e002      	b.n	8005eb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eae:	f7fd fca3 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8005eb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	f040 80b6 	bne.w	800602c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec2:	461c      	mov	r4, r3
 8005ec4:	f04f 0500 	mov.w	r5, #0
 8005ec8:	4622      	mov	r2, r4
 8005eca:	462b      	mov	r3, r5
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	6439      	str	r1, [r7, #64]	; 0x40
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ed8:	1912      	adds	r2, r2, r4
 8005eda:	eb45 0303 	adc.w	r3, r5, r3
 8005ede:	f04f 0000 	mov.w	r0, #0
 8005ee2:	f04f 0100 	mov.w	r1, #0
 8005ee6:	00d9      	lsls	r1, r3, #3
 8005ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eec:	00d0      	lsls	r0, r2, #3
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	1911      	adds	r1, r2, r4
 8005ef4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ef6:	416b      	adcs	r3, r5
 8005ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	1891      	adds	r1, r2, r2
 8005f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f08:	415b      	adcs	r3, r3
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f14:	f7fa f9b4 	bl	8000280 <__aeabi_uldivmod>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4ba5      	ldr	r3, [pc, #660]	; (80061b4 <UART_SetConfig+0x38c>)
 8005f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	011e      	lsls	r6, r3, #4
 8005f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f28:	461c      	mov	r4, r3
 8005f2a:	f04f 0500 	mov.w	r5, #0
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	6339      	str	r1, [r7, #48]	; 0x30
 8005f36:	415b      	adcs	r3, r3
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f3e:	1912      	adds	r2, r2, r4
 8005f40:	eb45 0303 	adc.w	r3, r5, r3
 8005f44:	f04f 0000 	mov.w	r0, #0
 8005f48:	f04f 0100 	mov.w	r1, #0
 8005f4c:	00d9      	lsls	r1, r3, #3
 8005f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f52:	00d0      	lsls	r0, r2, #3
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	1911      	adds	r1, r2, r4
 8005f5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f5c:	416b      	adcs	r3, r5
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f7a:	f7fa f981 	bl	8000280 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4b8c      	ldr	r3, [pc, #560]	; (80061b4 <UART_SetConfig+0x38c>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2164      	movs	r1, #100	; 0x64
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a87      	ldr	r2, [pc, #540]	; (80061b4 <UART_SetConfig+0x38c>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fa4:	441e      	add	r6, r3
 8005fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	1894      	adds	r4, r2, r2
 8005fb4:	623c      	str	r4, [r7, #32]
 8005fb6:	415b      	adcs	r3, r3
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fbe:	1812      	adds	r2, r2, r0
 8005fc0:	eb41 0303 	adc.w	r3, r1, r3
 8005fc4:	f04f 0400 	mov.w	r4, #0
 8005fc8:	f04f 0500 	mov.w	r5, #0
 8005fcc:	00dd      	lsls	r5, r3, #3
 8005fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fd2:	00d4      	lsls	r4, r2, #3
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	1814      	adds	r4, r2, r0
 8005fda:	653c      	str	r4, [r7, #80]	; 0x50
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	1891      	adds	r1, r2, r2
 8005fec:	61b9      	str	r1, [r7, #24]
 8005fee:	415b      	adcs	r3, r3
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ffa:	f7fa f941 	bl	8000280 <__aeabi_uldivmod>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4b6c      	ldr	r3, [pc, #432]	; (80061b4 <UART_SetConfig+0x38c>)
 8006004:	fba3 1302 	umull	r1, r3, r3, r2
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	2164      	movs	r1, #100	; 0x64
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	3332      	adds	r3, #50	; 0x32
 8006016:	4a67      	ldr	r2, [pc, #412]	; (80061b4 <UART_SetConfig+0x38c>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f003 0207 	and.w	r2, r3, #7
 8006022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4432      	add	r2, r6
 8006028:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800602a:	e0b9      	b.n	80061a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800602c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602e:	461c      	mov	r4, r3
 8006030:	f04f 0500 	mov.w	r5, #0
 8006034:	4622      	mov	r2, r4
 8006036:	462b      	mov	r3, r5
 8006038:	1891      	adds	r1, r2, r2
 800603a:	6139      	str	r1, [r7, #16]
 800603c:	415b      	adcs	r3, r3
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006044:	1912      	adds	r2, r2, r4
 8006046:	eb45 0303 	adc.w	r3, r5, r3
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	00d9      	lsls	r1, r3, #3
 8006054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006058:	00d0      	lsls	r0, r2, #3
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	eb12 0804 	adds.w	r8, r2, r4
 8006062:	eb43 0905 	adc.w	r9, r3, r5
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4618      	mov	r0, r3
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	008b      	lsls	r3, r1, #2
 800607a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800607e:	0082      	lsls	r2, r0, #2
 8006080:	4640      	mov	r0, r8
 8006082:	4649      	mov	r1, r9
 8006084:	f7fa f8fc 	bl	8000280 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4b49      	ldr	r3, [pc, #292]	; (80061b4 <UART_SetConfig+0x38c>)
 800608e:	fba3 2302 	umull	r2, r3, r3, r2
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	011e      	lsls	r6, r3, #4
 8006096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006098:	4618      	mov	r0, r3
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	1894      	adds	r4, r2, r2
 80060a4:	60bc      	str	r4, [r7, #8]
 80060a6:	415b      	adcs	r3, r3
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ae:	1812      	adds	r2, r2, r0
 80060b0:	eb41 0303 	adc.w	r3, r1, r3
 80060b4:	f04f 0400 	mov.w	r4, #0
 80060b8:	f04f 0500 	mov.w	r5, #0
 80060bc:	00dd      	lsls	r5, r3, #3
 80060be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c2:	00d4      	lsls	r4, r2, #3
 80060c4:	4622      	mov	r2, r4
 80060c6:	462b      	mov	r3, r5
 80060c8:	1814      	adds	r4, r2, r0
 80060ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80060cc:	414b      	adcs	r3, r1
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f04f 0100 	mov.w	r1, #0
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	008b      	lsls	r3, r1, #2
 80060e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060e8:	0082      	lsls	r2, r0, #2
 80060ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060ee:	f7fa f8c7 	bl	8000280 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <UART_SetConfig+0x38c>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <UART_SetConfig+0x38c>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006116:	441e      	add	r6, r3
 8006118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800611a:	4618      	mov	r0, r3
 800611c:	f04f 0100 	mov.w	r1, #0
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	1894      	adds	r4, r2, r2
 8006126:	603c      	str	r4, [r7, #0]
 8006128:	415b      	adcs	r3, r3
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006130:	1812      	adds	r2, r2, r0
 8006132:	eb41 0303 	adc.w	r3, r1, r3
 8006136:	f04f 0400 	mov.w	r4, #0
 800613a:	f04f 0500 	mov.w	r5, #0
 800613e:	00dd      	lsls	r5, r3, #3
 8006140:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006144:	00d4      	lsls	r4, r2, #3
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	eb12 0a00 	adds.w	sl, r2, r0
 800614e:	eb43 0b01 	adc.w	fp, r3, r1
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f04f 0100 	mov.w	r1, #0
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	008b      	lsls	r3, r1, #2
 8006166:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800616a:	0082      	lsls	r2, r0, #2
 800616c:	4650      	mov	r0, sl
 800616e:	4659      	mov	r1, fp
 8006170:	f7fa f886 	bl	8000280 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <UART_SetConfig+0x38c>)
 800617a:	fba3 1302 	umull	r1, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	2164      	movs	r1, #100	; 0x64
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	3332      	adds	r3, #50	; 0x32
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <UART_SetConfig+0x38c>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	f003 020f 	and.w	r2, r3, #15
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4432      	add	r2, r6
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	377c      	adds	r7, #124	; 0x7c
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	bf00      	nop
 80061ac:	40011000 	.word	0x40011000
 80061b0:	40011400 	.word	0x40011400
 80061b4:	51eb851f 	.word	0x51eb851f

080061b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ca:	2b84      	cmp	r3, #132	; 0x84
 80061cc:	d005      	beq.n	80061da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	3303      	adds	r3, #3
 80061d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ee:	f3ef 8305 	mrs	r3, IPSR
 80061f2:	607b      	str	r3, [r7, #4]
  return(result);
 80061f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006210:	f001 ffb0 	bl	8008174 <vTaskStartScheduler>
  
  return osOK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	bd80      	pop	{r7, pc}

0800621a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800621a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621c:	b089      	sub	sp, #36	; 0x24
 800621e:	af04      	add	r7, sp, #16
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <osThreadCreate+0x54>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01c      	beq.n	800626e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685c      	ldr	r4, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681d      	ldr	r5, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691e      	ldr	r6, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ffb6 	bl	80061b8 <makeFreeRtosPriority>
 800624c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	9100      	str	r1, [sp, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	4632      	mov	r2, r6
 8006260:	4629      	mov	r1, r5
 8006262:	4620      	mov	r0, r4
 8006264:	f001 fc14 	bl	8007a90 <xTaskCreateStatic>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	e01c      	b.n	80062a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685c      	ldr	r4, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627a:	b29e      	uxth	r6, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff ff98 	bl	80061b8 <makeFreeRtosPriority>
 8006288:	4602      	mov	r2, r0
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	9200      	str	r2, [sp, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	4632      	mov	r2, r6
 8006296:	4629      	mov	r1, r5
 8006298:	4620      	mov	r0, r4
 800629a:	f001 fc56 	bl	8007b4a <xTaskCreate>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <osDelay+0x16>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e000      	b.n	80062ca <osDelay+0x18>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 fd8a 	bl	8007de4 <vTaskDelay>
  
  return osOK;
 80062d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	460b      	mov	r3, r1
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80062f2:	7afb      	ldrb	r3, [r7, #11]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <osTimerCreate+0x20>
 80062f8:	2101      	movs	r1, #1
 80062fa:	e000      	b.n	80062fe <osTimerCreate+0x22>
 80062fc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006306:	9201      	str	r2, [sp, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	460a      	mov	r2, r1
 800630e:	2101      	movs	r1, #1
 8006310:	480b      	ldr	r0, [pc, #44]	; (8006340 <osTimerCreate+0x64>)
 8006312:	f002 fe0e 	bl	8008f32 <xTimerCreateStatic>
 8006316:	4603      	mov	r3, r0
 8006318:	e00e      	b.n	8006338 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <osTimerCreate+0x48>
 8006320:	2201      	movs	r2, #1
 8006322:	e000      	b.n	8006326 <osTimerCreate+0x4a>
 8006324:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2101      	movs	r1, #1
 8006330:	4803      	ldr	r0, [pc, #12]	; (8006340 <osTimerCreate+0x64>)
 8006332:	f002 fddd 	bl	8008ef0 <xTimerCreate>
 8006336:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	0800e144 	.word	0x0800e144

08006344 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <osTimerStart+0x20>
    ticks = 1;
 8006360:	2301      	movs	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006364:	f7ff ff40 	bl	80061e8 <inHandlerMode>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01a      	beq.n	80063a4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	2200      	movs	r2, #0
 8006374:	9200      	str	r2, [sp, #0]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	2109      	movs	r1, #9
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 fe52 	bl	8009024 <xTimerGenericCommand>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d002      	beq.n	800638c <osTimerStart+0x48>
    {
      result = osErrorOS;
 8006386:	23ff      	movs	r3, #255	; 0xff
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e018      	b.n	80063be <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d015      	beq.n	80063be <osTimerStart+0x7a>
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <osTimerStart+0x84>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	e00c      	b.n	80063be <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80063a4:	2300      	movs	r3, #0
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	2104      	movs	r1, #4
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fe38 	bl	8009024 <xTimerGenericCommand>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d001      	beq.n	80063be <osTimerStart+0x7a>
      result = osErrorOS;
 80063ba:	23ff      	movs	r3, #255	; 0xff
 80063bc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80063dc:	f7ff ff04 	bl	80061e8 <inHandlerMode>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80063e6:	f107 0308 	add.w	r3, r7, #8
 80063ea:	2200      	movs	r2, #0
 80063ec:	9200      	str	r2, [sp, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	2108      	movs	r1, #8
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 fe16 	bl	8009024 <xTimerGenericCommand>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <osTimerStop+0x36>
      return osErrorOS;
 80063fe:	23ff      	movs	r3, #255	; 0xff
 8006400:	e019      	b.n	8006436 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <osTimerStop+0x68>
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <osTimerStop+0x74>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	e00c      	b.n	8006434 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800641a:	2300      	movs	r3, #0
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	2200      	movs	r2, #0
 8006422:	2103      	movs	r1, #3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 fdfd 	bl	8009024 <xTimerGenericCommand>
 800642a:	4603      	mov	r3, r0
 800642c:	2b01      	cmp	r3, #1
 800642e:	d001      	beq.n	8006434 <osTimerStop+0x68>
      result = osErrorOS;
 8006430:	23ff      	movs	r3, #255	; 0xff
 8006432:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8006434:	68fb      	ldr	r3, [r7, #12]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4619      	mov	r1, r3
 800645a:	2001      	movs	r0, #1
 800645c:	f000 fc7b 	bl	8006d56 <xQueueCreateMutexStatic>
 8006460:	4603      	mov	r3, r0
 8006462:	e003      	b.n	800646c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006464:	2001      	movs	r0, #1
 8006466:	f000 fc5e 	bl	8006d26 <xQueueCreateMutex>
 800646a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <osMutexWait+0x18>
    return osErrorParameter;
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	e03a      	b.n	8006502 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006496:	d103      	bne.n	80064a0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e009      	b.n	80064b4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <osMutexWait+0x40>
      ticks = 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80064b4:	f7ff fe98 	bl	80061e8 <inHandlerMode>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	461a      	mov	r2, r3
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 f8dc 	bl	8007684 <xQueueReceiveFromISR>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <osMutexWait+0x62>
      return osErrorOS;
 80064d2:	23ff      	movs	r3, #255	; 0xff
 80064d4:	e015      	b.n	8006502 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <osMutexWait+0x8c>
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <osMutexWait+0x98>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	e008      	b.n	8006500 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 ffbb 	bl	800746c <xQueueSemaphoreTake>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <osMutexWait+0x8c>
    return osErrorOS;
 80064fc:	23ff      	movs	r3, #255	; 0xff
 80064fe:	e000      	b.n	8006502 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006520:	f7ff fe62 	bl	80061e8 <inHandlerMode>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fe2e 	bl	8007192 <xQueueGiveFromISR>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <osMutexRelease+0x30>
      return osErrorOS;
 800653c:	23ff      	movs	r3, #255	; 0xff
 800653e:	e017      	b.n	8006570 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <osMutexRelease+0x5e>
 8006546:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <osMutexRelease+0x68>)
 8006548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	e00a      	b.n	800656e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006558:	2300      	movs	r3, #0
 800655a:	2200      	movs	r2, #0
 800655c:	2100      	movs	r1, #0
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fc7e 	bl	8006e60 <xQueueGenericSend>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d001      	beq.n	800656e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800656a:	23ff      	movs	r3, #255	; 0xff
 800656c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800656e:	68fb      	ldr	r3, [r7, #12]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <osSemaphoreCreate+0x40>
    if (count == 1) {
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10a      	bne.n	80065aa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2203      	movs	r2, #3
 800659a:	9200      	str	r2, [sp, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	2100      	movs	r1, #0
 80065a0:	2001      	movs	r0, #1
 80065a2:	f000 fad5 	bl	8006b50 <xQueueGenericCreateStatic>
 80065a6:	4603      	mov	r3, r0
 80065a8:	e023      	b.n	80065f2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80065aa:	6838      	ldr	r0, [r7, #0]
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fbea 	bl	8006d8c <xQueueCreateCountingSemaphoreStatic>
 80065b8:	4603      	mov	r3, r0
 80065ba:	e01a      	b.n	80065f2 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d110      	bne.n	80065e4 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80065c2:	2203      	movs	r2, #3
 80065c4:	2100      	movs	r1, #0
 80065c6:	2001      	movs	r0, #1
 80065c8:	f000 fb3a 	bl	8006c40 <xQueueGenericCreate>
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <osSemaphoreCreate+0x64>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fc40 	bl	8006e60 <xQueueGenericSend>
      return sema;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	e006      	b.n	80065f2 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fc05 	bl	8006dfa <xQueueCreateCountingSemaphore>
 80065f0:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	e03a      	b.n	800668a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d103      	bne.n	8006628 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006620:	f04f 33ff 	mov.w	r3, #4294967295
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e009      	b.n	800663c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d006      	beq.n	800663c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <osSemaphoreWait+0x40>
      ticks = 1;
 8006638:	2301      	movs	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800663c:	f7ff fdd4 	bl	80061e8 <inHandlerMode>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006646:	f107 0308 	add.w	r3, r7, #8
 800664a:	461a      	mov	r2, r3
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 f818 	bl	8007684 <xQueueReceiveFromISR>
 8006654:	4603      	mov	r3, r0
 8006656:	2b01      	cmp	r3, #1
 8006658:	d001      	beq.n	800665e <osSemaphoreWait+0x62>
      return osErrorOS;
 800665a:	23ff      	movs	r3, #255	; 0xff
 800665c:	e015      	b.n	800668a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <osSemaphoreWait+0x8c>
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <osSemaphoreWait+0x98>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	e008      	b.n	8006688 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fef7 	bl	800746c <xQueueSemaphoreTake>
 800667e:	4603      	mov	r3, r0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006684:	23ff      	movs	r3, #255	; 0xff
 8006686:	e000      	b.n	800668a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80066a8:	f7ff fd9e 	bl	80061e8 <inHandlerMode>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fd6a 	bl	8007192 <xQueueGiveFromISR>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d001      	beq.n	80066c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80066c4:	23ff      	movs	r3, #255	; 0xff
 80066c6:	e017      	b.n	80066f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d013      	beq.n	80066f6 <osSemaphoreRelease+0x5e>
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <osSemaphoreRelease+0x68>)
 80066d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	e00a      	b.n	80066f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80066e0:	2300      	movs	r3, #0
 80066e2:	2200      	movs	r2, #0
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fbba 	bl	8006e60 <xQueueGenericSend>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d001      	beq.n	80066f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80066f2:	23ff      	movs	r3, #255	; 0xff
 80066f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80066f6:	68fb      	ldr	r3, [r7, #12]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b085      	sub	sp, #20
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d011      	beq.n	800673a <osMessageCreate+0x36>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2400      	movs	r4, #0
 8006730:	9400      	str	r4, [sp, #0]
 8006732:	f000 fa0d 	bl	8006b50 <xQueueGenericCreateStatic>
 8006736:	4603      	mov	r3, r0
 8006738:	e008      	b.n	800674c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	4619      	mov	r1, r3
 8006746:	f000 fa7b 	bl	8006c40 <xQueueGenericCreate>
 800674a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	bd90      	pop	{r4, r7, pc}

08006754 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <osMessagePut+0x1e>
    ticks = 1;
 800676e:	2301      	movs	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006772:	f7ff fd39 	bl	80061e8 <inHandlerMode>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d018      	beq.n	80067ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800677c:	f107 0210 	add.w	r2, r7, #16
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	2300      	movs	r3, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fc68 	bl	800705c <xQueueGenericSendFromISR>
 800678c:	4603      	mov	r3, r0
 800678e:	2b01      	cmp	r3, #1
 8006790:	d001      	beq.n	8006796 <osMessagePut+0x42>
      return osErrorOS;
 8006792:	23ff      	movs	r3, #255	; 0xff
 8006794:	e018      	b.n	80067c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d014      	beq.n	80067c6 <osMessagePut+0x72>
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <osMessagePut+0x7c>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	e00b      	b.n	80067c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80067ae:	f107 0108 	add.w	r1, r7, #8
 80067b2:	2300      	movs	r3, #0
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fb52 	bl	8006e60 <xQueueGenericSend>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d001      	beq.n	80067c6 <osMessagePut+0x72>
      return osErrorOS;
 80067c2:	23ff      	movs	r3, #255	; 0xff
 80067c4:	e000      	b.n	80067c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b08b      	sub	sp, #44	; 0x2c
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	617b      	str	r3, [r7, #20]
    return event;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	461c      	mov	r4, r3
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006802:	e054      	b.n	80068ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006804:	2300      	movs	r3, #0
 8006806:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d103      	bne.n	800681c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
 800681a:	e009      	b.n	8006830 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <osMessageGet+0x5c>
      ticks = 1;
 800682c:	2301      	movs	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006830:	f7ff fcda 	bl	80061e8 <inHandlerMode>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01c      	beq.n	8006874 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800683a:	f107 0220 	add.w	r2, r7, #32
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f000 ff1c 	bl	8007684 <xQueueReceiveFromISR>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d102      	bne.n	8006858 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006852:	2310      	movs	r3, #16
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e001      	b.n	800685c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01d      	beq.n	800689e <osMessageGet+0xca>
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <osMessageGet+0xe4>)
 8006864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	e014      	b.n	800689e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	3304      	adds	r3, #4
 800687a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687c:	4619      	mov	r1, r3
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f000 fd14 	bl	80072ac <xQueueReceive>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d102      	bne.n	8006890 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800688a:	2310      	movs	r3, #16
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e006      	b.n	800689e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <osMessageGet+0xc6>
 8006896:	2300      	movs	r3, #0
 8006898:	e000      	b.n	800689c <osMessageGet+0xc8>
 800689a:	2340      	movs	r3, #64	; 0x40
 800689c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	461c      	mov	r4, r3
 80068a2:	f107 0314 	add.w	r3, r7, #20
 80068a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	372c      	adds	r7, #44	; 0x2c
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fac1 	bl	8007e4c <vTaskSuspend>
  
  return osOK;
 80068ca:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80068dc:	f7ff fc84 	bl	80061e8 <inHandlerMode>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00e      	beq.n	8006904 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fbd2 	bl	8008090 <xTaskResumeFromISR>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d10b      	bne.n	800690a <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <osThreadResume+0x40>)
 80068f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	e002      	b.n	800690a <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fb65 	bl	8007fd4 <vTaskResume>
  }
  return osOK;
 800690a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	e000ed04 	.word	0xe000ed04

08006918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f103 0208 	add.w	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f04f 32ff 	mov.w	r2, #4294967295
 8006930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f103 0208 	add.w	r2, r3, #8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f103 0208 	add.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
}
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d103      	bne.n	80069da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e00c      	b.n	80069f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3308      	adds	r3, #8
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e002      	b.n	80069e8 <vListInsert+0x2e>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d2f6      	bcs.n	80069e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6892      	ldr	r2, [r2, #8]
 8006a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6852      	ldr	r2, [r2, #4]
 8006a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d103      	bne.n	8006a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1e5a      	subs	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aaa:	f002 fed3 	bl	8009854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	441a      	add	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	3b01      	subs	r3, #1
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	441a      	add	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d114      	bne.n	8006b2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01a      	beq.n	8006b3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3310      	adds	r3, #16
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 fdc5 	bl	800869c <xTaskRemoveFromEventList>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d012      	beq.n	8006b3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <xQueueGenericReset+0xcc>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	e009      	b.n	8006b3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3310      	adds	r3, #16
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff fef2 	bl	8006918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3324      	adds	r3, #36	; 0x24
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff feed 	bl	8006918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b3e:	f002 feb9 	bl	80098b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b42:	2301      	movs	r3, #1
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <xQueueGenericCreateStatic+0x52>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <xQueueGenericCreateStatic+0x56>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueGenericCreateStatic+0x58>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <xQueueGenericCreateStatic+0x7e>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <xQueueGenericCreateStatic+0x82>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <xQueueGenericCreateStatic+0x84>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	61fb      	str	r3, [r7, #28]
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bee:	2348      	movs	r3, #72	; 0x48
 8006bf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b48      	cmp	r3, #72	; 0x48
 8006bf6:	d00a      	beq.n	8006c0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	61bb      	str	r3, [r7, #24]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f83f 	bl	8006cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3730      	adds	r7, #48	; 0x30
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3348      	adds	r3, #72	; 0x48
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f002 ff0d 	bl	8009a98 <pvPortMalloc>
 8006c7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d011      	beq.n	8006caa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	3348      	adds	r3, #72	; 0x48
 8006c8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c98:	79fa      	ldrb	r2, [r7, #7]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f805 	bl	8006cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006caa:	69bb      	ldr	r3, [r7, #24]
	}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	69b8      	ldr	r0, [r7, #24]
 8006ce6:	f7ff fecb 	bl	8006a80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d12:	2300      	movs	r3, #0
 8006d14:	2200      	movs	r2, #0
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8a1 	bl	8006e60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6939      	ldr	r1, [r7, #16]
 8006d3e:	6978      	ldr	r0, [r7, #20]
 8006d40:	f7ff ff7e 	bl	8006c40 <xQueueGenericCreate>
 8006d44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff ffd3 	bl	8006cf2 <prvInitialiseMutex>

		return xNewQueue;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b088      	sub	sp, #32
 8006d5a:	af02      	add	r7, sp, #8
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	6039      	str	r1, [r7, #0]
 8006d60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	6939      	ldr	r1, [r7, #16]
 8006d74:	6978      	ldr	r0, [r7, #20]
 8006d76:	f7ff feeb 	bl	8006b50 <xQueueGenericCreateStatic>
 8006d7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff ffb8 	bl	8006cf2 <prvInitialiseMutex>

		return xNewQueue;
 8006d82:	68fb      	ldr	r3, [r7, #12]
	}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	61bb      	str	r3, [r7, #24]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d90a      	bls.n	8006dd2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	617b      	str	r3, [r7, #20]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff feb7 	bl	8006b50 <xQueueGenericCreateStatic>
 8006de2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006df0:	69fb      	ldr	r3, [r7, #28]
	}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	613b      	str	r3, [r7, #16]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d90a      	bls.n	8006e3e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e3e:	2202      	movs	r2, #2
 8006e40:	2100      	movs	r1, #0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fefc 	bl	8006c40 <xQueueGenericCreate>
 8006e48:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e56:	697b      	ldr	r3, [r7, #20]
	}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	; 0x38
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xQueueGenericSend+0x32>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <xQueueGenericSend+0x40>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <xQueueGenericSend+0x44>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <xQueueGenericSend+0x46>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <xQueueGenericSend+0x60>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d103      	bne.n	8006ece <xQueueGenericSend+0x6e>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <xQueueGenericSend+0x72>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <xQueueGenericSend+0x74>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <xQueueGenericSend+0x8e>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	623b      	str	r3, [r7, #32]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eee:	f001 fd95 	bl	8008a1c <xTaskGetSchedulerState>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <xQueueGenericSend+0x9e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <xQueueGenericSend+0xa2>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueGenericSend+0xa4>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericSend+0xbe>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	61fb      	str	r3, [r7, #28]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f1e:	f002 fc99 	bl	8009854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <xQueueGenericSend+0xd4>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d129      	bne.n	8006f88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3a:	f000 fc3b 	bl	80077b4 <prvCopyDataToQueue>
 8006f3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d010      	beq.n	8006f6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	3324      	adds	r3, #36	; 0x24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fba5 	bl	800869c <xTaskRemoveFromEventList>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d013      	beq.n	8006f80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f58:	4b3f      	ldr	r3, [pc, #252]	; (8007058 <xQueueGenericSend+0x1f8>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	e00a      	b.n	8006f80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <xQueueGenericSend+0x1f8>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f80:	f002 fc98 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e063      	b.n	8007050 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f8e:	f002 fc91 	bl	80098b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e05c      	b.n	8007050 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d106      	bne.n	8006faa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 fbdd 	bl	8008760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006faa:	f002 fc83 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fae:	f001 f951 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fb2:	f002 fc4f 	bl	8009854 <vPortEnterCritical>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fbc:	b25b      	sxtb	r3, r3
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d103      	bne.n	8006fcc <xQueueGenericSend+0x16c>
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd2:	b25b      	sxtb	r3, r3
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSend+0x182>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe2:	f002 fc67 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fe6:	1d3a      	adds	r2, r7, #4
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	4611      	mov	r1, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fbcc 	bl	800878c <xTaskCheckForTimeOut>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d124      	bne.n	8007044 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffc:	f000 fcd2 	bl	80079a4 <prvIsQueueFull>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d018      	beq.n	8007038 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	3310      	adds	r3, #16
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 faf4 	bl	80085fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007016:	f000 fc5d 	bl	80078d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800701a:	f001 f929 	bl	8008270 <xTaskResumeAll>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f47f af7c 	bne.w	8006f1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <xQueueGenericSend+0x1f8>)
 8007028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	e772      	b.n	8006f1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800703a:	f000 fc4b 	bl	80078d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800703e:	f001 f917 	bl	8008270 <xTaskResumeAll>
 8007042:	e76c      	b.n	8006f1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007046:	f000 fc45 	bl	80078d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800704a:	f001 f911 	bl	8008270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800704e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007050:	4618      	mov	r0, r3
 8007052:	3738      	adds	r7, #56	; 0x38
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b090      	sub	sp, #64	; 0x40
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <xQueueGenericSendFromISR+0x3c>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <xQueueGenericSendFromISR+0x40>
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <xQueueGenericSendFromISR+0x42>
 800709c:	2300      	movs	r3, #0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d103      	bne.n	80070c6 <xQueueGenericSendFromISR+0x6a>
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <xQueueGenericSendFromISR+0x6e>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueGenericSendFromISR+0x70>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	623b      	str	r3, [r7, #32]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070e6:	f002 fc97 	bl	8009a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070ea:	f3ef 8211 	mrs	r2, BASEPRI
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	61fa      	str	r2, [r7, #28]
 8007100:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007102:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	429a      	cmp	r2, r3
 8007110:	d302      	bcc.n	8007118 <xQueueGenericSendFromISR+0xbc>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d12f      	bne.n	8007178 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800712e:	f000 fb41 	bl	80077b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007132:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d112      	bne.n	8007162 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	d016      	beq.n	8007172 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	3324      	adds	r3, #36	; 0x24
 8007148:	4618      	mov	r0, r3
 800714a:	f001 faa7 	bl	800869c <xTaskRemoveFromEventList>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00e      	beq.n	8007172 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	e007      	b.n	8007172 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007166:	3301      	adds	r3, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	b25a      	sxtb	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007172:	2301      	movs	r3, #1
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007176:	e001      	b.n	800717c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007186:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800718a:	4618      	mov	r0, r3
 800718c:	3740      	adds	r7, #64	; 0x40
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b08e      	sub	sp, #56	; 0x38
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	623b      	str	r3, [r7, #32]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <xQueueGiveFromISR+0x48>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61fb      	str	r3, [r7, #28]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <xQueueGiveFromISR+0x58>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueGiveFromISR+0x5c>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGiveFromISR+0x5e>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGiveFromISR+0x78>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61bb      	str	r3, [r7, #24]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800720a:	f002 fc05 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 800720e:	f3ef 8211 	mrs	r2, BASEPRI
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	617a      	str	r2, [r7, #20]
 8007224:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007226:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007236:	429a      	cmp	r2, r3
 8007238:	d22b      	bcs.n	8007292 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800724c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d112      	bne.n	800727c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	3324      	adds	r3, #36	; 0x24
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fa1a 	bl	800869c <xTaskRemoveFromEventList>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e007      	b.n	800728c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800727c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007280:	3301      	adds	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	b25a      	sxtb	r2, r3
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800728c:	2301      	movs	r3, #1
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
 8007290:	e001      	b.n	8007296 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f383 8811 	msr	BASEPRI, r3
}
 80072a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3738      	adds	r7, #56	; 0x38
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <xQueueReceive+0x30>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	623b      	str	r3, [r7, #32]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <xQueueReceive+0x3e>
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <xQueueReceive+0x42>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <xQueueReceive+0x44>
 80072ee:	2300      	movs	r3, #0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xQueueReceive+0x5e>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	61fb      	str	r3, [r7, #28]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800730a:	f001 fb87 	bl	8008a1c <xTaskGetSchedulerState>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <xQueueReceive+0x6e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <xQueueReceive+0x72>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <xQueueReceive+0x74>
 800731e:	2300      	movs	r3, #0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xQueueReceive+0x8e>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	61bb      	str	r3, [r7, #24]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800733a:	f002 fa8b 	bl	8009854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01f      	beq.n	800738a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734e:	f000 fa9b 	bl	8007888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	3310      	adds	r3, #16
 8007366:	4618      	mov	r0, r3
 8007368:	f001 f998 	bl	800869c <xTaskRemoveFromEventList>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007372:	4b3d      	ldr	r3, [pc, #244]	; (8007468 <xQueueReceive+0x1bc>)
 8007374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007382:	f002 fa97 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007386:	2301      	movs	r3, #1
 8007388:	e069      	b.n	800745e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007390:	f002 fa90 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007394:	2300      	movs	r3, #0
 8007396:	e062      	b.n	800745e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 f9dc 	bl	8008760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073ac:	f002 fa82 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073b0:	f000 ff50 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073b4:	f002 fa4e 	bl	8009854 <vPortEnterCritical>
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073be:	b25b      	sxtb	r3, r3
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d103      	bne.n	80073ce <xQueueReceive+0x122>
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d4:	b25b      	sxtb	r3, r3
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d103      	bne.n	80073e4 <xQueueReceive+0x138>
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073e4:	f002 fa66 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073e8:	1d3a      	adds	r2, r7, #4
 80073ea:	f107 0310 	add.w	r3, r7, #16
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 f9cb 	bl	800878c <xTaskCheckForTimeOut>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d123      	bne.n	8007444 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fe:	f000 fabb 	bl	8007978 <prvIsQueueEmpty>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f8f3 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007418:	f000 fa5c 	bl	80078d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800741c:	f000 ff28 	bl	8008270 <xTaskResumeAll>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d189      	bne.n	800733a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <xQueueReceive+0x1bc>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	e780      	b.n	800733a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743a:	f000 fa4b 	bl	80078d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800743e:	f000 ff17 	bl	8008270 <xTaskResumeAll>
 8007442:	e77a      	b.n	800733a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007446:	f000 fa45 	bl	80078d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800744a:	f000 ff11 	bl	8008270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800744e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007450:	f000 fa92 	bl	8007978 <prvIsQueueEmpty>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	f43f af6f 	beq.w	800733a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800745c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800745e:	4618      	mov	r0, r3
 8007460:	3730      	adds	r7, #48	; 0x30
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08e      	sub	sp, #56	; 0x38
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	623b      	str	r3, [r7, #32]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61fb      	str	r3, [r7, #28]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074bc:	f001 faae 	bl	8008a1c <xTaskGetSchedulerState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <xQueueSemaphoreTake+0x60>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <xQueueSemaphoreTake+0x64>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <xQueueSemaphoreTake+0x66>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61bb      	str	r3, [r7, #24]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ec:	f002 f9b2 	bl	8009854 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d024      	beq.n	8007546 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	1e5a      	subs	r2, r3, #1
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800750c:	f001 fc2e 	bl	8008d6c <pvTaskIncrementMutexHeldCount>
 8007510:	4602      	mov	r2, r0
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00f      	beq.n	800753e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	3310      	adds	r3, #16
 8007522:	4618      	mov	r0, r3
 8007524:	f001 f8ba 	bl	800869c <xTaskRemoveFromEventList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800752e:	4b54      	ldr	r3, [pc, #336]	; (8007680 <xQueueSemaphoreTake+0x214>)
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800753e:	f002 f9b9 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 8007542:	2301      	movs	r3, #1
 8007544:	e097      	b.n	8007676 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d111      	bne.n	8007570 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	617b      	str	r3, [r7, #20]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007568:	f002 f9a4 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800756c:	2300      	movs	r3, #0
 800756e:	e082      	b.n	8007676 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007576:	f107 030c 	add.w	r3, r7, #12
 800757a:	4618      	mov	r0, r3
 800757c:	f001 f8f0 	bl	8008760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007584:	f002 f996 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007588:	f000 fe64 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800758c:	f002 f962 	bl	8009854 <vPortEnterCritical>
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007596:	b25b      	sxtb	r3, r3
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d103      	bne.n	80075a6 <xQueueSemaphoreTake+0x13a>
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b2:	d103      	bne.n	80075bc <xQueueSemaphoreTake+0x150>
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075bc:	f002 f97a 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075c0:	463a      	mov	r2, r7
 80075c2:	f107 030c 	add.w	r3, r7, #12
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f8df 	bl	800878c <xTaskCheckForTimeOut>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d132      	bne.n	800763a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075d6:	f000 f9cf 	bl	8007978 <prvIsQueueEmpty>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d026      	beq.n	800762e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075e8:	f002 f934 	bl	8009854 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 fa31 	bl	8008a58 <xTaskPriorityInherit>
 80075f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075f8:	f002 f95c 	bl	80098b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	4611      	mov	r1, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fff9 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800760a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800760c:	f000 f962 	bl	80078d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007610:	f000 fe2e 	bl	8008270 <xTaskResumeAll>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	f47f af68 	bne.w	80074ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800761c:	4b18      	ldr	r3, [pc, #96]	; (8007680 <xQueueSemaphoreTake+0x214>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	e75e      	b.n	80074ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800762e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007630:	f000 f950 	bl	80078d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007634:	f000 fe1c 	bl	8008270 <xTaskResumeAll>
 8007638:	e758      	b.n	80074ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800763a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800763c:	f000 f94a 	bl	80078d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007640:	f000 fe16 	bl	8008270 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007646:	f000 f997 	bl	8007978 <prvIsQueueEmpty>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	f43f af4d 	beq.w	80074ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007658:	f002 f8fc 	bl	8009854 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800765c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800765e:	f000 f891 	bl	8007784 <prvGetDisinheritPriorityAfterTimeout>
 8007662:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766a:	4618      	mov	r0, r3
 800766c:	f001 faf0 	bl	8008c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007670:	f002 f920 	bl	80098b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007674:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007676:	4618      	mov	r0, r3
 8007678:	3738      	adds	r7, #56	; 0x38
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	; 0x38
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	623b      	str	r3, [r7, #32]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <xQueueReceiveFromISR+0x3a>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <xQueueReceiveFromISR+0x3e>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueReceiveFromISR+0x40>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	61fb      	str	r3, [r7, #28]
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076de:	f002 f99b 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 80076e2:	f3ef 8211 	mrs	r2, BASEPRI
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	61ba      	str	r2, [r7, #24]
 80076f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02f      	beq.n	800776a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007718:	f000 f8b6 	bl	8007888 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	1e5a      	subs	r2, r3, #1
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d112      	bne.n	8007754 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d016      	beq.n	8007764 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	3310      	adds	r3, #16
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ffae 	bl	800869c <xTaskRemoveFromEventList>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e007      	b.n	8007764 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007758:	3301      	adds	r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	b25a      	sxtb	r2, r3
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007764:	2301      	movs	r3, #1
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
 8007768:	e001      	b.n	800776e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800776a:	2300      	movs	r3, #0
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f383 8811 	msr	BASEPRI, r3
}
 8007778:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800777c:	4618      	mov	r0, r3
 800777e:	3738      	adds	r7, #56	; 0x38
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d006      	beq.n	80077a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1c3 0307 	rsb	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e001      	b.n	80077a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077a6:	68fb      	ldr	r3, [r7, #12]
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d14d      	bne.n	8007876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 f9b0 	bl	8008b44 <xTaskPriorityDisinherit>
 80077e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	e043      	b.n	8007876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d119      	bne.n	8007828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6858      	ldr	r0, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	461a      	mov	r2, r3
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	f005 ff70 	bl	800d6e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	441a      	add	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	d32b      	bcc.n	8007876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	e026      	b.n	8007876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68d8      	ldr	r0, [r3, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	461a      	mov	r2, r3
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	f005 ff56 	bl	800d6e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	425b      	negs	r3, r3
 8007842:	441a      	add	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d207      	bcs.n	8007864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	425b      	negs	r3, r3
 800785e:	441a      	add	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d105      	bne.n	8007876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3b01      	subs	r3, #1
 8007874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800787e:	697b      	ldr	r3, [r7, #20]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d018      	beq.n	80078cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	441a      	add	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d303      	bcc.n	80078bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68d9      	ldr	r1, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	461a      	mov	r2, r3
 80078c6:	6838      	ldr	r0, [r7, #0]
 80078c8:	f005 ff0c 	bl	800d6e4 <memcpy>
	}
}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078dc:	f001 ffba 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078e8:	e011      	b.n	800790e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d012      	beq.n	8007918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	; 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fed0 	bl	800869c <xTaskRemoveFromEventList>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007902:	f000 ffa5 	bl	8008850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	3b01      	subs	r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	dce9      	bgt.n	80078ea <prvUnlockQueue+0x16>
 8007916:	e000      	b.n	800791a <prvUnlockQueue+0x46>
					break;
 8007918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	22ff      	movs	r2, #255	; 0xff
 800791e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007922:	f001 ffc7 	bl	80098b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007926:	f001 ff95 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007932:	e011      	b.n	8007958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d012      	beq.n	8007962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3310      	adds	r3, #16
 8007940:	4618      	mov	r0, r3
 8007942:	f000 feab 	bl	800869c <xTaskRemoveFromEventList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800794c:	f000 ff80 	bl	8008850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	3b01      	subs	r3, #1
 8007954:	b2db      	uxtb	r3, r3
 8007956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	dce9      	bgt.n	8007934 <prvUnlockQueue+0x60>
 8007960:	e000      	b.n	8007964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800796c:	f001 ffa2 	bl	80098b4 <vPortExitCritical>
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007980:	f001 ff68 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e001      	b.n	8007996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007996:	f001 ff8d 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ac:	f001 ff52 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d102      	bne.n	80079c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e001      	b.n	80079c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079c6:	f001 ff75 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e014      	b.n	8007a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079e4:	4a0f      	ldr	r2, [pc, #60]	; (8007a24 <vQueueAddToRegistry+0x50>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079f0:	490c      	ldr	r1, [pc, #48]	; (8007a24 <vQueueAddToRegistry+0x50>)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079fa:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <vQueueAddToRegistry+0x50>)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4413      	add	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a06:	e006      	b.n	8007a16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b07      	cmp	r3, #7
 8007a12:	d9e7      	bls.n	80079e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	200184d8 	.word	0x200184d8

08007a28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a38:	f001 ff0c 	bl	8009854 <vPortEnterCritical>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d103      	bne.n	8007a52 <vQueueWaitForMessageRestricted+0x2a>
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a58:	b25b      	sxtb	r3, r3
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5e:	d103      	bne.n	8007a68 <vQueueWaitForMessageRestricted+0x40>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a68:	f001 ff24 	bl	80098b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fde1 	bl	8008644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a82:	6978      	ldr	r0, [r7, #20]
 8007a84:	f7ff ff26 	bl	80078d4 <prvUnlockQueue>
	}
 8007a88:	bf00      	nop
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	; 0x38
 8007a94:	af04      	add	r7, sp, #16
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xTaskCreateStatic+0x2a>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	623b      	str	r3, [r7, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	61fb      	str	r3, [r7, #28]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ad6:	23b4      	movs	r3, #180	; 0xb4
 8007ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2bb4      	cmp	r3, #180	; 0xb4
 8007ade:	d00a      	beq.n	8007af6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	61bb      	str	r3, [r7, #24]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007af6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01e      	beq.n	8007b3c <xTaskCreateStatic+0xac>
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01b      	beq.n	8007b3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b16:	2300      	movs	r3, #0
 8007b18:	9303      	str	r3, [sp, #12]
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f850 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b36:	f000 f8eb 	bl	8007d10 <prvAddNewTaskToReadyList>
 8007b3a:	e001      	b.n	8007b40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b40:	697b      	ldr	r3, [r7, #20]
	}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b08c      	sub	sp, #48	; 0x30
 8007b4e:	af04      	add	r7, sp, #16
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 ff9a 	bl	8009a98 <pvPortMalloc>
 8007b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b6c:	20b4      	movs	r0, #180	; 0xb4
 8007b6e:	f001 ff93 	bl	8009a98 <pvPortMalloc>
 8007b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b80:	e005      	b.n	8007b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b82:	6978      	ldr	r0, [r7, #20]
 8007b84:	f002 f854 	bl	8009c30 <vPortFree>
 8007b88:	e001      	b.n	8007b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d017      	beq.n	8007bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	9302      	str	r3, [sp, #8]
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f80e 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb8:	69f8      	ldr	r0, [r7, #28]
 8007bba:	f000 f8a9 	bl	8007d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e002      	b.n	8007bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bca:	69bb      	ldr	r3, [r7, #24]
	}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bec:	3b01      	subs	r3, #1
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f023 0307 	bic.w	r3, r3, #7
 8007bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01f      	beq.n	8007c62 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	e012      	b.n	8007c4e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	7819      	ldrb	r1, [r3, #0]
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	3334      	adds	r3, #52	; 0x34
 8007c38:	460a      	mov	r2, r1
 8007c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d006      	beq.n	8007c56 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	2b0f      	cmp	r3, #15
 8007c52:	d9e9      	bls.n	8007c28 <prvInitialiseNewTask+0x54>
 8007c54:	e000      	b.n	8007c58 <prvInitialiseNewTask+0x84>
			{
				break;
 8007c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c60:	e003      	b.n	8007c6a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2b06      	cmp	r3, #6
 8007c6e:	d901      	bls.n	8007c74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c70:	2306      	movs	r3, #6
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	2200      	movs	r2, #0
 8007c84:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fe64 	bl	8006958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	3318      	adds	r3, #24
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fe5f 	bl	8006958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	f1c3 0207 	rsb	r2, r3, #7
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	334c      	adds	r3, #76	; 0x4c
 8007cc4:	2260      	movs	r2, #96	; 0x60
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f005 fd19 	bl	800d700 <memset>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	4a0c      	ldr	r2, [pc, #48]	; (8007d04 <prvInitialiseNewTask+0x130>)
 8007cd2:	651a      	str	r2, [r3, #80]	; 0x50
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <prvInitialiseNewTask+0x134>)
 8007cd8:	655a      	str	r2, [r3, #84]	; 0x54
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <prvInitialiseNewTask+0x138>)
 8007cde:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	69b8      	ldr	r0, [r7, #24]
 8007ce6:	f001 fc87 	bl	80095f8 <pxPortInitialiseStack>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	0800e5b8 	.word	0x0800e5b8
 8007d08:	0800e5d8 	.word	0x0800e5d8
 8007d0c:	0800e598 	.word	0x0800e598

08007d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d18:	f001 fd9c 	bl	8009854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d1c:	4b2a      	ldr	r3, [pc, #168]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d26:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d2e:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d34:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <prvAddNewTaskToReadyList+0xb8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d110      	bne.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d3c:	f000 fdac 	bl	8008898 <prvInitialiseTaskLists>
 8007d40:	e00d      	b.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d42:	4b23      	ldr	r3, [pc, #140]	; (8007dd0 <prvAddNewTaskToReadyList+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d4a:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d802      	bhi.n	8007d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d58:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <prvAddNewTaskToReadyList+0xc4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <prvAddNewTaskToReadyList+0xc4>)
 8007d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	409a      	lsls	r2, r3
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <prvAddNewTaskToReadyList+0xc8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <prvAddNewTaskToReadyList+0xcc>)
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7fe fdee 	bl	8006972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d96:	f001 fd8d 	bl	80098b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <prvAddNewTaskToReadyList+0xc0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00e      	beq.n	8007dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <prvAddNewTaskToReadyList+0xbc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d207      	bcs.n	8007dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <prvAddNewTaskToReadyList+0xd0>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	2000090c 	.word	0x2000090c
 8007dcc:	2000080c 	.word	0x2000080c
 8007dd0:	20000918 	.word	0x20000918
 8007dd4:	20000928 	.word	0x20000928
 8007dd8:	20000914 	.word	0x20000914
 8007ddc:	20000810 	.word	0x20000810
 8007de0:	e000ed04 	.word	0xe000ed04

08007de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <vTaskDelay+0x60>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <vTaskDelay+0x30>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60bb      	str	r3, [r7, #8]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e14:	f000 fa1e 	bl	8008254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 ffba 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e20:	f000 fa26 	bl	8008270 <xTaskResumeAll>
 8007e24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d107      	bne.n	8007e3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <vTaskDelay+0x64>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000934 	.word	0x20000934
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e54:	f001 fcfe 	bl	8009854 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <vTaskSuspend+0x18>
 8007e5e:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <vTaskSuspend+0x104>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e000      	b.n	8007e66 <vTaskSuspend+0x1a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fddd 	bl	8006a2c <uxListRemove>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d115      	bne.n	8007ea4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4935      	ldr	r1, [pc, #212]	; (8007f54 <vTaskSuspend+0x108>)
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	440b      	add	r3, r1
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <vTaskSuspend+0x58>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	2201      	movs	r2, #1
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	43da      	mvns	r2, r3
 8007e9a:	4b2f      	ldr	r3, [pc, #188]	; (8007f58 <vTaskSuspend+0x10c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <vTaskSuspend+0x10c>)
 8007ea2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3318      	adds	r3, #24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fdbb 	bl	8006a2c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4827      	ldr	r0, [pc, #156]	; (8007f5c <vTaskSuspend+0x110>)
 8007ebe:	f7fe fd58 	bl	8006972 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d103      	bne.n	8007ed6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007ed6:	f001 fced 	bl	80098b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <vTaskSuspend+0x114>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007ee2:	f001 fcb7 	bl	8009854 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007ee6:	f000 fd79 	bl	80089dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007eea:	f001 fce3 	bl	80098b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007eee:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <vTaskSuspend+0x104>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d127      	bne.n	8007f48 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007ef8:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <vTaskSuspend+0x114>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d017      	beq.n	8007f30 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007f00:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <vTaskSuspend+0x118>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <vTaskSuspend+0xd2>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60bb      	str	r3, [r7, #8]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007f1e:	4b12      	ldr	r3, [pc, #72]	; (8007f68 <vTaskSuspend+0x11c>)
 8007f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f2e:	e00b      	b.n	8007f48 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007f30:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <vTaskSuspend+0x110>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <vTaskSuspend+0x120>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d103      	bne.n	8007f44 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <vTaskSuspend+0x104>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
	}
 8007f42:	e001      	b.n	8007f48 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007f44:	f000 faf8 	bl	8008538 <vTaskSwitchContext>
	}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	2000080c 	.word	0x2000080c
 8007f54:	20000810 	.word	0x20000810
 8007f58:	20000914 	.word	0x20000914
 8007f5c:	200008f8 	.word	0x200008f8
 8007f60:	20000918 	.word	0x20000918
 8007f64:	20000934 	.word	0x20000934
 8007f68:	e000ed04 	.word	0xe000ed04
 8007f6c:	2000090c 	.word	0x2000090c

08007f70 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60fb      	str	r3, [r7, #12]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvTaskIsTaskSuspended+0x5c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d10a      	bne.n	8007fbc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvTaskIsTaskSuspended+0x60>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d005      	beq.n	8007fbc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fbc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	200008f8 	.word	0x200008f8
 8007fd0:	200008cc 	.word	0x200008cc

08007fd4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <vTaskResume+0x28>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60bb      	str	r3, [r7, #8]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007ffc:	4b20      	ldr	r3, [pc, #128]	; (8008080 <vTaskResume+0xac>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	429a      	cmp	r2, r3
 8008004:	d037      	beq.n	8008076 <vTaskResume+0xa2>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d034      	beq.n	8008076 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800800c:	f001 fc22 	bl	8009854 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff ffad 	bl	8007f70 <prvTaskIsTaskSuspended>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d02a      	beq.n	8008072 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fd03 	bl	8006a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	2201      	movs	r2, #1
 800802c:	409a      	lsls	r2, r3
 800802e:	4b15      	ldr	r3, [pc, #84]	; (8008084 <vTaskResume+0xb0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4313      	orrs	r3, r2
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <vTaskResume+0xb0>)
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4a10      	ldr	r2, [pc, #64]	; (8008088 <vTaskResume+0xb4>)
 8008046:	441a      	add	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f7fe fc8f 	bl	8006972 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4b09      	ldr	r3, [pc, #36]	; (8008080 <vTaskResume+0xac>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	429a      	cmp	r2, r3
 8008060:	d307      	bcc.n	8008072 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008062:	4b0a      	ldr	r3, [pc, #40]	; (800808c <vTaskResume+0xb8>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008072:	f001 fc1f 	bl	80098b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000080c 	.word	0x2000080c
 8008084:	20000914 	.word	0x20000914
 8008088:	20000810 	.word	0x20000810
 800808c:	e000ed04 	.word	0xe000ed04

08008090 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	; 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008098:	2300      	movs	r3, #0
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <xTaskResumeFromISR+0x2c>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	61bb      	str	r3, [r7, #24]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080bc:	f001 fcac 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 80080c0:	f3ef 8211 	mrs	r2, BASEPRI
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	617a      	str	r2, [r7, #20]
 80080d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080d8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080da:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80080dc:	6a38      	ldr	r0, [r7, #32]
 80080de:	f7ff ff47 	bl	8007f70 <prvTaskIsTaskSuspended>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02f      	beq.n	8008148 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <xTaskResumeFromISR+0xd0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d125      	bne.n	800813c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4b1b      	ldr	r3, [pc, #108]	; (8008164 <xTaskResumeFromISR+0xd4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d301      	bcc.n	8008102 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80080fe:	2301      	movs	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	3304      	adds	r3, #4
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe fc90 	bl	8006a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	2201      	movs	r2, #1
 8008112:	409a      	lsls	r2, r3
 8008114:	4b14      	ldr	r3, [pc, #80]	; (8008168 <xTaskResumeFromISR+0xd8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4313      	orrs	r3, r2
 800811a:	4a13      	ldr	r2, [pc, #76]	; (8008168 <xTaskResumeFromISR+0xd8>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <xTaskResumeFromISR+0xdc>)
 800812c:	441a      	add	r2, r3
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7fe fc1c 	bl	8006972 <vListInsertEnd>
 800813a:	e005      	b.n	8008148 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	3318      	adds	r3, #24
 8008140:	4619      	mov	r1, r3
 8008142:	480b      	ldr	r0, [pc, #44]	; (8008170 <xTaskResumeFromISR+0xe0>)
 8008144:	f7fe fc15 	bl	8006972 <vListInsertEnd>
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f383 8811 	msr	BASEPRI, r3
}
 8008152:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008156:	4618      	mov	r0, r3
 8008158:	3728      	adds	r7, #40	; 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000934 	.word	0x20000934
 8008164:	2000080c 	.word	0x2000080c
 8008168:	20000914 	.word	0x20000914
 800816c:	20000810 	.word	0x20000810
 8008170:	200008cc 	.word	0x200008cc

08008174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08a      	sub	sp, #40	; 0x28
 8008178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008182:	463a      	mov	r2, r7
 8008184:	1d39      	adds	r1, r7, #4
 8008186:	f107 0308 	add.w	r3, r7, #8
 800818a:	4618      	mov	r0, r3
 800818c:	f7f8 f9f4 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	9202      	str	r2, [sp, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	460a      	mov	r2, r1
 80081a2:	4924      	ldr	r1, [pc, #144]	; (8008234 <vTaskStartScheduler+0xc0>)
 80081a4:	4824      	ldr	r0, [pc, #144]	; (8008238 <vTaskStartScheduler+0xc4>)
 80081a6:	f7ff fc73 	bl	8007a90 <xTaskCreateStatic>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4a23      	ldr	r2, [pc, #140]	; (800823c <vTaskStartScheduler+0xc8>)
 80081ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081b0:	4b22      	ldr	r3, [pc, #136]	; (800823c <vTaskStartScheduler+0xc8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081b8:	2301      	movs	r3, #1
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e001      	b.n	80081c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d102      	bne.n	80081ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081c8:	f000 fe4a 	bl	8008e60 <xTimerCreateTimerTask>
 80081cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d11b      	bne.n	800820c <vTaskStartScheduler+0x98>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	613b      	str	r3, [r7, #16]
}
 80081e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <vTaskStartScheduler+0xcc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	334c      	adds	r3, #76	; 0x4c
 80081ee:	4a15      	ldr	r2, [pc, #84]	; (8008244 <vTaskStartScheduler+0xd0>)
 80081f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <vTaskStartScheduler+0xd4>)
 80081f4:	f04f 32ff 	mov.w	r2, #4294967295
 80081f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <vTaskStartScheduler+0xd8>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <vTaskStartScheduler+0xdc>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008206:	f001 fa83 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800820a:	e00e      	b.n	800822a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d10a      	bne.n	800822a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60fb      	str	r3, [r7, #12]
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <vTaskStartScheduler+0xb4>
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	0800e148 	.word	0x0800e148
 8008238:	08008869 	.word	0x08008869
 800823c:	20000930 	.word	0x20000930
 8008240:	2000080c 	.word	0x2000080c
 8008244:	20000018 	.word	0x20000018
 8008248:	2000092c 	.word	0x2000092c
 800824c:	20000918 	.word	0x20000918
 8008250:	20000910 	.word	0x20000910

08008254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <vTaskSuspendAll+0x18>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	4a03      	ldr	r2, [pc, #12]	; (800826c <vTaskSuspendAll+0x18>)
 8008260:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008262:	bf00      	nop
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20000934 	.word	0x20000934

08008270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800827e:	4b41      	ldr	r3, [pc, #260]	; (8008384 <xTaskResumeAll+0x114>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <xTaskResumeAll+0x2c>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	603b      	str	r3, [r7, #0]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800829c:	f001 fada 	bl	8009854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082a0:	4b38      	ldr	r3, [pc, #224]	; (8008384 <xTaskResumeAll+0x114>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	4a37      	ldr	r2, [pc, #220]	; (8008384 <xTaskResumeAll+0x114>)
 80082a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <xTaskResumeAll+0x114>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d161      	bne.n	8008376 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082b2:	4b35      	ldr	r3, [pc, #212]	; (8008388 <xTaskResumeAll+0x118>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d05d      	beq.n	8008376 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ba:	e02e      	b.n	800831a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082bc:	4b33      	ldr	r3, [pc, #204]	; (800838c <xTaskResumeAll+0x11c>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3318      	adds	r3, #24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fbaf 	bl	8006a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fbaa 	bl	8006a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	2201      	movs	r2, #1
 80082de:	409a      	lsls	r2, r3
 80082e0:	4b2b      	ldr	r3, [pc, #172]	; (8008390 <xTaskResumeAll+0x120>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <xTaskResumeAll+0x120>)
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4a27      	ldr	r2, [pc, #156]	; (8008394 <xTaskResumeAll+0x124>)
 80082f8:	441a      	add	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fe fb36 	bl	8006972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830a:	4b23      	ldr	r3, [pc, #140]	; (8008398 <xTaskResumeAll+0x128>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008314:	4b21      	ldr	r3, [pc, #132]	; (800839c <xTaskResumeAll+0x12c>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800831a:	4b1c      	ldr	r3, [pc, #112]	; (800838c <xTaskResumeAll+0x11c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1cc      	bne.n	80082bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008328:	f000 fb58 	bl	80089dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800832c:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <xTaskResumeAll+0x130>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d010      	beq.n	800835a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008338:	f000 f846 	bl	80083c8 <xTaskIncrementTick>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <xTaskResumeAll+0x12c>)
 8008344:	2201      	movs	r2, #1
 8008346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3b01      	subs	r3, #1
 800834c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f1      	bne.n	8008338 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <xTaskResumeAll+0x130>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <xTaskResumeAll+0x12c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008362:	2301      	movs	r3, #1
 8008364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTaskResumeAll+0x134>)
 8008368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008376:	f001 fa9d 	bl	80098b4 <vPortExitCritical>

	return xAlreadyYielded;
 800837a:	68bb      	ldr	r3, [r7, #8]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000934 	.word	0x20000934
 8008388:	2000090c 	.word	0x2000090c
 800838c:	200008cc 	.word	0x200008cc
 8008390:	20000914 	.word	0x20000914
 8008394:	20000810 	.word	0x20000810
 8008398:	2000080c 	.word	0x2000080c
 800839c:	20000920 	.word	0x20000920
 80083a0:	2000091c 	.word	0x2000091c
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <xTaskGetTickCount+0x1c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083b4:	687b      	ldr	r3, [r7, #4]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000910 	.word	0x20000910

080083c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083d2:	4b4e      	ldr	r3, [pc, #312]	; (800850c <xTaskIncrementTick+0x144>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 808e 	bne.w	80084f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083dc:	4b4c      	ldr	r3, [pc, #304]	; (8008510 <xTaskIncrementTick+0x148>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083e4:	4a4a      	ldr	r2, [pc, #296]	; (8008510 <xTaskIncrementTick+0x148>)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d120      	bne.n	8008432 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083f0:	4b48      	ldr	r3, [pc, #288]	; (8008514 <xTaskIncrementTick+0x14c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <xTaskIncrementTick+0x48>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <xTaskIncrementTick+0x46>
 8008410:	4b40      	ldr	r3, [pc, #256]	; (8008514 <xTaskIncrementTick+0x14c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	4b40      	ldr	r3, [pc, #256]	; (8008518 <xTaskIncrementTick+0x150>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3e      	ldr	r2, [pc, #248]	; (8008514 <xTaskIncrementTick+0x14c>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	4a3e      	ldr	r2, [pc, #248]	; (8008518 <xTaskIncrementTick+0x150>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	4b3d      	ldr	r3, [pc, #244]	; (800851c <xTaskIncrementTick+0x154>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a3c      	ldr	r2, [pc, #240]	; (800851c <xTaskIncrementTick+0x154>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	f000 fad5 	bl	80089dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008432:	4b3b      	ldr	r3, [pc, #236]	; (8008520 <xTaskIncrementTick+0x158>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	d348      	bcc.n	80084ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800843c:	4b35      	ldr	r3, [pc, #212]	; (8008514 <xTaskIncrementTick+0x14c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008446:	4b36      	ldr	r3, [pc, #216]	; (8008520 <xTaskIncrementTick+0x158>)
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	601a      	str	r2, [r3, #0]
					break;
 800844e:	e03e      	b.n	80084ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008450:	4b30      	ldr	r3, [pc, #192]	; (8008514 <xTaskIncrementTick+0x14c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d203      	bcs.n	8008470 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008468:	4a2d      	ldr	r2, [pc, #180]	; (8008520 <xTaskIncrementTick+0x158>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800846e:	e02e      	b.n	80084ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fad9 	bl	8006a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3318      	adds	r3, #24
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fad0 	bl	8006a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <xTaskIncrementTick+0x15c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	4a22      	ldr	r2, [pc, #136]	; (8008524 <xTaskIncrementTick+0x15c>)
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <xTaskIncrementTick+0x160>)
 80084ac:	441a      	add	r2, r3
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7fe fa5c 	bl	8006972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	4b1b      	ldr	r3, [pc, #108]	; (800852c <xTaskIncrementTick+0x164>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d3b9      	bcc.n	800843c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084cc:	e7b6      	b.n	800843c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084ce:	4b17      	ldr	r3, [pc, #92]	; (800852c <xTaskIncrementTick+0x164>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d4:	4914      	ldr	r1, [pc, #80]	; (8008528 <xTaskIncrementTick+0x160>)
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d901      	bls.n	80084ea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <xTaskIncrementTick+0x168>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e004      	b.n	8008502 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084f8:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <xTaskIncrementTick+0x16c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <xTaskIncrementTick+0x16c>)
 8008500:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008502:	697b      	ldr	r3, [r7, #20]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000934 	.word	0x20000934
 8008510:	20000910 	.word	0x20000910
 8008514:	200008c4 	.word	0x200008c4
 8008518:	200008c8 	.word	0x200008c8
 800851c:	20000924 	.word	0x20000924
 8008520:	2000092c 	.word	0x2000092c
 8008524:	20000914 	.word	0x20000914
 8008528:	20000810 	.word	0x20000810
 800852c:	2000080c 	.word	0x2000080c
 8008530:	20000920 	.word	0x20000920
 8008534:	2000091c 	.word	0x2000091c

08008538 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800853e:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <vTaskSwitchContext+0xac>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008546:	4b28      	ldr	r3, [pc, #160]	; (80085e8 <vTaskSwitchContext+0xb0>)
 8008548:	2201      	movs	r2, #1
 800854a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800854c:	e044      	b.n	80085d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800854e:	4b26      	ldr	r3, [pc, #152]	; (80085e8 <vTaskSwitchContext+0xb0>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008554:	4b25      	ldr	r3, [pc, #148]	; (80085ec <vTaskSwitchContext+0xb4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	fab3 f383 	clz	r3, r3
 8008560:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	f1c3 031f 	rsb	r3, r3, #31
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	4921      	ldr	r1, [pc, #132]	; (80085f0 <vTaskSwitchContext+0xb8>)
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	440b      	add	r3, r1
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <vTaskSwitchContext+0x5c>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <vTaskSwitchContext+0x5a>
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <vTaskSwitchContext+0xb8>)
 80085a0:	4413      	add	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	605a      	str	r2, [r3, #4]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3308      	adds	r3, #8
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d104      	bne.n	80085c4 <vTaskSwitchContext+0x8c>
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <vTaskSwitchContext+0xbc>)
 80085cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <vTaskSwitchContext+0xbc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	334c      	adds	r3, #76	; 0x4c
 80085d4:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <vTaskSwitchContext+0xc0>)
 80085d6:	6013      	str	r3, [r2, #0]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20000934 	.word	0x20000934
 80085e8:	20000920 	.word	0x20000920
 80085ec:	20000914 	.word	0x20000914
 80085f0:	20000810 	.word	0x20000810
 80085f4:	2000080c 	.word	0x2000080c
 80085f8:	20000018 	.word	0x20000018

080085fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60fb      	str	r3, [r7, #12]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008622:	4b07      	ldr	r3, [pc, #28]	; (8008640 <vTaskPlaceOnEventList+0x44>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3318      	adds	r3, #24
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fe f9c5 	bl	80069ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008630:	2101      	movs	r1, #1
 8008632:	6838      	ldr	r0, [r7, #0]
 8008634:	f000 fbae 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
}
 8008638:	bf00      	nop
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000080c 	.word	0x2000080c

08008644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	617b      	str	r3, [r7, #20]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <vTaskPlaceOnEventListRestricted+0x54>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3318      	adds	r3, #24
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7fe f97c 	bl	8006972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008680:	f04f 33ff 	mov.w	r3, #4294967295
 8008684:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	68b8      	ldr	r0, [r7, #8]
 800868a:	f000 fb83 	bl	8008d94 <prvAddCurrentTaskToDelayedList>
	}
 800868e:	bf00      	nop
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	2000080c 	.word	0x2000080c

0800869c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	60fb      	str	r3, [r7, #12]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	3318      	adds	r3, #24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe f9ad 	bl	8006a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <xTaskRemoveFromEventList+0xac>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d11c      	bne.n	8008714 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe f9a4 	bl	8006a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	2201      	movs	r2, #1
 80086ea:	409a      	lsls	r2, r3
 80086ec:	4b17      	ldr	r3, [pc, #92]	; (800874c <xTaskRemoveFromEventList+0xb0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	4a16      	ldr	r2, [pc, #88]	; (800874c <xTaskRemoveFromEventList+0xb0>)
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4a13      	ldr	r2, [pc, #76]	; (8008750 <xTaskRemoveFromEventList+0xb4>)
 8008704:	441a      	add	r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3304      	adds	r3, #4
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f7fe f930 	bl	8006972 <vListInsertEnd>
 8008712:	e005      	b.n	8008720 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3318      	adds	r3, #24
 8008718:	4619      	mov	r1, r3
 800871a:	480e      	ldr	r0, [pc, #56]	; (8008754 <xTaskRemoveFromEventList+0xb8>)
 800871c:	f7fe f929 	bl	8006972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <xTaskRemoveFromEventList+0xbc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	429a      	cmp	r2, r3
 800872c:	d905      	bls.n	800873a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800872e:	2301      	movs	r3, #1
 8008730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008732:	4b0a      	ldr	r3, [pc, #40]	; (800875c <xTaskRemoveFromEventList+0xc0>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e001      	b.n	800873e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800873e:	697b      	ldr	r3, [r7, #20]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000934 	.word	0x20000934
 800874c:	20000914 	.word	0x20000914
 8008750:	20000810 	.word	0x20000810
 8008754:	200008cc 	.word	0x200008cc
 8008758:	2000080c 	.word	0x2000080c
 800875c:	20000920 	.word	0x20000920

08008760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008768:	4b06      	ldr	r3, [pc, #24]	; (8008784 <vTaskInternalSetTimeOutState+0x24>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <vTaskInternalSetTimeOutState+0x28>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	605a      	str	r2, [r3, #4]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20000924 	.word	0x20000924
 8008788:	20000910 	.word	0x20000910

0800878c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	613b      	str	r3, [r7, #16]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	60fb      	str	r3, [r7, #12]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ce:	f001 f841 	bl	8009854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087d2:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <xTaskCheckForTimeOut+0xbc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ea:	d102      	bne.n	80087f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087ec:	2300      	movs	r3, #0
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	e023      	b.n	800883a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4b15      	ldr	r3, [pc, #84]	; (800884c <xTaskCheckForTimeOut+0xc0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d007      	beq.n	800880e <xTaskCheckForTimeOut+0x82>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e015      	b.n	800883a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	429a      	cmp	r2, r3
 8008816:	d20b      	bcs.n	8008830 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ff9b 	bl	8008760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e004      	b.n	800883a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008836:	2301      	movs	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800883a:	f001 f83b 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 800883e:	69fb      	ldr	r3, [r7, #28]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000910 	.word	0x20000910
 800884c:	20000924 	.word	0x20000924

08008850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008854:	4b03      	ldr	r3, [pc, #12]	; (8008864 <vTaskMissedYield+0x14>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
}
 800885a:	bf00      	nop
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20000920 	.word	0x20000920

08008868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008870:	f000 f852 	bl	8008918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <prvIdleTask+0x28>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d9f9      	bls.n	8008870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <prvIdleTask+0x2c>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800888c:	e7f0      	b.n	8008870 <prvIdleTask+0x8>
 800888e:	bf00      	nop
 8008890:	20000810 	.word	0x20000810
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800889e:	2300      	movs	r3, #0
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	e00c      	b.n	80088be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4a12      	ldr	r2, [pc, #72]	; (80088f8 <prvInitialiseTaskLists+0x60>)
 80088b0:	4413      	add	r3, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe f830 	bl	8006918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3301      	adds	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b06      	cmp	r3, #6
 80088c2:	d9ef      	bls.n	80088a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088c4:	480d      	ldr	r0, [pc, #52]	; (80088fc <prvInitialiseTaskLists+0x64>)
 80088c6:	f7fe f827 	bl	8006918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088ca:	480d      	ldr	r0, [pc, #52]	; (8008900 <prvInitialiseTaskLists+0x68>)
 80088cc:	f7fe f824 	bl	8006918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088d0:	480c      	ldr	r0, [pc, #48]	; (8008904 <prvInitialiseTaskLists+0x6c>)
 80088d2:	f7fe f821 	bl	8006918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088d6:	480c      	ldr	r0, [pc, #48]	; (8008908 <prvInitialiseTaskLists+0x70>)
 80088d8:	f7fe f81e 	bl	8006918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088dc:	480b      	ldr	r0, [pc, #44]	; (800890c <prvInitialiseTaskLists+0x74>)
 80088de:	f7fe f81b 	bl	8006918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088e2:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <prvInitialiseTaskLists+0x78>)
 80088e4:	4a05      	ldr	r2, [pc, #20]	; (80088fc <prvInitialiseTaskLists+0x64>)
 80088e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <prvInitialiseTaskLists+0x7c>)
 80088ea:	4a05      	ldr	r2, [pc, #20]	; (8008900 <prvInitialiseTaskLists+0x68>)
 80088ec:	601a      	str	r2, [r3, #0]
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000810 	.word	0x20000810
 80088fc:	2000089c 	.word	0x2000089c
 8008900:	200008b0 	.word	0x200008b0
 8008904:	200008cc 	.word	0x200008cc
 8008908:	200008e0 	.word	0x200008e0
 800890c:	200008f8 	.word	0x200008f8
 8008910:	200008c4 	.word	0x200008c4
 8008914:	200008c8 	.word	0x200008c8

08008918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800891e:	e019      	b.n	8008954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008920:	f000 ff98 	bl	8009854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <prvCheckTasksWaitingTermination+0x50>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe f87b 	bl	8006a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008936:	4b0d      	ldr	r3, [pc, #52]	; (800896c <prvCheckTasksWaitingTermination+0x54>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3b01      	subs	r3, #1
 800893c:	4a0b      	ldr	r2, [pc, #44]	; (800896c <prvCheckTasksWaitingTermination+0x54>)
 800893e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008940:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <prvCheckTasksWaitingTermination+0x58>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3b01      	subs	r3, #1
 8008946:	4a0a      	ldr	r2, [pc, #40]	; (8008970 <prvCheckTasksWaitingTermination+0x58>)
 8008948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800894a:	f000 ffb3 	bl	80098b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f810 	bl	8008974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008954:	4b06      	ldr	r3, [pc, #24]	; (8008970 <prvCheckTasksWaitingTermination+0x58>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e1      	bne.n	8008920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200008e0 	.word	0x200008e0
 800896c:	2000090c 	.word	0x2000090c
 8008970:	200008f4 	.word	0x200008f4

08008974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	334c      	adds	r3, #76	; 0x4c
 8008980:	4618      	mov	r0, r3
 8008982:	f004 ff2d 	bl	800d7e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d108      	bne.n	80089a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f94b 	bl	8009c30 <vPortFree>
				vPortFree( pxTCB );
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 f948 	bl	8009c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089a0:	e018      	b.n	80089d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d103      	bne.n	80089b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 f93f 	bl	8009c30 <vPortFree>
	}
 80089b2:	e00f      	b.n	80089d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d00a      	beq.n	80089d4 <prvDeleteTCB+0x60>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60fb      	str	r3, [r7, #12]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <prvDeleteTCB+0x5e>
	}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e2:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f4:	e008      	b.n	8008a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <prvResetNextTaskUnblockTime+0x38>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <prvResetNextTaskUnblockTime+0x3c>)
 8008a06:	6013      	str	r3, [r2, #0]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	200008c4 	.word	0x200008c4
 8008a18:	2000092c 	.word	0x2000092c

08008a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <xTaskGetSchedulerState+0x34>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e008      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a30:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <xTaskGetSchedulerState+0x38>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e001      	b.n	8008a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a42:	687b      	ldr	r3, [r7, #4]
	}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20000918 	.word	0x20000918
 8008a54:	20000934 	.word	0x20000934

08008a58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d05e      	beq.n	8008b2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4b31      	ldr	r3, [pc, #196]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d24e      	bcs.n	8008b1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db06      	blt.n	8008a92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	f1c3 0207 	rsb	r2, r3, #7
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6959      	ldr	r1, [r3, #20]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4a26      	ldr	r2, [pc, #152]	; (8008b3c <xTaskPriorityInherit+0xe4>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d12f      	bne.n	8008b0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fd ffbc 	bl	8006a2c <uxListRemove>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	2201      	movs	r2, #1
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	43da      	mvns	r2, r3
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ace:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	2201      	movs	r2, #1
 8008ae0:	409a      	lsls	r2, r3
 8008ae2:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <xTaskPriorityInherit+0xe8>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4a10      	ldr	r2, [pc, #64]	; (8008b3c <xTaskPriorityInherit+0xe4>)
 8008afa:	441a      	add	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fd ff35 	bl	8006972 <vListInsertEnd>
 8008b08:	e004      	b.n	8008b14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e008      	b.n	8008b2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <xTaskPriorityInherit+0xe0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d201      	bcs.n	8008b2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000080c 	.word	0x2000080c
 8008b3c:	20000810 	.word	0x20000810
 8008b40:	20000914 	.word	0x20000914

08008b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d06e      	beq.n	8008c38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b5a:	4b3a      	ldr	r3, [pc, #232]	; (8008c44 <xTaskPriorityDisinherit+0x100>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d00a      	beq.n	8008b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	60fb      	str	r3, [r7, #12]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60bb      	str	r3, [r7, #8]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d044      	beq.n	8008c38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d140      	bne.n	8008c38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fd ff36 	bl	8006a2c <uxListRemove>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d115      	bne.n	8008bf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	491f      	ldr	r1, [pc, #124]	; (8008c48 <xTaskPriorityDisinherit+0x104>)
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xTaskPriorityDisinherit+0xae>
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	2201      	movs	r2, #1
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	43da      	mvns	r2, r3
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4013      	ands	r3, r2
 8008bee:	4a17      	ldr	r2, [pc, #92]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f1c3 0207 	rsb	r2, r3, #7
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	4a0d      	ldr	r2, [pc, #52]	; (8008c4c <xTaskPriorityDisinherit+0x108>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a08      	ldr	r2, [pc, #32]	; (8008c48 <xTaskPriorityDisinherit+0x104>)
 8008c26:	441a      	add	r2, r3
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fd fe9f 	bl	8006972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c38:	697b      	ldr	r3, [r7, #20]
	}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000080c 	.word	0x2000080c
 8008c48:	20000810 	.word	0x20000810
 8008c4c:	20000914 	.word	0x20000914

08008c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d077      	beq.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	60fb      	str	r3, [r7, #12]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d902      	bls.n	8008c96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e002      	b.n	8008c9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d058      	beq.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d153      	bne.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d10a      	bne.n	8008cd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60bb      	str	r3, [r7, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db04      	blt.n	8008cee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f1c3 0207 	rsb	r2, r3, #7
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a19      	ldr	r2, [pc, #100]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cfe:	4413      	add	r3, r2
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d129      	bne.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fd fe8f 	bl	8006a2c <uxListRemove>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	43da      	mvns	r2, r3
 8008d20:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4013      	ands	r3, r2
 8008d26:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	2201      	movs	r2, #1
 8008d30:	409a      	lsls	r2, r3
 8008d32:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4a06      	ldr	r2, [pc, #24]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d4a:	441a      	add	r2, r3
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f7fd fe0d 	bl	8006972 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d58:	bf00      	nop
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	2000080c 	.word	0x2000080c
 8008d64:	20000810 	.word	0x20000810
 8008d68:	20000914 	.word	0x20000914

08008d6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d7e:	3201      	adds	r2, #1
 8008d80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d82:	4b03      	ldr	r3, [pc, #12]	; (8008d90 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d84:	681b      	ldr	r3, [r3, #0]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	2000080c 	.word	0x2000080c

08008d94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d9e:	4b29      	ldr	r3, [pc, #164]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da4:	4b28      	ldr	r3, [pc, #160]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fd fe3e 	bl	8006a2c <uxListRemove>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	43da      	mvns	r2, r3
 8008dc4:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	4a20      	ldr	r2, [pc, #128]	; (8008e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d10a      	bne.n	8008dec <prvAddCurrentTaskToDelayedList+0x58>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d007      	beq.n	8008dec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ddc:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4619      	mov	r1, r3
 8008de4:	481a      	ldr	r0, [pc, #104]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008de6:	f7fd fdc4 	bl	8006972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dea:	e026      	b.n	8008e3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4413      	add	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008df4:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d209      	bcs.n	8008e18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e04:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fd fdd2 	bl	80069ba <vListInsert>
}
 8008e16:	e010      	b.n	8008e3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7fd fdc8 	bl	80069ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d202      	bcs.n	8008e3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e34:	4a09      	ldr	r2, [pc, #36]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6013      	str	r3, [r2, #0]
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000910 	.word	0x20000910
 8008e48:	2000080c 	.word	0x2000080c
 8008e4c:	20000914 	.word	0x20000914
 8008e50:	200008f8 	.word	0x200008f8
 8008e54:	200008c8 	.word	0x200008c8
 8008e58:	200008c4 	.word	0x200008c4
 8008e5c:	2000092c 	.word	0x2000092c

08008e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e6a:	f000 fb85 	bl	8009578 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <xTimerCreateTimerTask+0x80>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d021      	beq.n	8008eba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e7e:	1d3a      	adds	r2, r7, #4
 8008e80:	f107 0108 	add.w	r1, r7, #8
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f7 fb8f 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	2305      	movs	r3, #5
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	4910      	ldr	r1, [pc, #64]	; (8008ee4 <xTimerCreateTimerTask+0x84>)
 8008ea2:	4811      	ldr	r0, [pc, #68]	; (8008ee8 <xTimerCreateTimerTask+0x88>)
 8008ea4:	f7fe fdf4 	bl	8007a90 <xTaskCreateStatic>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4a10      	ldr	r2, [pc, #64]	; (8008eec <xTimerCreateTimerTask+0x8c>)
 8008eac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <xTimerCreateTimerTask+0x8c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000968 	.word	0x20000968
 8008ee4:	0800e150 	.word	0x0800e150
 8008ee8:	08009159 	.word	0x08009159
 8008eec:	2000096c 	.word	0x2000096c

08008ef0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008efe:	2028      	movs	r0, #40	; 0x28
 8008f00:	f000 fdca 	bl	8009a98 <pvPortMalloc>
 8008f04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00d      	beq.n	8008f28 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68b9      	ldr	r1, [r7, #8]
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 f843 	bl	8008fae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008f28:	697b      	ldr	r3, [r7, #20]
	}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b08a      	sub	sp, #40	; 0x28
 8008f36:	af02      	add	r7, sp, #8
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008f40:	2328      	movs	r3, #40	; 0x28
 8008f42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b28      	cmp	r3, #40	; 0x28
 8008f48:	d00a      	beq.n	8008f60 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	61bb      	str	r3, [r7, #24]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xTimerCreateStatic+0x4c>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	617b      	str	r3, [r7, #20]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00d      	beq.n	8008fa4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f805 	bl	8008fae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
	}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3720      	adds	r7, #32
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	617b      	str	r3, [r7, #20]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01e      	beq.n	800901c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008fde:	f000 facb 	bl	8009578 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	6a3a      	ldr	r2, [r7, #32]
 8008ff8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fd fcaa 	bl	8006958 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d008      	beq.n	800901c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009010:	f043 0304 	orr.w	r3, r3, #4
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800901c:	bf00      	nop
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009032:	2300      	movs	r3, #0
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xTimerGenericCommand+0x2e>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	623b      	str	r3, [r7, #32]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009052:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <xTimerGenericCommand+0x98>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d02a      	beq.n	80090b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b05      	cmp	r3, #5
 800906a:	dc18      	bgt.n	800909e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800906c:	f7ff fcd6 	bl	8008a1c <xTaskGetSchedulerState>
 8009070:	4603      	mov	r3, r0
 8009072:	2b02      	cmp	r3, #2
 8009074:	d109      	bne.n	800908a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009076:	4b11      	ldr	r3, [pc, #68]	; (80090bc <xTimerGenericCommand+0x98>)
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f107 0114 	add.w	r1, r7, #20
 800907e:	2300      	movs	r3, #0
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	f7fd feed 	bl	8006e60 <xQueueGenericSend>
 8009086:	6278      	str	r0, [r7, #36]	; 0x24
 8009088:	e012      	b.n	80090b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <xTimerGenericCommand+0x98>)
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f107 0114 	add.w	r1, r7, #20
 8009092:	2300      	movs	r3, #0
 8009094:	2200      	movs	r2, #0
 8009096:	f7fd fee3 	bl	8006e60 <xQueueGenericSend>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24
 800909c:	e008      	b.n	80090b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800909e:	4b07      	ldr	r3, [pc, #28]	; (80090bc <xTimerGenericCommand+0x98>)
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f107 0114 	add.w	r1, r7, #20
 80090a6:	2300      	movs	r3, #0
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	f7fd ffd7 	bl	800705c <xQueueGenericSendFromISR>
 80090ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3728      	adds	r7, #40	; 0x28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000968 	.word	0x20000968

080090c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ca:	4b22      	ldr	r3, [pc, #136]	; (8009154 <prvProcessExpiredTimer+0x94>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fca7 	bl	8006a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d022      	beq.n	8009132 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	699a      	ldr	r2, [r3, #24]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	18d1      	adds	r1, r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	6978      	ldr	r0, [r7, #20]
 80090fa:	f000 f8d1 	bl	80092a0 <prvInsertTimerInActiveList>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01f      	beq.n	8009144 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009104:	2300      	movs	r3, #0
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	2300      	movs	r3, #0
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	2100      	movs	r1, #0
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f7ff ff88 	bl	8009024 <xTimerGenericCommand>
 8009114:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d113      	bne.n	8009144 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	b2da      	uxtb	r2, r3
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	6978      	ldr	r0, [r7, #20]
 800914a:	4798      	blx	r3
}
 800914c:	bf00      	nop
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000960 	.word	0x20000960

08009158 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009160:	f107 0308 	add.w	r3, r7, #8
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f857 	bl	8009218 <prvGetNextExpireTime>
 800916a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f803 	bl	800917c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009176:	f000 f8d5 	bl	8009324 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800917a:	e7f1      	b.n	8009160 <prvTimerTask+0x8>

0800917c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009186:	f7ff f865 	bl	8008254 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4618      	mov	r0, r3
 8009190:	f000 f866 	bl	8009260 <prvSampleTimeNow>
 8009194:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d130      	bne.n	80091fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <prvProcessTimerOrBlockTask+0x3c>
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d806      	bhi.n	80091b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091aa:	f7ff f861 	bl	8008270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff ff85 	bl	80090c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091b6:	e024      	b.n	8009202 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d008      	beq.n	80091d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <prvProcessTimerOrBlockTask+0x90>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <prvProcessTimerOrBlockTask+0x50>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <prvProcessTimerOrBlockTask+0x52>
 80091cc:	2300      	movs	r3, #0
 80091ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <prvProcessTimerOrBlockTask+0x94>)
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4619      	mov	r1, r3
 80091de:	f7fe fc23 	bl	8007a28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091e2:	f7ff f845 	bl	8008270 <xTaskResumeAll>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <prvProcessTimerOrBlockTask+0x98>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
}
 80091fc:	e001      	b.n	8009202 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091fe:	f7ff f837 	bl	8008270 <xTaskResumeAll>
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000964 	.word	0x20000964
 8009210:	20000968 	.word	0x20000968
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <prvGetNextExpireTime+0x44>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <prvGetNextExpireTime+0x16>
 800922a:	2201      	movs	r2, #1
 800922c:	e000      	b.n	8009230 <prvGetNextExpireTime+0x18>
 800922e:	2200      	movs	r2, #0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800923c:	4b07      	ldr	r3, [pc, #28]	; (800925c <prvGetNextExpireTime+0x44>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e001      	b.n	800924c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800924c:	68fb      	ldr	r3, [r7, #12]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000960 	.word	0x20000960

08009260 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009268:	f7ff f89e 	bl	80083a8 <xTaskGetTickCount>
 800926c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800926e:	4b0b      	ldr	r3, [pc, #44]	; (800929c <prvSampleTimeNow+0x3c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	429a      	cmp	r2, r3
 8009276:	d205      	bcs.n	8009284 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009278:	f000 f91a 	bl	80094b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	e002      	b.n	800928a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800928a:	4a04      	ldr	r2, [pc, #16]	; (800929c <prvSampleTimeNow+0x3c>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009290:	68fb      	ldr	r3, [r7, #12]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000970 	.word	0x20000970

080092a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d812      	bhi.n	80092ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d302      	bcc.n	80092da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e01b      	b.n	8009312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092da:	4b10      	ldr	r3, [pc, #64]	; (800931c <prvInsertTimerInActiveList+0x7c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fd fb68 	bl	80069ba <vListInsert>
 80092ea:	e012      	b.n	8009312 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d206      	bcs.n	8009302 <prvInsertTimerInActiveList+0x62>
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d302      	bcc.n	8009302 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e007      	b.n	8009312 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009302:	4b07      	ldr	r3, [pc, #28]	; (8009320 <prvInsertTimerInActiveList+0x80>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fd fb54 	bl	80069ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009312:	697b      	ldr	r3, [r7, #20]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000964 	.word	0x20000964
 8009320:	20000960 	.word	0x20000960

08009324 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08c      	sub	sp, #48	; 0x30
 8009328:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800932a:	e0ae      	b.n	800948a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f2c0 80aa 	blt.w	8009488 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	3304      	adds	r3, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd fb71 	bl	8006a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800934a:	1d3b      	adds	r3, r7, #4
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff87 	bl	8009260 <prvSampleTimeNow>
 8009352:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b09      	cmp	r3, #9
 8009358:	f200 8097 	bhi.w	800948a <prvProcessReceivedCommands+0x166>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <prvProcessReceivedCommands+0x40>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	0800938d 	.word	0x0800938d
 8009368:	0800938d 	.word	0x0800938d
 800936c:	0800938d 	.word	0x0800938d
 8009370:	08009401 	.word	0x08009401
 8009374:	08009415 	.word	0x08009415
 8009378:	0800945f 	.word	0x0800945f
 800937c:	0800938d 	.word	0x0800938d
 8009380:	0800938d 	.word	0x0800938d
 8009384:	08009401 	.word	0x08009401
 8009388:	08009415 	.word	0x08009415
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	18d1      	adds	r1, r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a3a      	ldr	r2, [r7, #32]
 80093aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ac:	f7ff ff78 	bl	80092a0 <prvInsertTimerInActiveList>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d069      	beq.n	800948a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05e      	beq.n	800948a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	441a      	add	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093de:	f7ff fe21 	bl	8009024 <xTimerGenericCommand>
 80093e2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d14f      	bne.n	800948a <prvProcessReceivedCommands+0x166>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	61bb      	str	r3, [r7, #24]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	b2da      	uxtb	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009412:	e03a      	b.n	800948a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	617b      	str	r3, [r7, #20]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	18d1      	adds	r1, r2, r3
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	6a3a      	ldr	r2, [r7, #32]
 8009456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009458:	f7ff ff22 	bl	80092a0 <prvInsertTimerInActiveList>
					break;
 800945c:	e015      	b.n	800948a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800946c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800946e:	f000 fbdf 	bl	8009c30 <vPortFree>
 8009472:	e00a      	b.n	800948a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009486:	e000      	b.n	800948a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009488:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800948a:	4b08      	ldr	r3, [pc, #32]	; (80094ac <prvProcessReceivedCommands+0x188>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f107 0108 	add.w	r1, r7, #8
 8009492:	2200      	movs	r2, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd ff09 	bl	80072ac <xQueueReceive>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	f47f af45 	bne.w	800932c <prvProcessReceivedCommands+0x8>
	}
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	3728      	adds	r7, #40	; 0x28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000968 	.word	0x20000968

080094b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b6:	e048      	b.n	800954a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b8:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <prvSwitchTimerLists+0xc0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c2:	4b2b      	ldr	r3, [pc, #172]	; (8009570 <prvSwitchTimerLists+0xc0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fd faab 	bl	8006a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02e      	beq.n	800954a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4413      	add	r3, r2
 80094f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d90e      	bls.n	800951c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <prvSwitchTimerLists+0xc0>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3304      	adds	r3, #4
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f7fd fa50 	bl	80069ba <vListInsert>
 800951a:	e016      	b.n	800954a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	2300      	movs	r3, #0
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fd7c 	bl	8009024 <xTimerGenericCommand>
 800952c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	603b      	str	r3, [r7, #0]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <prvSwitchTimerLists+0xc0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1b1      	bne.n	80094b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <prvSwitchTimerLists+0xc0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800955a:	4b06      	ldr	r3, [pc, #24]	; (8009574 <prvSwitchTimerLists+0xc4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a04      	ldr	r2, [pc, #16]	; (8009570 <prvSwitchTimerLists+0xc0>)
 8009560:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009562:	4a04      	ldr	r2, [pc, #16]	; (8009574 <prvSwitchTimerLists+0xc4>)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	6013      	str	r3, [r2, #0]
}
 8009568:	bf00      	nop
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20000960 	.word	0x20000960
 8009574:	20000964 	.word	0x20000964

08009578 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800957e:	f000 f969 	bl	8009854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d120      	bne.n	80095cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800958a:	4814      	ldr	r0, [pc, #80]	; (80095dc <prvCheckForValidListAndQueue+0x64>)
 800958c:	f7fd f9c4 	bl	8006918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009590:	4813      	ldr	r0, [pc, #76]	; (80095e0 <prvCheckForValidListAndQueue+0x68>)
 8009592:	f7fd f9c1 	bl	8006918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009596:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <prvCheckForValidListAndQueue+0x6c>)
 8009598:	4a10      	ldr	r2, [pc, #64]	; (80095dc <prvCheckForValidListAndQueue+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <prvCheckForValidListAndQueue+0x70>)
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <prvCheckForValidListAndQueue+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <prvCheckForValidListAndQueue+0x74>)
 80095a8:	4a11      	ldr	r2, [pc, #68]	; (80095f0 <prvCheckForValidListAndQueue+0x78>)
 80095aa:	210c      	movs	r1, #12
 80095ac:	200a      	movs	r0, #10
 80095ae:	f7fd facf 	bl	8006b50 <xQueueGenericCreateStatic>
 80095b2:	4603      	mov	r3, r0
 80095b4:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	490b      	ldr	r1, [pc, #44]	; (80095f4 <prvCheckForValidListAndQueue+0x7c>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fa04 	bl	80079d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095cc:	f000 f972 	bl	80098b4 <vPortExitCritical>
}
 80095d0:	bf00      	nop
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000968 	.word	0x20000968
 80095dc:	20000938 	.word	0x20000938
 80095e0:	2000094c 	.word	0x2000094c
 80095e4:	20000960 	.word	0x20000960
 80095e8:	20000964 	.word	0x20000964
 80095ec:	200009ec 	.word	0x200009ec
 80095f0:	20000974 	.word	0x20000974
 80095f4:	0800e158 	.word	0x0800e158

080095f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3b04      	subs	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3b04      	subs	r3, #4
 8009616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0201 	bic.w	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3b04      	subs	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009628:	4a0c      	ldr	r2, [pc, #48]	; (800965c <pxPortInitialiseStack+0x64>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3b14      	subs	r3, #20
 8009632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3b04      	subs	r3, #4
 800963e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f06f 0202 	mvn.w	r2, #2
 8009646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3b20      	subs	r3, #32
 800964c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	08009661 	.word	0x08009661

08009660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <prvTaskExitError+0x54>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d00a      	beq.n	800968a <prvTaskExitError+0x2a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <prvTaskExitError+0x28>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	60bb      	str	r3, [r7, #8]
}
 800969c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800969e:	bf00      	nop
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0fc      	beq.n	80096a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000014 	.word	0x20000014
	...

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	; (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009716:	4b46      	ldr	r3, [pc, #280]	; (8009830 <xPortStartScheduler+0x120>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a46      	ldr	r2, [pc, #280]	; (8009834 <xPortStartScheduler+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10a      	bne.n	8009736 <xPortStartScheduler+0x26>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009736:	4b3e      	ldr	r3, [pc, #248]	; (8009830 <xPortStartScheduler+0x120>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a3f      	ldr	r2, [pc, #252]	; (8009838 <xPortStartScheduler+0x128>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d10a      	bne.n	8009756 <xPortStartScheduler+0x46>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009756:	4b39      	ldr	r3, [pc, #228]	; (800983c <xPortStartScheduler+0x12c>)
 8009758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	22ff      	movs	r2, #255	; 0xff
 8009766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <xPortStartScheduler+0x130>)
 800977c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800977e:	4b31      	ldr	r3, [pc, #196]	; (8009844 <xPortStartScheduler+0x134>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009784:	e009      	b.n	800979a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009786:	4b2f      	ldr	r3, [pc, #188]	; (8009844 <xPortStartScheduler+0x134>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a2d      	ldr	r2, [pc, #180]	; (8009844 <xPortStartScheduler+0x134>)
 800978e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	b2db      	uxtb	r3, r3
 8009798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b80      	cmp	r3, #128	; 0x80
 80097a4:	d0ef      	beq.n	8009786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097a6:	4b27      	ldr	r3, [pc, #156]	; (8009844 <xPortStartScheduler+0x134>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f1c3 0307 	rsb	r3, r3, #7
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d00a      	beq.n	80097c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60bb      	str	r3, [r7, #8]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <xPortStartScheduler+0x134>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <xPortStartScheduler+0x134>)
 80097d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <xPortStartScheduler+0x134>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <xPortStartScheduler+0x134>)
 80097dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097e6:	4b18      	ldr	r3, [pc, #96]	; (8009848 <xPortStartScheduler+0x138>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a17      	ldr	r2, [pc, #92]	; (8009848 <xPortStartScheduler+0x138>)
 80097ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <xPortStartScheduler+0x138>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a14      	ldr	r2, [pc, #80]	; (8009848 <xPortStartScheduler+0x138>)
 80097f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097fe:	f000 f8dd 	bl	80099bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <xPortStartScheduler+0x13c>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009808:	f000 f8fc 	bl	8009a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <xPortStartScheduler+0x140>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <xPortStartScheduler+0x140>)
 8009812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009818:	f7ff ff66 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800981c:	f7fe fe8c 	bl	8008538 <vTaskSwitchContext>
	prvTaskExitError();
 8009820:	f7ff ff1e 	bl	8009660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	e000ed00 	.word	0xe000ed00
 8009834:	410fc271 	.word	0x410fc271
 8009838:	410fc270 	.word	0x410fc270
 800983c:	e000e400 	.word	0xe000e400
 8009840:	20000a34 	.word	0x20000a34
 8009844:	20000a38 	.word	0x20000a38
 8009848:	e000ed20 	.word	0xe000ed20
 800984c:	20000014 	.word	0x20000014
 8009850:	e000ef34 	.word	0xe000ef34

08009854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	607b      	str	r3, [r7, #4]
}
 800986c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <vPortEnterCritical+0x58>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <vPortEnterCritical+0x58>)
 8009876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <vPortEnterCritical+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10f      	bne.n	80098a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortEnterCritical+0x5c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <vPortEnterCritical+0x4a>
	}
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000014 	.word	0x20000014
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <vPortExitCritical+0x50>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <vPortExitCritical+0x24>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <vPortExitCritical+0x50>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3b01      	subs	r3, #1
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <vPortExitCritical+0x50>)
 80098e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <vPortExitCritical+0x42>
 80098ea:	2300      	movs	r3, #0
 80098ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f383 8811 	msr	BASEPRI, r3
}
 80098f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000014 	.word	0x20000014
	...

08009910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009910:	f3ef 8009 	mrs	r0, PSP
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4b15      	ldr	r3, [pc, #84]	; (8009970 <pxCurrentTCBConst>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	f01e 0f10 	tst.w	lr, #16
 8009920:	bf08      	it	eq
 8009922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009934:	f380 8811 	msr	BASEPRI, r0
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f7fe fdfa 	bl	8008538 <vTaskSwitchContext>
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f380 8811 	msr	BASEPRI, r0
 800994c:	bc09      	pop	{r0, r3}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	f01e 0f10 	tst.w	lr, #16
 800995a:	bf08      	it	eq
 800995c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009960:	f380 8809 	msr	PSP, r0
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst>:
 8009970:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe fd19 	bl	80083c8 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <SysTick_Handler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <vPortSetupTimerInterrupt+0x38>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <vPortSetupTimerInterrupt+0x3c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <vPortSetupTimerInterrupt+0x40>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <vPortSetupTimerInterrupt+0x44>)
 80099da:	3b01      	subs	r3, #1
 80099dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010
 80099f4:	e000e018 	.word	0xe000e018
 80099f8:	20000008 	.word	0x20000008
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	e000e014 	.word	0xe000e014

08009a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a14 <vPortEnableVFP+0x10>
 8009a08:	6801      	ldr	r1, [r0, #0]
 8009a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a0e:	6001      	str	r1, [r0, #0]
 8009a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a12:	bf00      	nop
 8009a14:	e000ed88 	.word	0xe000ed88

08009a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d914      	bls.n	8009a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <vPortValidateInterruptPriority+0x70>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <vPortValidateInterruptPriority+0x74>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d20a      	bcs.n	8009a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a54:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <vPortValidateInterruptPriority+0x78>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <vPortValidateInterruptPriority+0x7c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d90a      	bls.n	8009a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	603b      	str	r3, [r7, #0]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <vPortValidateInterruptPriority+0x60>
	}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	e000e3f0 	.word	0xe000e3f0
 8009a8c:	20000a34 	.word	0x20000a34
 8009a90:	e000ed0c 	.word	0xe000ed0c
 8009a94:	20000a38 	.word	0x20000a38

08009a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa4:	f7fe fbd6 	bl	8008254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aa8:	4b5b      	ldr	r3, [pc, #364]	; (8009c18 <pvPortMalloc+0x180>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab0:	f000 f920 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab4:	4b59      	ldr	r3, [pc, #356]	; (8009c1c <pvPortMalloc+0x184>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8093 	bne.w	8009be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01d      	beq.n	8009b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ac8:	2208      	movs	r2, #8
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d014      	beq.n	8009b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f023 0307 	bic.w	r3, r3, #7
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <pvPortMalloc+0x6c>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	617b      	str	r3, [r7, #20]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d06e      	beq.n	8009be8 <pvPortMalloc+0x150>
 8009b0a:	4b45      	ldr	r3, [pc, #276]	; (8009c20 <pvPortMalloc+0x188>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d869      	bhi.n	8009be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b14:	4b43      	ldr	r3, [pc, #268]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b18:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1e:	e004      	b.n	8009b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d903      	bls.n	8009b3c <pvPortMalloc+0xa4>
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f1      	bne.n	8009b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b3c:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <pvPortMalloc+0x180>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d050      	beq.n	8009be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2308      	movs	r3, #8
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d91f      	bls.n	8009ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <pvPortMalloc+0xf8>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	613b      	str	r3, [r7, #16]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ba2:	69b8      	ldr	r0, [r7, #24]
 8009ba4:	f000 f908 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ba8:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <pvPortMalloc+0x188>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	4b1b      	ldr	r3, [pc, #108]	; (8009c28 <pvPortMalloc+0x190>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d203      	bcs.n	8009bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <pvPortMalloc+0x188>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <pvPortMalloc+0x190>)
 8009bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <pvPortMalloc+0x184>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x194>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a11      	ldr	r2, [pc, #68]	; (8009c2c <pvPortMalloc+0x194>)
 8009be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009be8:	f7fe fb42 	bl	8008270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <pvPortMalloc+0x174>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <pvPortMalloc+0x172>
	return pvReturn;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3728      	adds	r7, #40	; 0x28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20007f74 	.word	0x20007f74
 8009c1c:	20007f88 	.word	0x20007f88
 8009c20:	20007f78 	.word	0x20007f78
 8009c24:	20007f6c 	.word	0x20007f6c
 8009c28:	20007f7c 	.word	0x20007f7c
 8009c2c:	20007f80 	.word	0x20007f80

08009c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04d      	beq.n	8009cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c42:	2308      	movs	r3, #8
 8009c44:	425b      	negs	r3, r3
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4413      	add	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <vPortFree+0xb8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <vPortFree+0x44>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <vPortFree+0x62>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60bb      	str	r3, [r7, #8]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <vPortFree+0xb8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01e      	beq.n	8009cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11a      	bne.n	8009cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <vPortFree+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	401a      	ands	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cb8:	f7fe facc 	bl	8008254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <vPortFree+0xbc>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	4a09      	ldr	r2, [pc, #36]	; (8009cec <vPortFree+0xbc>)
 8009cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f000 f874 	bl	8009db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xc0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xc0>)
 8009cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cda:	f7fe fac9 	bl	8008270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20007f88 	.word	0x20007f88
 8009cec:	20007f78 	.word	0x20007f78
 8009cf0:	20007f84 	.word	0x20007f84

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f247 5330 	movw	r3, #30000	; 0x7530
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000a3c 	.word	0x20000a3c
 8009da4:	20007f6c 	.word	0x20007f6c
 8009da8:	20007f74 	.word	0x20007f74
 8009dac:	20007f7c 	.word	0x20007f7c
 8009db0:	20007f78 	.word	0x20007f78
 8009db4:	20007f88 	.word	0x20007f88

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20007f6c 	.word	0x20007f6c
 8009e68:	20007f74 	.word	0x20007f74

08009e6c <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 8009e6c:	b590      	push	{r4, r7, lr}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 8009e74:	4bc3      	ldr	r3, [pc, #780]	; (800a184 <ThreadM95Task+0x318>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fc fd1f 	bl	80068bc <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8009e7e:	4bc2      	ldr	r3, [pc, #776]	; (800a188 <ThreadM95Task+0x31c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f04f 31ff 	mov.w	r1, #4294967295
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fc fbb8 	bl	80065fc <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 90000); // запускаем таймер для перезагрузки по его окончанию
 8009e8c:	4bbf      	ldr	r3, [pc, #764]	; (800a18c <ThreadM95Task+0x320>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	49bf      	ldr	r1, [pc, #764]	; (800a190 <ThreadM95Task+0x324>)
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fc fa56 	bl	8006344 <osTimerStart>


	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009e98:	4bbe      	ldr	r3, [pc, #760]	; (800a194 <ThreadM95Task+0x328>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fc fae7 	bl	8006474 <osMutexWait>

	fm25v02_write(2*VERSION_REG, 1); // записываем версию прошивки для бутлоадера старший байт
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009eac:	f001 fe4a 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 1); // записываем версию прошивки для бутлоадера младший байт
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	f242 0001 	movw	r0, #8193	; 0x2001
 8009eb6:	f001 fe45 	bl	800bb44 <fm25v02_write>

	fm25v02_write(2*BOOTLOADER_VERSION_REG, 0); // записываем версию прошивки бутлоадера старший байт
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ec0:	f001 fe40 	bl	800bb44 <fm25v02_write>
	fm25v02_write(2*BOOTLOADER_VERSION_REG+1, 256); // записываем версию прошивки бутлоадера младший байт
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	f240 2001 	movw	r0, #513	; 0x201
 8009eca:	f001 fe3b 	bl	800bb44 <fm25v02_write>

	osMutexRelease(Fm25v02MutexHandle);
 8009ece:	4bb1      	ldr	r3, [pc, #708]	; (800a194 <ThreadM95Task+0x328>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fc fb1c 	bl	8006510 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009ed8:	4bae      	ldr	r3, [pc, #696]	; (800a194 <ThreadM95Task+0x328>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fc fac7 	bl	8006474 <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 8009ee6:	49ac      	ldr	r1, [pc, #688]	; (800a198 <ThreadM95Task+0x32c>)
 8009ee8:	f242 105f 	movw	r0, #8543	; 0x215f
 8009eec:	f001 fdf0 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 8009ef0:	49aa      	ldr	r1, [pc, #680]	; (800a19c <ThreadM95Task+0x330>)
 8009ef2:	f242 1061 	movw	r0, #8545	; 0x2161
 8009ef6:	f001 fdeb 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 8009efa:	49a9      	ldr	r1, [pc, #676]	; (800a1a0 <ThreadM95Task+0x334>)
 8009efc:	f242 1063 	movw	r0, #8547	; 0x2163
 8009f00:	f001 fde6 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 8009f04:	49a7      	ldr	r1, [pc, #668]	; (800a1a4 <ThreadM95Task+0x338>)
 8009f06:	f242 1065 	movw	r0, #8549	; 0x2165
 8009f0a:	f001 fde1 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 8009f0e:	49a6      	ldr	r1, [pc, #664]	; (800a1a8 <ThreadM95Task+0x33c>)
 8009f10:	f242 1067 	movw	r0, #8551	; 0x2167
 8009f14:	f001 fddc 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 8009f18:	49a4      	ldr	r1, [pc, #656]	; (800a1ac <ThreadM95Task+0x340>)
 8009f1a:	f242 1069 	movw	r0, #8553	; 0x2169
 8009f1e:	f001 fdd7 	bl	800bad0 <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 8009f22:	4b9c      	ldr	r3, [pc, #624]	; (800a194 <ThreadM95Task+0x328>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fc faf2 	bl	8006510 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 8009f2c:	4b9e      	ldr	r3, [pc, #632]	; (800a1a8 <ThreadM95Task+0x33c>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	021b      	lsls	r3, r3, #8
 8009f34:	b21a      	sxth	r2, r3
 8009f36:	4b9d      	ldr	r3, [pc, #628]	; (800a1ac <ThreadM95Task+0x340>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	b21b      	sxth	r3, r3
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	4b9a      	ldr	r3, [pc, #616]	; (800a1b0 <ThreadM95Task+0x344>)
 8009f46:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 8009f48:	4b93      	ldr	r3, [pc, #588]	; (800a198 <ThreadM95Task+0x32c>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d123      	bne.n	8009f9a <ThreadM95Task+0x12e>
 8009f52:	4b92      	ldr	r3, [pc, #584]	; (800a19c <ThreadM95Task+0x330>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d11e      	bne.n	8009f9a <ThreadM95Task+0x12e>
 8009f5c:	4b90      	ldr	r3, [pc, #576]	; (800a1a0 <ThreadM95Task+0x334>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d119      	bne.n	8009f9a <ThreadM95Task+0x12e>
 8009f66:	4b8f      	ldr	r3, [pc, #572]	; (800a1a4 <ThreadM95Task+0x338>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d114      	bne.n	8009f9a <ThreadM95Task+0x12e>
 8009f70:	4b8f      	ldr	r3, [pc, #572]	; (800a1b0 <ThreadM95Task+0x344>)
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10f      	bne.n	8009f9a <ThreadM95Task+0x12e>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 8009f7a:	4b87      	ldr	r3, [pc, #540]	; (800a198 <ThreadM95Task+0x32c>)
 8009f7c:	22c3      	movs	r2, #195	; 0xc3
 8009f7e:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 8009f80:	4b86      	ldr	r3, [pc, #536]	; (800a19c <ThreadM95Task+0x330>)
 8009f82:	22d0      	movs	r2, #208	; 0xd0
 8009f84:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 8009f86:	4b86      	ldr	r3, [pc, #536]	; (800a1a0 <ThreadM95Task+0x334>)
 8009f88:	22a3      	movs	r2, #163	; 0xa3
 8009f8a:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 8009f8c:	4b85      	ldr	r3, [pc, #532]	; (800a1a4 <ThreadM95Task+0x338>)
 8009f8e:	2243      	movs	r2, #67	; 0x43
 8009f90:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 8009f92:	4b87      	ldr	r3, [pc, #540]	; (800a1b0 <ThreadM95Task+0x344>)
 8009f94:	f648 02ea 	movw	r2, #35050	; 0x88ea
 8009f98:	801a      	strh	r2, [r3, #0]
			//ip4 = 67;     // значение по умолчанию
			//port = 35070; // значение по умолчанию
		}


		if( connect_state == 0 )
 8009f9a:	4b86      	ldr	r3, [pc, #536]	; (800a1b4 <ThreadM95Task+0x348>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8150 	bne.w	800a246 <ThreadM95Task+0x3da>
		{

			osMutexWait(UartMutexHandle, osWaitForever);
 8009fa6:	4b84      	ldr	r3, [pc, #528]	; (800a1b8 <ThreadM95Task+0x34c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f04f 31ff 	mov.w	r1, #4294967295
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fc fa60 	bl	8006474 <osMutexWait>

			switch( AT_CIPSTATUS() )
 8009fb4:	f002 f814 	bl	800bfe0 <AT_CIPSTATUS>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	2b0c      	cmp	r3, #12
 8009fbe:	f200 813d 	bhi.w	800a23c <ThreadM95Task+0x3d0>
 8009fc2:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <ThreadM95Task+0x15c>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a217 	.word	0x0800a217
 8009fcc:	08009ffd 	.word	0x08009ffd
 8009fd0:	0800a011 	.word	0x0800a011
 8009fd4:	0800a23d 	.word	0x0800a23d
 8009fd8:	0800a23d 	.word	0x0800a23d
 8009fdc:	0800a01b 	.word	0x0800a01b
 8009fe0:	0800a025 	.word	0x0800a025
 8009fe4:	0800a211 	.word	0x0800a211
 8009fe8:	0800a23d 	.word	0x0800a23d
 8009fec:	0800a23d 	.word	0x0800a23d
 8009ff0:	0800a057 	.word	0x0800a057
 8009ff4:	0800a207 	.word	0x0800a207
 8009ff8:	0800a1d5 	.word	0x0800a1d5
			{

				case IP_INITIAL:

					LED1_OFF();
 8009ffc:	f001 fe5c 	bl	800bcb8 <LED1_OFF>

					ATE0();
 800a000:	f001 fec4 	bl	800bd8c <ATE0>

					if( AT_CSTT("internet.mts.ru","mts","mts") == AT_OK )
 800a004:	4a6d      	ldr	r2, [pc, #436]	; (800a1bc <ThreadM95Task+0x350>)
 800a006:	496d      	ldr	r1, [pc, #436]	; (800a1bc <ThreadM95Task+0x350>)
 800a008:	486d      	ldr	r0, [pc, #436]	; (800a1c0 <ThreadM95Task+0x354>)
 800a00a:	f002 f925 	bl	800c258 <AT_CSTT>
					{
						//LED2_ON();
					}

				break;
 800a00e:	e115      	b.n	800a23c <ThreadM95Task+0x3d0>

				case IP_START:

					LED1_OFF();
 800a010:	f001 fe52 	bl	800bcb8 <LED1_OFF>

					if ( AT_CIICR() == AT_OK )
 800a014:	f002 f99c 	bl	800c350 <AT_CIICR>
					{
						//LED3_ON();
					}

				break;
 800a018:	e110      	b.n	800a23c <ThreadM95Task+0x3d0>

				case IP_GPRSACT:

					LED1_OFF();
 800a01a:	f001 fe4d 	bl	800bcb8 <LED1_OFF>

					if( AT_CIFSR() == AT_OK )
 800a01e:	f002 fa01 	bl	800c424 <AT_CIFSR>
					{
						//LED4_ON();
					}

				break;
 800a022:	e10b      	b.n	800a23c <ThreadM95Task+0x3d0>

				case IP_STATUS:

					LED1_OFF();
 800a024:	f001 fe48 	bl	800bcb8 <LED1_OFF>

					if( AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800a028:	4b5b      	ldr	r3, [pc, #364]	; (800a198 <ThreadM95Task+0x32c>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b2d9      	uxtb	r1, r3
 800a02e:	4b5b      	ldr	r3, [pc, #364]	; (800a19c <ThreadM95Task+0x330>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	b2d8      	uxtb	r0, r3
 800a034:	4b5a      	ldr	r3, [pc, #360]	; (800a1a0 <ThreadM95Task+0x334>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	b2dc      	uxtb	r4, r3
 800a03a:	4b5a      	ldr	r3, [pc, #360]	; (800a1a4 <ThreadM95Task+0x338>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	4a5b      	ldr	r2, [pc, #364]	; (800a1b0 <ThreadM95Task+0x344>)
 800a042:	8812      	ldrh	r2, [r2, #0]
 800a044:	b292      	uxth	r2, r2
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4623      	mov	r3, r4
 800a04c:	4602      	mov	r2, r0
 800a04e:	485d      	ldr	r0, [pc, #372]	; (800a1c4 <ThreadM95Task+0x358>)
 800a050:	f002 fa52 	bl	800c4f8 <AT_CIPSTART>
					{
						//LED5_ON();
					}

				break;
 800a054:	e0f2      	b.n	800a23c <ThreadM95Task+0x3d0>

				case CONNECT_OK:

					LED1_ON();
 800a056:	f001 fe3b 	bl	800bcd0 <LED1_ON>

					if( AT_CSQ(&level) == AT_OK )
 800a05a:	485b      	ldr	r0, [pc, #364]	; (800a1c8 <ThreadM95Task+0x35c>)
 800a05c:	f001 ff42 	bl	800bee4 <AT_CSQ>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d117      	bne.n	800a096 <ThreadM95Task+0x22a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a066:	4b4b      	ldr	r3, [pc, #300]	; (800a194 <ThreadM95Task+0x328>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f04f 31ff 	mov.w	r1, #4294967295
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fc fa00 	bl	8006474 <osMutexWait>
						fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 800a074:	2100      	movs	r1, #0
 800a076:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800a07a:	f001 fd63 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 800a07e:	4b52      	ldr	r3, [pc, #328]	; (800a1c8 <ThreadM95Task+0x35c>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	4619      	mov	r1, r3
 800a084:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800a088:	f001 fd5c 	bl	800bb44 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800a08c:	4b41      	ldr	r3, [pc, #260]	; (800a194 <ThreadM95Task+0x328>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f7fc fa3d 	bl	8006510 <osMutexRelease>
					}

					if(	AT_CCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 800a096:	494d      	ldr	r1, [pc, #308]	; (800a1cc <ThreadM95Task+0x360>)
 800a098:	484d      	ldr	r0, [pc, #308]	; (800a1d0 <ThreadM95Task+0x364>)
 800a09a:	f002 fbf7 	bl	800c88c <AT_CCID>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d16b      	bne.n	800a17c <ThreadM95Task+0x310>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a0a4:	4b3b      	ldr	r3, [pc, #236]	; (800a194 <ThreadM95Task+0x328>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fc f9e1 	bl	8006474 <osMutexWait>

						fm25v02_write(2*ICCID_NUMBER_REG1, 0x00); // записываем в регистры CCID сим-карты
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800a0b8:	f001 fd44 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800a0bc:	4b44      	ldr	r3, [pc, #272]	; (800a1d0 <ThreadM95Task+0x364>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800a0c6:	f001 fd3d 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800a0d0:	f001 fd38 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800a0d4:	4b3e      	ldr	r3, [pc, #248]	; (800a1d0 <ThreadM95Task+0x364>)
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800a0de:	f001 fd31 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800a0e8:	f001 fd2c 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800a0ec:	4b38      	ldr	r3, [pc, #224]	; (800a1d0 <ThreadM95Task+0x364>)
 800a0ee:	789b      	ldrb	r3, [r3, #2]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800a0f6:	f001 fd25 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800a100:	f001 fd20 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800a104:	4b32      	ldr	r3, [pc, #200]	; (800a1d0 <ThreadM95Task+0x364>)
 800a106:	78db      	ldrb	r3, [r3, #3]
 800a108:	4619      	mov	r1, r3
 800a10a:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800a10e:	f001 fd19 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800a112:	2100      	movs	r1, #0
 800a114:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800a118:	f001 fd14 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800a11c:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <ThreadM95Task+0x364>)
 800a11e:	791b      	ldrb	r3, [r3, #4]
 800a120:	4619      	mov	r1, r3
 800a122:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800a126:	f001 fd0d 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800a12a:	2100      	movs	r1, #0
 800a12c:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800a130:	f001 fd08 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800a134:	4b26      	ldr	r3, [pc, #152]	; (800a1d0 <ThreadM95Task+0x364>)
 800a136:	795b      	ldrb	r3, [r3, #5]
 800a138:	4619      	mov	r1, r3
 800a13a:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800a13e:	f001 fd01 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800a142:	2100      	movs	r1, #0
 800a144:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800a148:	f001 fcfc 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800a14c:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <ThreadM95Task+0x364>)
 800a14e:	799b      	ldrb	r3, [r3, #6]
 800a150:	4619      	mov	r1, r3
 800a152:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800a156:	f001 fcf5 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800a15a:	2100      	movs	r1, #0
 800a15c:	f242 00be 	movw	r0, #8382	; 0x20be
 800a160:	f001 fcf0 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800a164:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <ThreadM95Task+0x364>)
 800a166:	79db      	ldrb	r3, [r3, #7]
 800a168:	4619      	mov	r1, r3
 800a16a:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800a16e:	f001 fce9 	bl	800bb44 <fm25v02_write>

						osMutexRelease(Fm25v02MutexHandle);
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <ThreadM95Task+0x328>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f7fc f9ca 	bl	8006510 <osMutexRelease>
					}

					connect_state = 1;
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <ThreadM95Task+0x348>)
 800a17e:	2201      	movs	r2, #1
 800a180:	701a      	strb	r2, [r3, #0]

				break;
 800a182:	e05b      	b.n	800a23c <ThreadM95Task+0x3d0>
 800a184:	20016bac 	.word	0x20016bac
 800a188:	20018458 	.word	0x20018458
 800a18c:	20016b30 	.word	0x20016b30
 800a190:	00015f90 	.word	0x00015f90
 800a194:	20016bd8 	.word	0x20016bd8
 800a198:	20007f8c 	.word	0x20007f8c
 800a19c:	20007f8d 	.word	0x20007f8d
 800a1a0:	20007f8e 	.word	0x20007f8e
 800a1a4:	20007f8f 	.word	0x20007f8f
 800a1a8:	20007f90 	.word	0x20007f90
 800a1ac:	20007f91 	.word	0x20007f91
 800a1b0:	20007f92 	.word	0x20007f92
 800a1b4:	20007f94 	.word	0x20007f94
 800a1b8:	20016b2c 	.word	0x20016b2c
 800a1bc:	0800e160 	.word	0x0800e160
 800a1c0:	0800e164 	.word	0x0800e164
 800a1c4:	0800e174 	.word	0x0800e174
 800a1c8:	20018518 	.word	0x20018518
 800a1cc:	20018528 	.word	0x20018528
 800a1d0:	2001851c 	.word	0x2001851c

				case TCP_CLOSED:

					LED1_OFF();
 800a1d4:	f001 fd70 	bl	800bcb8 <LED1_OFF>

					if( AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800a1d8:	4b27      	ldr	r3, [pc, #156]	; (800a278 <ThreadM95Task+0x40c>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b2d9      	uxtb	r1, r3
 800a1de:	4b27      	ldr	r3, [pc, #156]	; (800a27c <ThreadM95Task+0x410>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	b2d8      	uxtb	r0, r3
 800a1e4:	4b26      	ldr	r3, [pc, #152]	; (800a280 <ThreadM95Task+0x414>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b2dc      	uxtb	r4, r3
 800a1ea:	4b26      	ldr	r3, [pc, #152]	; (800a284 <ThreadM95Task+0x418>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	4a25      	ldr	r2, [pc, #148]	; (800a288 <ThreadM95Task+0x41c>)
 800a1f2:	8812      	ldrh	r2, [r2, #0]
 800a1f4:	b292      	uxth	r2, r2
 800a1f6:	9201      	str	r2, [sp, #4]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4823      	ldr	r0, [pc, #140]	; (800a28c <ThreadM95Task+0x420>)
 800a200:	f002 f97a 	bl	800c4f8 <AT_CIPSTART>
					{
						//LED5_ON();
					}

				break;
 800a204:	e01a      	b.n	800a23c <ThreadM95Task+0x3d0>

				case PDP_DEACT:

					LED1_OFF();
 800a206:	f001 fd57 	bl	800bcb8 <LED1_OFF>

					if( AT_CIPSHUT() == AT_OK )
 800a20a:	f002 fad5 	bl	800c7b8 <AT_CIPSHUT>
					{
						//LED6_ON();
					}

				break;
 800a20e:	e015      	b.n	800a23c <ThreadM95Task+0x3d0>

				case TCP_CONNECTING:

					LED1_OFF();
 800a210:	f001 fd52 	bl	800bcb8 <LED1_OFF>

				break;
 800a214:	e012      	b.n	800a23c <ThreadM95Task+0x3d0>

				case AT_ERROR:

					if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 800a216:	f001 fe0f 	bl	800be38 <AT>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d10a      	bne.n	800a236 <ThreadM95Task+0x3ca>
					{
						if(AT()==AT_ERROR)
 800a220:	f001 fe0a 	bl	800be38 <AT>
 800a224:	4603      	mov	r3, r0
 800a226:	2b01      	cmp	r3, #1
 800a228:	d105      	bne.n	800a236 <ThreadM95Task+0x3ca>
						{
							m95_power_on();
 800a22a:	f001 fd5d 	bl	800bce8 <m95_power_on>
							HAL_Delay(3000);
 800a22e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a232:	f7f7 fb85 	bl	8001940 <HAL_Delay>
						}
					}

					if( ATE0() == AT_OK )
 800a236:	f001 fda9 	bl	800bd8c <ATE0>
					{

					}

				break;
 800a23a:	bf00      	nop

			}

			osMutexRelease(UartMutexHandle);
 800a23c:	4b14      	ldr	r3, [pc, #80]	; (800a290 <ThreadM95Task+0x424>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4618      	mov	r0, r3
 800a242:	f7fc f965 	bl	8006510 <osMutexRelease>

		}

		if( connect_state == 1 )
 800a246:	4b13      	ldr	r3, [pc, #76]	; (800a294 <ThreadM95Task+0x428>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d10e      	bne.n	800a26e <ThreadM95Task+0x402>
		{
			connect_timer++;
 800a250:	4b11      	ldr	r3, [pc, #68]	; (800a298 <ThreadM95Task+0x42c>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	3301      	adds	r3, #1
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <ThreadM95Task+0x42c>)
 800a25c:	701a      	strb	r2, [r3, #0]
			if( connect_timer >= 10)
 800a25e:	4b0e      	ldr	r3, [pc, #56]	; (800a298 <ThreadM95Task+0x42c>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b09      	cmp	r3, #9
 800a266:	d902      	bls.n	800a26e <ThreadM95Task+0x402>
			{
				connect_state = 0;
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <ThreadM95Task+0x428>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
			}
		}

		osDelay(1000);
 800a26e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a272:	f7fc f81e 	bl	80062b2 <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a276:	e62f      	b.n	8009ed8 <ThreadM95Task+0x6c>
 800a278:	20007f8c 	.word	0x20007f8c
 800a27c:	20007f8d 	.word	0x20007f8d
 800a280:	20007f8e 	.word	0x20007f8e
 800a284:	20007f8f 	.word	0x20007f8f
 800a288:	20007f92 	.word	0x20007f92
 800a28c:	0800e174 	.word	0x0800e174
 800a290:	20016b2c 	.word	0x20016b2c
 800a294:	20007f94 	.word	0x20007f94
 800a298:	20007f95 	.word	0x20007f95

0800a29c <__NVIC_SystemReset>:
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a2a0:	f3bf 8f4f 	dsb	sy
}
 800a2a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a2a6:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <__NVIC_SystemReset+0x24>)
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a2ae:	4904      	ldr	r1, [pc, #16]	; (800a2c0 <__NVIC_SystemReset+0x24>)
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <__NVIC_SystemReset+0x28>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a2b6:	f3bf 8f4f 	dsb	sy
}
 800a2ba:	bf00      	nop
    __NOP();
 800a2bc:	bf00      	nop
 800a2be:	e7fd      	b.n	800a2bc <__NVIC_SystemReset+0x20>
 800a2c0:	e000ed00 	.word	0xe000ed00
 800a2c4:	05fa0004 	.word	0x05fa0004

0800a2c8 <ThreadMainTask>:
uint8_t buffer_packet_data_flash[3000];
uint32_t calculating_packet_flash_crc;


void ThreadMainTask(void const * argument)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	//bootloader_registers.ready_download_reg = 0x0001;
	//osMutexRelease(Fm25v02MutexHandle);

	//----test--------------------------------

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a2d0:	4bbf      	ldr	r3, [pc, #764]	; (800a5d0 <ThreadMainTask+0x308>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fc f8cb 	bl	8006474 <osMutexWait>

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h1);
 800a2de:	f107 030c 	add.w	r3, r7, #12
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a2e8:	f001 fbf2 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l1);
 800a2ec:	f107 030b 	add.w	r3, r7, #11
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f240 2041 	movw	r0, #577	; 0x241
 800a2f6:	f001 fbeb 	bl	800bad0 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a2fa:	7b3b      	ldrb	r3, [r7, #12]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b21a      	sxth	r2, r3
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	b21b      	sxth	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b21b      	sxth	r3, r3
 800a308:	b29a      	uxth	r2, r3
 800a30a:	4bb2      	ldr	r3, [pc, #712]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a30c:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h1);
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	4619      	mov	r1, r3
 800a314:	f240 2042 	movw	r0, #578	; 0x242
 800a318:	f001 fbda 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l1);
 800a31c:	f107 030b 	add.w	r3, r7, #11
 800a320:	4619      	mov	r1, r3
 800a322:	f240 2043 	movw	r0, #579	; 0x243
 800a326:	f001 fbd3 	bl	800bad0 <fm25v02_read>
	bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a32a:	7b3b      	ldrb	r3, [r7, #12]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	b21a      	sxth	r2, r3
 800a330:	7afb      	ldrb	r3, [r7, #11]
 800a332:	b21b      	sxth	r3, r3
 800a334:	4313      	orrs	r3, r2
 800a336:	b21b      	sxth	r3, r3
 800a338:	b29a      	uxth	r2, r3
 800a33a:	4ba6      	ldr	r3, [pc, #664]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a33c:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h1);
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4619      	mov	r1, r3
 800a344:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a348:	f001 fbc2 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l1);
 800a34c:	f107 030b 	add.w	r3, r7, #11
 800a350:	4619      	mov	r1, r3
 800a352:	f240 2045 	movw	r0, #581	; 0x245
 800a356:	f001 fbbb 	bl	800bad0 <fm25v02_read>
	bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a35a:	7b3b      	ldrb	r3, [r7, #12]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	b21a      	sxth	r2, r3
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	b21b      	sxth	r3, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	b21b      	sxth	r3, r3
 800a368:	b29a      	uxth	r2, r3
 800a36a:	4b9a      	ldr	r3, [pc, #616]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a36c:	869a      	strh	r2, [r3, #52]	; 0x34

	osMutexRelease(Fm25v02MutexHandle);
 800a36e:	4b98      	ldr	r3, [pc, #608]	; (800a5d0 <ThreadMainTask+0x308>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7fc f8cc 	bl	8006510 <osMutexRelease>

	//----------------------------------------

	if(bootloader_registers.clear_page_on_reg != 0x0001)
 800a378:	4b96      	ldr	r3, [pc, #600]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a37a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d018      	beq.n	800a3b2 <ThreadMainTask+0xea>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр очистки страниц, чтобы при запуске не произошла очистка
 800a380:	4b93      	ldr	r3, [pc, #588]	; (800a5d0 <ThreadMainTask+0x308>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f04f 31ff 	mov.w	r1, #4294967295
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fc f873 	bl	8006474 <osMutexWait>
		fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00);
 800a38e:	2100      	movs	r1, #0
 800a390:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a394:	f001 fbd6 	bl	800bb44 <fm25v02_write>
		fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800a398:	2100      	movs	r1, #0
 800a39a:	f240 2041 	movw	r0, #577	; 0x241
 800a39e:	f001 fbd1 	bl	800bb44 <fm25v02_write>
		bootloader_registers.clear_page_on_reg = 0x0000;
 800a3a2:	4b8c      	ldr	r3, [pc, #560]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	861a      	strh	r2, [r3, #48]	; 0x30
		osMutexRelease(Fm25v02MutexHandle);
 800a3a8:	4b89      	ldr	r3, [pc, #548]	; (800a5d0 <ThreadMainTask+0x308>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fc f8af 	bl	8006510 <osMutexRelease>
	}
	if(bootloader_registers.write_array_reg != 0x0001)
 800a3b2:	4b88      	ldr	r3, [pc, #544]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a3b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d018      	beq.n	800a3ec <ThreadMainTask+0x124>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр записи в память контроллера, чтобы при запуске не произошла запись
 800a3ba:	4b85      	ldr	r3, [pc, #532]	; (800a5d0 <ThreadMainTask+0x308>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f04f 31ff 	mov.w	r1, #4294967295
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fc f856 	bl	8006474 <osMutexWait>
		fm25v02_write(2*WRITE_ARRAY_REG, 0x00);
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	f240 2042 	movw	r0, #578	; 0x242
 800a3ce:	f001 fbb9 	bl	800bb44 <fm25v02_write>
		fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	f240 2043 	movw	r0, #579	; 0x243
 800a3d8:	f001 fbb4 	bl	800bb44 <fm25v02_write>
		bootloader_registers.write_array_reg = 0x0000;
 800a3dc:	4b7d      	ldr	r3, [pc, #500]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	865a      	strh	r2, [r3, #50]	; 0x32
		osMutexRelease(Fm25v02MutexHandle);
 800a3e2:	4b7b      	ldr	r3, [pc, #492]	; (800a5d0 <ThreadMainTask+0x308>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fc f892 	bl	8006510 <osMutexRelease>
	}
	if(bootloader_registers.read_array_reg != 0x0001)
 800a3ec:	4b79      	ldr	r3, [pc, #484]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a3ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d018      	beq.n	800a426 <ThreadMainTask+0x15e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр чтения страниц, чтобы при запуске не произошло чтение
 800a3f4:	4b76      	ldr	r3, [pc, #472]	; (800a5d0 <ThreadMainTask+0x308>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fc f839 	bl	8006474 <osMutexWait>
		fm25v02_write(2*READ_ARRAY_REG, 0x00);
 800a402:	2100      	movs	r1, #0
 800a404:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a408:	f001 fb9c 	bl	800bb44 <fm25v02_write>
		fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a40c:	2100      	movs	r1, #0
 800a40e:	f240 2045 	movw	r0, #581	; 0x245
 800a412:	f001 fb97 	bl	800bb44 <fm25v02_write>
		bootloader_registers.read_array_reg = 0x0000;
 800a416:	4b6f      	ldr	r3, [pc, #444]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a418:	2200      	movs	r2, #0
 800a41a:	869a      	strh	r2, [r3, #52]	; 0x34
		osMutexRelease(Fm25v02MutexHandle);
 800a41c:	4b6c      	ldr	r3, [pc, #432]	; (800a5d0 <ThreadMainTask+0x308>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4618      	mov	r0, r3
 800a422:	f7fc f875 	bl	8006510 <osMutexRelease>
	}


	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 800a426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a42a:	f7fb ff42 	bl	80062b2 <osDelay>
	//osThreadResume(MainTaskHandle); // запускаем основной процесс
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 800a42e:	4b6a      	ldr	r3, [pc, #424]	; (800a5d8 <ThreadMainTask+0x310>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4618      	mov	r0, r3
 800a434:	f7fc fa4e 	bl	80068d4 <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 800a438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a43c:	f7fb ff39 	bl	80062b2 <osDelay>

	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a440:	4b63      	ldr	r3, [pc, #396]	; (800a5d0 <ThreadMainTask+0x308>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f04f 31ff 	mov.w	r1, #4294967295
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fc f813 	bl	8006474 <osMutexWait>

		fm25v02_read(2*WORKING_MODE_REG, &temp_reg_h1);
 800a44e:	f107 030c 	add.w	r3, r7, #12
 800a452:	4619      	mov	r1, r3
 800a454:	f240 201e 	movw	r0, #542	; 0x21e
 800a458:	f001 fb3a 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*WORKING_MODE_REG+1, &temp_reg_l1);
 800a45c:	f107 030b 	add.w	r3, r7, #11
 800a460:	4619      	mov	r1, r3
 800a462:	f240 201f 	movw	r0, #543	; 0x21f
 800a466:	f001 fb33 	bl	800bad0 <fm25v02_read>
		bootloader_registers.working_mode_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a46a:	7b3b      	ldrb	r3, [r7, #12]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	b21a      	sxth	r2, r3
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	b21b      	sxth	r3, r3
 800a474:	4313      	orrs	r3, r2
 800a476:	b21b      	sxth	r3, r3
 800a478:	b29a      	uxth	r2, r3
 800a47a:	4b56      	ldr	r3, [pc, #344]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a47c:	839a      	strh	r2, [r3, #28]

		fm25v02_read(2*READY_DOWNLOAD_REG, &temp_reg_h1);
 800a47e:	f107 030c 	add.w	r3, r7, #12
 800a482:	4619      	mov	r1, r3
 800a484:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a488:	f001 fb22 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*READY_DOWNLOAD_REG+1, &temp_reg_l1);
 800a48c:	f107 030b 	add.w	r3, r7, #11
 800a490:	4619      	mov	r1, r3
 800a492:	f240 2021 	movw	r0, #545	; 0x221
 800a496:	f001 fb1b 	bl	800bad0 <fm25v02_read>
		bootloader_registers.ready_download_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a49a:	7b3b      	ldrb	r3, [r7, #12]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	b21a      	sxth	r2, r3
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	b21b      	sxth	r3, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	4b4a      	ldr	r3, [pc, #296]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a4ac:	83da      	strh	r2, [r3, #30]

		fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h1);
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f240 2042 	movw	r0, #578	; 0x242
 800a4b8:	f001 fb0a 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l1);
 800a4bc:	f107 030b 	add.w	r3, r7, #11
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f240 2043 	movw	r0, #579	; 0x243
 800a4c6:	f001 fb03 	bl	800bad0 <fm25v02_read>
		bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a4ca:	7b3b      	ldrb	r3, [r7, #12]
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	b21a      	sxth	r2, r3
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	b21b      	sxth	r3, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	b21b      	sxth	r3, r3
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	4b3e      	ldr	r3, [pc, #248]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a4dc:	865a      	strh	r2, [r3, #50]	; 0x32

		fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h1);
 800a4de:	f107 030c 	add.w	r3, r7, #12
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a4e8:	f001 faf2 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l1);
 800a4ec:	f107 030b 	add.w	r3, r7, #11
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	f240 2045 	movw	r0, #581	; 0x245
 800a4f6:	f001 faeb 	bl	800bad0 <fm25v02_read>
		bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a4fa:	7b3b      	ldrb	r3, [r7, #12]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	b21a      	sxth	r2, r3
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	b21b      	sxth	r3, r3
 800a504:	4313      	orrs	r3, r2
 800a506:	b21b      	sxth	r3, r3
 800a508:	b29a      	uxth	r2, r3
 800a50a:	4b32      	ldr	r3, [pc, #200]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a50c:	869a      	strh	r2, [r3, #52]	; 0x34

		fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h1);
 800a50e:	f107 030c 	add.w	r3, r7, #12
 800a512:	4619      	mov	r1, r3
 800a514:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a518:	f001 fada 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l1);
 800a51c:	f107 030b 	add.w	r3, r7, #11
 800a520:	4619      	mov	r1, r3
 800a522:	f240 2041 	movw	r0, #577	; 0x241
 800a526:	f001 fad3 	bl	800bad0 <fm25v02_read>
		bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a52a:	7b3b      	ldrb	r3, [r7, #12]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	b21a      	sxth	r2, r3
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	b21b      	sxth	r3, r3
 800a534:	4313      	orrs	r3, r2
 800a536:	b21b      	sxth	r3, r3
 800a538:	b29a      	uxth	r2, r3
 800a53a:	4b26      	ldr	r3, [pc, #152]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a53c:	861a      	strh	r2, [r3, #48]	; 0x30

		fm25v02_read(2*JUMP_ATTEMPT_REG, &temp_reg_h1);
 800a53e:	f107 030c 	add.w	r3, r7, #12
 800a542:	4619      	mov	r1, r3
 800a544:	f44f 7009 	mov.w	r0, #548	; 0x224
 800a548:	f001 fac2 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*JUMP_ATTEMPT_REG+1, &temp_reg_l1);
 800a54c:	f107 030b 	add.w	r3, r7, #11
 800a550:	4619      	mov	r1, r3
 800a552:	f240 2025 	movw	r0, #549	; 0x225
 800a556:	f001 fabb 	bl	800bad0 <fm25v02_read>
		bootloader_registers.jump_attempt_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a55a:	7b3b      	ldrb	r3, [r7, #12]
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	b21a      	sxth	r2, r3
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	b21b      	sxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b21b      	sxth	r3, r3
 800a568:	b29a      	uxth	r2, r3
 800a56a:	4b1a      	ldr	r3, [pc, #104]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a56c:	845a      	strh	r2, [r3, #34]	; 0x22

		fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &temp_reg_h1);
 800a56e:	f107 030c 	add.w	r3, r7, #12
 800a572:	4619      	mov	r1, r3
 800a574:	f240 2026 	movw	r0, #550	; 0x226
 800a578:	f001 faaa 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &temp_reg_l1);
 800a57c:	f107 030b 	add.w	r3, r7, #11
 800a580:	4619      	mov	r1, r3
 800a582:	f240 2027 	movw	r0, #551	; 0x227
 800a586:	f001 faa3 	bl	800bad0 <fm25v02_read>
		bootloader_registers.max_jump_attempt_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a58a:	7b3b      	ldrb	r3, [r7, #12]
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	b21a      	sxth	r2, r3
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	b21b      	sxth	r3, r3
 800a594:	4313      	orrs	r3, r2
 800a596:	b21b      	sxth	r3, r3
 800a598:	b29a      	uxth	r2, r3
 800a59a:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <ThreadMainTask+0x30c>)
 800a59c:	849a      	strh	r2, [r3, #36]	; 0x24

		fm25v02_read(2*RESET_CONTROL_REG, &temp_reg_h1);
 800a59e:	f107 030c 	add.w	r3, r7, #12
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f242 105a 	movw	r0, #8538	; 0x215a
 800a5a8:	f001 fa92 	bl	800bad0 <fm25v02_read>
		fm25v02_read(2*RESET_CONTROL_REG+1, &temp_reg_l1);
 800a5ac:	f107 030b 	add.w	r3, r7, #11
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f242 105b 	movw	r0, #8539	; 0x215b
 800a5b6:	f001 fa8b 	bl	800bad0 <fm25v02_read>
		control_registers.reset_control_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a5ba:	7b3b      	ldrb	r3, [r7, #12]
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	b21a      	sxth	r2, r3
 800a5c0:	7afb      	ldrb	r3, [r7, #11]
 800a5c2:	b21b      	sxth	r3, r3
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	b21b      	sxth	r3, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <ThreadMainTask+0x314>)
 800a5cc:	871a      	strh	r2, [r3, #56]	; 0x38
 800a5ce:	e007      	b.n	800a5e0 <ThreadMainTask+0x318>
 800a5d0:	20016bd8 	.word	0x20016bd8
 800a5d4:	20019f98 	.word	0x20019f98
 800a5d8:	20016bac 	.word	0x20016bac
 800a5dc:	2001a0c4 	.word	0x2001a0c4

		osMutexRelease(Fm25v02MutexHandle);
 800a5e0:	4bb2      	ldr	r3, [pc, #712]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fb ff93 	bl	8006510 <osMutexRelease>



		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800a5ea:	4bb1      	ldr	r3, [pc, #708]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a5ec:	8b9b      	ldrh	r3, [r3, #28]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	f040 833e 	bne.w	800ac70 <ThreadMainTask+0x9a8>
		{

			//if(bootloader_registers.ready_download_reg == 0x0000)
			if(bootloader_registers.ready_download_reg != 0x0001)
 800a5f4:	4bae      	ldr	r3, [pc, #696]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a5f6:	8bdb      	ldrh	r3, [r3, #30]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d018      	beq.n	800a62e <ThreadMainTask+0x366>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a5fc:	4bab      	ldr	r3, [pc, #684]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f04f 31ff 	mov.w	r1, #4294967295
 800a604:	4618      	mov	r0, r3
 800a606:	f7fb ff35 	bl	8006474 <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // устанавливаем регистр готовности к загрузке прошивки
 800a60a:	2100      	movs	r1, #0
 800a60c:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a610:	f001 fa98 	bl	800bb44 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x01);
 800a614:	2101      	movs	r1, #1
 800a616:	f240 2021 	movw	r0, #545	; 0x221
 800a61a:	f001 fa93 	bl	800bb44 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0001;
 800a61e:	4ba4      	ldr	r3, [pc, #656]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a620:	2201      	movs	r2, #1
 800a622:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800a624:	4ba1      	ldr	r3, [pc, #644]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fb ff71 	bl	8006510 <osMutexRelease>
			}

			switch(bootloader_registers.write_array_reg) // запись массива байт в память контроллера
 800a62e:	4ba0      	ldr	r3, [pc, #640]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 8181 	beq.w	800a93a <ThreadMainTask+0x672>
 800a638:	2b01      	cmp	r3, #1
 800a63a:	f040 8181 	bne.w	800a940 <ThreadMainTask+0x678>
			{
				case(1):

					//address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a63e:	4b9b      	ldr	r3, [pc, #620]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f04f 31ff 	mov.w	r1, #4294967295
 800a646:	4618      	mov	r0, r3
 800a648:	f7fb ff14 	bl	8006474 <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a64c:	f107 030c 	add.w	r3, r7, #12
 800a650:	4619      	mov	r1, r3
 800a652:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a656:	f001 fa3b 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a65a:	f107 030b 	add.w	r3, r7, #11
 800a65e:	4619      	mov	r1, r3
 800a660:	f240 202d 	movw	r0, #557	; 0x22d
 800a664:	f001 fa34 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a668:	7b3b      	ldrb	r3, [r7, #12]
 800a66a:	021b      	lsls	r3, r3, #8
 800a66c:	b21a      	sxth	r2, r3
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	b21b      	sxth	r3, r3
 800a672:	4313      	orrs	r3, r2
 800a674:	b21b      	sxth	r3, r3
 800a676:	b29a      	uxth	r2, r3
 800a678:	4b8d      	ldr	r3, [pc, #564]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a67a:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4619      	mov	r1, r3
 800a682:	f240 202e 	movw	r0, #558	; 0x22e
 800a686:	f001 fa23 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a68a:	f107 030b 	add.w	r3, r7, #11
 800a68e:	4619      	mov	r1, r3
 800a690:	f240 202f 	movw	r0, #559	; 0x22f
 800a694:	f001 fa1c 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a698:	7b3b      	ldrb	r3, [r7, #12]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	b21a      	sxth	r2, r3
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	b21b      	sxth	r3, r3
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	b21b      	sxth	r3, r3
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	4b81      	ldr	r3, [pc, #516]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a6aa:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a6ac:	f107 030c 	add.w	r3, r7, #12
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f240 2046 	movw	r0, #582	; 0x246
 800a6b6:	f001 fa0b 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a6ba:	f107 030b 	add.w	r3, r7, #11
 800a6be:	4619      	mov	r1, r3
 800a6c0:	f240 2047 	movw	r0, #583	; 0x247
 800a6c4:	f001 fa04 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a6c8:	7b3b      	ldrb	r3, [r7, #12]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	b21a      	sxth	r2, r3
 800a6ce:	7afb      	ldrb	r3, [r7, #11]
 800a6d0:	b21b      	sxth	r3, r3
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	b21b      	sxth	r3, r3
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	4b75      	ldr	r3, [pc, #468]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a6da:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a6e6:	f001 f9f3 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a6ea:	f107 030b 	add.w	r3, r7, #11
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	f240 2049 	movw	r0, #585	; 0x249
 800a6f4:	f001 f9ec 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a6f8:	7b3b      	ldrb	r3, [r7, #12]
 800a6fa:	021b      	lsls	r3, r3, #8
 800a6fc:	b21a      	sxth	r2, r3
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	b21b      	sxth	r3, r3
 800a702:	4313      	orrs	r3, r2
 800a704:	b21b      	sxth	r3, r3
 800a706:	b29a      	uxth	r2, r3
 800a708:	4b69      	ldr	r3, [pc, #420]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a70a:	871a      	strh	r2, [r3, #56]	; 0x38

					fm25v02_read(2*PACKET_CRC_HIGH_REG, &temp_reg_h1);
 800a70c:	f107 030c 	add.w	r3, r7, #12
 800a710:	4619      	mov	r1, r3
 800a712:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a716:	f001 f9db 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &temp_reg_l1);
 800a71a:	f107 030b 	add.w	r3, r7, #11
 800a71e:	4619      	mov	r1, r3
 800a720:	f240 204d 	movw	r0, #589	; 0x24d
 800a724:	f001 f9d4 	bl	800bad0 <fm25v02_read>
					bootloader_registers.packet_crc_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a728:	7b3b      	ldrb	r3, [r7, #12]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	b21a      	sxth	r2, r3
 800a72e:	7afb      	ldrb	r3, [r7, #11]
 800a730:	b21b      	sxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b21b      	sxth	r3, r3
 800a736:	b29a      	uxth	r2, r3
 800a738:	4b5d      	ldr	r3, [pc, #372]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a73a:	879a      	strh	r2, [r3, #60]	; 0x3c

					fm25v02_read(2*PACKET_CRC_LOW_REG, &temp_reg_h1);
 800a73c:	f107 030c 	add.w	r3, r7, #12
 800a740:	4619      	mov	r1, r3
 800a742:	f240 204e 	movw	r0, #590	; 0x24e
 800a746:	f001 f9c3 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_LOW_REG+1, &temp_reg_l1);
 800a74a:	f107 030b 	add.w	r3, r7, #11
 800a74e:	4619      	mov	r1, r3
 800a750:	f240 204f 	movw	r0, #591	; 0x24f
 800a754:	f001 f9bc 	bl	800bad0 <fm25v02_read>
					bootloader_registers.packet_crc_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a758:	7b3b      	ldrb	r3, [r7, #12]
 800a75a:	021b      	lsls	r3, r3, #8
 800a75c:	b21a      	sxth	r2, r3
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	b21b      	sxth	r3, r3
 800a762:	4313      	orrs	r3, r2
 800a764:	b21b      	sxth	r3, r3
 800a766:	b29a      	uxth	r2, r3
 800a768:	4b51      	ldr	r3, [pc, #324]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a76a:	87da      	strh	r2, [r3, #62]	; 0x3e

					fm25v02_read(2*BYTE_QUANTITY_REG, &temp_reg_h1);
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	4619      	mov	r1, r3
 800a772:	f240 204a 	movw	r0, #586	; 0x24a
 800a776:	f001 f9ab 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*BYTE_QUANTITY_REG+1, &temp_reg_l1);
 800a77a:	f107 030b 	add.w	r3, r7, #11
 800a77e:	4619      	mov	r1, r3
 800a780:	f240 204b 	movw	r0, #587	; 0x24b
 800a784:	f001 f9a4 	bl	800bad0 <fm25v02_read>
					bootloader_registers.byte_quantity_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a788:	7b3b      	ldrb	r3, [r7, #12]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	b21a      	sxth	r2, r3
 800a78e:	7afb      	ldrb	r3, [r7, #11]
 800a790:	b21b      	sxth	r3, r3
 800a792:	4313      	orrs	r3, r2
 800a794:	b21b      	sxth	r3, r3
 800a796:	b29a      	uxth	r2, r3
 800a798:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a79a:	875a      	strh	r2, [r3, #58]	; 0x3a

					osMutexRelease(Fm25v02MutexHandle);
 800a79c:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fb feb5 	bl	8006510 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера
 800a7a6:	4b42      	ldr	r3, [pc, #264]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7aa:	061a      	lsls	r2, r3, #24
 800a7ac:	4b40      	ldr	r3, [pc, #256]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7b0:	041b      	lsls	r3, r3, #16
 800a7b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	4b3d      	ldr	r3, [pc, #244]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7bc:	021b      	lsls	r3, r3, #8
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	4b3b      	ldr	r3, [pc, #236]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	4a3a      	ldr	r2, [pc, #232]	; (800a8b4 <ThreadMainTask+0x5ec>)
 800a7cc:	6013      	str	r3, [r2, #0]

					packet_crc = (((bootloader_registers.packet_crc_low_reg)<<8)&0xFF00) | ((bootloader_registers.packet_crc_high_reg)&0x00FF); // получаем значение контрольной суммы из регистров контрольной суммы пакета
 800a7ce:	4b38      	ldr	r3, [pc, #224]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	b21a      	sxth	r2, r3
 800a7d6:	4b36      	ldr	r3, [pc, #216]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a7d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a7da:	b21b      	sxth	r3, r3
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b21b      	sxth	r3, r3
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	4b34      	ldr	r3, [pc, #208]	; (800a8b8 <ThreadMainTask+0x5f0>)
 800a7e8:	801a      	strh	r2, [r3, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	82fb      	strh	r3, [r7, #22]
 800a7ee:	e020      	b.n	800a832 <ThreadMainTask+0x56a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a7f0:	4b2e      	ldr	r3, [pc, #184]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fb fe3b 	bl	8006474 <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a7fe:	8afb      	ldrh	r3, [r7, #22]
 800a800:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a804:	b29b      	uxth	r3, r3
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3301      	adds	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	f107 020d 	add.w	r2, r7, #13
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f001 f95b 	bl	800bad0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <ThreadMainTask+0x5e4>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb fe76 	bl	8006510 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a824:	8afb      	ldrh	r3, [r7, #22]
 800a826:	7b79      	ldrb	r1, [r7, #13]
 800a828:	4a24      	ldr	r2, [pc, #144]	; (800a8bc <ThreadMainTask+0x5f4>)
 800a82a:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a82c:	8afb      	ldrh	r3, [r7, #22]
 800a82e:	3301      	adds	r3, #1
 800a830:	82fb      	strh	r3, [r7, #22]
 800a832:	4b1f      	ldr	r3, [pc, #124]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a834:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a836:	8afa      	ldrh	r2, [r7, #22]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d3d9      	bcc.n	800a7f0 <ThreadMainTask+0x528>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a83c:	4b1c      	ldr	r3, [pc, #112]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a83e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a840:	4619      	mov	r1, r3
 800a842:	481e      	ldr	r0, [pc, #120]	; (800a8bc <ThreadMainTask+0x5f4>)
 800a844:	f002 fef0 	bl	800d628 <CRC16>
 800a848:	4603      	mov	r3, r0
 800a84a:	4a1d      	ldr	r2, [pc, #116]	; (800a8c0 <ThreadMainTask+0x5f8>)
 800a84c:	6013      	str	r3, [r2, #0]

					if( packet_crc == calculating_packet_crc) // если контрольная сумма из регистров контрольной суммы пакета совпадает с расчетной контрольной суммой данных из регистров с данными
 800a84e:	4b1a      	ldr	r3, [pc, #104]	; (800a8b8 <ThreadMainTask+0x5f0>)
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <ThreadMainTask+0x5f8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d170      	bne.n	800a93e <ThreadMainTask+0x676>
					{
						//osThreadSuspendAll();

						taskENTER_CRITICAL();
 800a85c:	f7fe fffa 	bl	8009854 <vPortEnterCritical>

						HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a860:	f7f7 fe5a 	bl	8002518 <HAL_FLASH_Unlock>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a864:	2300      	movs	r3, #0
 800a866:	82bb      	strh	r3, [r7, #20]
 800a868:	e013      	b.n	800a892 <ThreadMainTask+0x5ca>
						{
							//if( *( (uint32_t*)(address_to_read_write+i) ) == 0xFF) // тестовое услови для проверки значения байта 0xFF перед тем как начать запись
							//{
								while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address_to_read_write+i, buffer_packet_data[i]) != HAL_OK ) // ничего не делаем пока не выполнится запись в память контроллера
 800a86a:	bf00      	nop
 800a86c:	8aba      	ldrh	r2, [r7, #20]
 800a86e:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <ThreadMainTask+0x5ec>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	18d1      	adds	r1, r2, r3
 800a874:	8abb      	ldrh	r3, [r7, #20]
 800a876:	4a11      	ldr	r2, [pc, #68]	; (800a8bc <ThreadMainTask+0x5f4>)
 800a878:	5cd3      	ldrb	r3, [r2, r3]
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	f04f 0300 	mov.w	r3, #0
 800a880:	2000      	movs	r0, #0
 800a882:	f7f7 fdf5 	bl	8002470 <HAL_FLASH_Program>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1ef      	bne.n	800a86c <ThreadMainTask+0x5a4>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a88c:	8abb      	ldrh	r3, [r7, #20]
 800a88e:	3301      	adds	r3, #1
 800a890:	82bb      	strh	r3, [r7, #20]
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <ThreadMainTask+0x5e8>)
 800a894:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a896:	8aba      	ldrh	r2, [r7, #20]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d3e6      	bcc.n	800a86a <ThreadMainTask+0x5a2>

								}
							//}

						}
						HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800a89c:	f7f7 fe5e 	bl	800255c <HAL_FLASH_Lock>

						taskEXIT_CRITICAL();
 800a8a0:	f7ff f808 	bl	80098b4 <vPortExitCritical>

						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	827b      	strh	r3, [r7, #18]
 800a8a8:	e018      	b.n	800a8dc <ThreadMainTask+0x614>
 800a8aa:	bf00      	nop
 800a8ac:	20016bd8 	.word	0x20016bd8
 800a8b0:	20019f98 	.word	0x20019f98
 800a8b4:	200185cc 	.word	0x200185cc
 800a8b8:	20019d54 	.word	0x20019d54
 800a8bc:	200185e0 	.word	0x200185e0
 800a8c0:	20019d70 	.word	0x20019d70
						{
							buffer_packet_data_flash[i] = *((uint32_t*)(address_to_read_write+i));
 800a8c4:	8a7a      	ldrh	r2, [r7, #18]
 800a8c6:	4b7b      	ldr	r3, [pc, #492]	; (800aab4 <ThreadMainTask+0x7ec>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	8a7b      	ldrh	r3, [r7, #18]
 800a8d0:	b2d1      	uxtb	r1, r2
 800a8d2:	4a79      	ldr	r2, [pc, #484]	; (800aab8 <ThreadMainTask+0x7f0>)
 800a8d4:	54d1      	strb	r1, [r2, r3]
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a8d6:	8a7b      	ldrh	r3, [r7, #18]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	827b      	strh	r3, [r7, #18]
 800a8dc:	4b77      	ldr	r3, [pc, #476]	; (800aabc <ThreadMainTask+0x7f4>)
 800a8de:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a8e0:	8a7a      	ldrh	r2, [r7, #18]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d3ee      	bcc.n	800a8c4 <ThreadMainTask+0x5fc>
						}

						calculating_packet_flash_crc = CRC16( (unsigned char*)(&buffer_packet_data_flash[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы записанных данных в память микроконтроллера
 800a8e6:	4b75      	ldr	r3, [pc, #468]	; (800aabc <ThreadMainTask+0x7f4>)
 800a8e8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4872      	ldr	r0, [pc, #456]	; (800aab8 <ThreadMainTask+0x7f0>)
 800a8ee:	f002 fe9b 	bl	800d628 <CRC16>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4a72      	ldr	r2, [pc, #456]	; (800aac0 <ThreadMainTask+0x7f8>)
 800a8f6:	6013      	str	r3, [r2, #0]

						if( packet_crc == calculating_packet_flash_crc)
 800a8f8:	4b72      	ldr	r3, [pc, #456]	; (800aac4 <ThreadMainTask+0x7fc>)
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4b70      	ldr	r3, [pc, #448]	; (800aac0 <ThreadMainTask+0x7f8>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d11b      	bne.n	800a93e <ThreadMainTask+0x676>
						{

						//osThreadResumeAll();

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a906:	4b70      	ldr	r3, [pc, #448]	; (800aac8 <ThreadMainTask+0x800>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f04f 31ff 	mov.w	r1, #4294967295
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fb fdb0 	bl	8006474 <osMutexWait>

						fm25v02_write(2*WRITE_ARRAY_REG, 0x00); // обнуляем регистр и переменную записи массива
 800a914:	2100      	movs	r1, #0
 800a916:	f240 2042 	movw	r0, #578	; 0x242
 800a91a:	f001 f913 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a91e:	2100      	movs	r1, #0
 800a920:	f240 2043 	movw	r0, #579	; 0x243
 800a924:	f001 f90e 	bl	800bb44 <fm25v02_write>
						bootloader_registers.write_array_reg = 0x0000;
 800a928:	4b64      	ldr	r3, [pc, #400]	; (800aabc <ThreadMainTask+0x7f4>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	865a      	strh	r2, [r3, #50]	; 0x32

						osMutexRelease(Fm25v02MutexHandle);
 800a92e:	4b66      	ldr	r3, [pc, #408]	; (800aac8 <ThreadMainTask+0x800>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f7fb fdec 	bl	8006510 <osMutexRelease>

						}

					}

				break;
 800a938:	e001      	b.n	800a93e <ThreadMainTask+0x676>

					//LED3_OFF();
					//LED4_OFF();
					//LED5_OFF();

				break;
 800a93a:	bf00      	nop
 800a93c:	e000      	b.n	800a940 <ThreadMainTask+0x678>
				break;
 800a93e:	bf00      	nop
			}

			switch(bootloader_registers.read_array_reg) // чтение массива из памяти контроллера
 800a940:	4b5e      	ldr	r3, [pc, #376]	; (800aabc <ThreadMainTask+0x7f4>)
 800a942:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a944:	2b01      	cmp	r3, #1
 800a946:	f040 8125 	bne.w	800ab94 <ThreadMainTask+0x8cc>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a94a:	4b5f      	ldr	r3, [pc, #380]	; (800aac8 <ThreadMainTask+0x800>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f04f 31ff 	mov.w	r1, #4294967295
 800a952:	4618      	mov	r0, r3
 800a954:	f7fb fd8e 	bl	8006474 <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a958:	f107 030c 	add.w	r3, r7, #12
 800a95c:	4619      	mov	r1, r3
 800a95e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a962:	f001 f8b5 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a966:	f107 030b 	add.w	r3, r7, #11
 800a96a:	4619      	mov	r1, r3
 800a96c:	f240 202d 	movw	r0, #557	; 0x22d
 800a970:	f001 f8ae 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a974:	7b3b      	ldrb	r3, [r7, #12]
 800a976:	021b      	lsls	r3, r3, #8
 800a978:	b21a      	sxth	r2, r3
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	b21b      	sxth	r3, r3
 800a97e:	4313      	orrs	r3, r2
 800a980:	b21b      	sxth	r3, r3
 800a982:	b29a      	uxth	r2, r3
 800a984:	4b4d      	ldr	r3, [pc, #308]	; (800aabc <ThreadMainTask+0x7f4>)
 800a986:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	4619      	mov	r1, r3
 800a98e:	f240 202e 	movw	r0, #558	; 0x22e
 800a992:	f001 f89d 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a996:	f107 030b 	add.w	r3, r7, #11
 800a99a:	4619      	mov	r1, r3
 800a99c:	f240 202f 	movw	r0, #559	; 0x22f
 800a9a0:	f001 f896 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a9a4:	7b3b      	ldrb	r3, [r7, #12]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	b21a      	sxth	r2, r3
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	b21b      	sxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b21b      	sxth	r3, r3
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	4b41      	ldr	r3, [pc, #260]	; (800aabc <ThreadMainTask+0x7f4>)
 800a9b6:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a9b8:	f107 030c 	add.w	r3, r7, #12
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f240 2046 	movw	r0, #582	; 0x246
 800a9c2:	f001 f885 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a9c6:	f107 030b 	add.w	r3, r7, #11
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	f240 2047 	movw	r0, #583	; 0x247
 800a9d0:	f001 f87e 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a9d4:	7b3b      	ldrb	r3, [r7, #12]
 800a9d6:	021b      	lsls	r3, r3, #8
 800a9d8:	b21a      	sxth	r2, r3
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	b21b      	sxth	r3, r3
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	4b35      	ldr	r3, [pc, #212]	; (800aabc <ThreadMainTask+0x7f4>)
 800a9e6:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a9e8:	f107 030c 	add.w	r3, r7, #12
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a9f2:	f001 f86d 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a9f6:	f107 030b 	add.w	r3, r7, #11
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f240 2049 	movw	r0, #585	; 0x249
 800aa00:	f001 f866 	bl	800bad0 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800aa04:	7b3b      	ldrb	r3, [r7, #12]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	b21a      	sxth	r2, r3
 800aa0a:	7afb      	ldrb	r3, [r7, #11]
 800aa0c:	b21b      	sxth	r3, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b21b      	sxth	r3, r3
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	4b29      	ldr	r3, [pc, #164]	; (800aabc <ThreadMainTask+0x7f4>)
 800aa16:	871a      	strh	r2, [r3, #56]	; 0x38

					osMutexRelease(Fm25v02MutexHandle);
 800aa18:	4b2b      	ldr	r3, [pc, #172]	; (800aac8 <ThreadMainTask+0x800>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fb fd77 	bl	8006510 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для чтения данных из памяти контроллера
 800aa22:	4b26      	ldr	r3, [pc, #152]	; (800aabc <ThreadMainTask+0x7f4>)
 800aa24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa26:	061a      	lsls	r2, r3, #24
 800aa28:	4b24      	ldr	r3, [pc, #144]	; (800aabc <ThreadMainTask+0x7f4>)
 800aa2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa2c:	041b      	lsls	r3, r3, #16
 800aa2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa32:	431a      	orrs	r2, r3
 800aa34:	4b21      	ldr	r3, [pc, #132]	; (800aabc <ThreadMainTask+0x7f4>)
 800aa36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	4b1f      	ldr	r3, [pc, #124]	; (800aabc <ThreadMainTask+0x7f4>)
 800aa40:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	4313      	orrs	r3, r2
 800aa46:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <ThreadMainTask+0x7ec>)
 800aa48:	6013      	str	r3, [r2, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	823b      	strh	r3, [r7, #16]
 800aa4e:	e029      	b.n	800aaa4 <ThreadMainTask+0x7dc>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aa50:	4b1d      	ldr	r3, [pc, #116]	; (800aac8 <ThreadMainTask+0x800>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f04f 31ff 	mov.w	r1, #4294967295
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fb fd0b 	bl	8006474 <osMutexWait>

						fm25v02_write(2*(PACKET_DATA_0_REG+i), 0x00);
 800aa5e:	8a3b      	ldrh	r3, [r7, #16]
 800aa60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 f869 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*(PACKET_DATA_0_REG+i)+1, *( (uint32_t*)(address_to_read_write+i) ) );
 800aa72:	8a3b      	ldrh	r3, [r7, #16]
 800aa74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b298      	uxth	r0, r3
 800aa82:	8a3a      	ldrh	r2, [r7, #16]
 800aa84:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <ThreadMainTask+0x7ec>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4413      	add	r3, r2
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	4619      	mov	r1, r3
 800aa90:	f001 f858 	bl	800bb44 <fm25v02_write>

						osMutexRelease(Fm25v02MutexHandle);
 800aa94:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <ThreadMainTask+0x800>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fb fd39 	bl	8006510 <osMutexRelease>
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800aa9e:	8a3b      	ldrh	r3, [r7, #16]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	823b      	strh	r3, [r7, #16]
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <ThreadMainTask+0x7f4>)
 800aaa6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aaa8:	8a3a      	ldrh	r2, [r7, #16]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d3d0      	bcc.n	800aa50 <ThreadMainTask+0x788>
					}

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800aaae:	2300      	movs	r3, #0
 800aab0:	81fb      	strh	r3, [r7, #14]
 800aab2:	e02c      	b.n	800ab0e <ThreadMainTask+0x846>
 800aab4:	200185cc 	.word	0x200185cc
 800aab8:	20019198 	.word	0x20019198
 800aabc:	20019f98 	.word	0x20019f98
 800aac0:	20019d78 	.word	0x20019d78
 800aac4:	20019d54 	.word	0x20019d54
 800aac8:	20016bd8 	.word	0x20016bd8
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aacc:	4ba5      	ldr	r3, [pc, #660]	; (800ad64 <ThreadMainTask+0xa9c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f04f 31ff 	mov.w	r1, #4294967295
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fb fccd 	bl	8006474 <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800aada:	89fb      	ldrh	r3, [r7, #14]
 800aadc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3301      	adds	r3, #1
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	f107 020d 	add.w	r2, r7, #13
 800aaee:	4611      	mov	r1, r2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 ffed 	bl	800bad0 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800aaf6:	4b9b      	ldr	r3, [pc, #620]	; (800ad64 <ThreadMainTask+0xa9c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fb fd08 	bl	8006510 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800ab00:	89fb      	ldrh	r3, [r7, #14]
 800ab02:	7b79      	ldrb	r1, [r7, #13]
 800ab04:	4a98      	ldr	r2, [pc, #608]	; (800ad68 <ThreadMainTask+0xaa0>)
 800ab06:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800ab08:	89fb      	ldrh	r3, [r7, #14]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	81fb      	strh	r3, [r7, #14]
 800ab0e:	4b97      	ldr	r3, [pc, #604]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ab10:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab12:	89fa      	ldrh	r2, [r7, #14]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d3d9      	bcc.n	800aacc <ThreadMainTask+0x804>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800ab18:	4b94      	ldr	r3, [pc, #592]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ab1a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4892      	ldr	r0, [pc, #584]	; (800ad68 <ThreadMainTask+0xaa0>)
 800ab20:	f002 fd82 	bl	800d628 <CRC16>
 800ab24:	4603      	mov	r3, r0
 800ab26:	4a92      	ldr	r2, [pc, #584]	; (800ad70 <ThreadMainTask+0xaa8>)
 800ab28:	6013      	str	r3, [r2, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ab2a:	4b8e      	ldr	r3, [pc, #568]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fb fc9e 	bl	8006474 <osMutexWait>

					fm25v02_write(2*PACKET_CRC_HIGH_REG, 0x00);
 800ab38:	2100      	movs	r1, #0
 800ab3a:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800ab3e:	f001 f801 	bl	800bb44 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_HIGH_REG+1, (uint8_t)calculating_packet_crc ); //записываем в регистр старший байт контрольной суммы пакета
 800ab42:	4b8b      	ldr	r3, [pc, #556]	; (800ad70 <ThreadMainTask+0xaa8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f240 204d 	movw	r0, #589	; 0x24d
 800ab4e:	f000 fff9 	bl	800bb44 <fm25v02_write>

					fm25v02_write(2*PACKET_CRC_LOW_REG, 0x00);
 800ab52:	2100      	movs	r1, #0
 800ab54:	f240 204e 	movw	r0, #590	; 0x24e
 800ab58:	f000 fff4 	bl	800bb44 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_LOW_REG+1, (uint8_t)(calculating_packet_crc>>8) ); //записываем в регистр младший байт контрольной суммы пакета
 800ab5c:	4b84      	ldr	r3, [pc, #528]	; (800ad70 <ThreadMainTask+0xaa8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	4619      	mov	r1, r3
 800ab66:	f240 204f 	movw	r0, #591	; 0x24f
 800ab6a:	f000 ffeb 	bl	800bb44 <fm25v02_write>

					fm25v02_write(2*READ_ARRAY_REG, 0x00); // обнуляем регистр и переменную чтения массива
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f44f 7011 	mov.w	r0, #580	; 0x244
 800ab74:	f000 ffe6 	bl	800bb44 <fm25v02_write>
					fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800ab78:	2100      	movs	r1, #0
 800ab7a:	f240 2045 	movw	r0, #581	; 0x245
 800ab7e:	f000 ffe1 	bl	800bb44 <fm25v02_write>
					bootloader_registers.read_array_reg = 0x0000;
 800ab82:	4b7a      	ldr	r3, [pc, #488]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800ab88:	4b76      	ldr	r3, [pc, #472]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fb fcbf 	bl	8006510 <osMutexRelease>

				break;
 800ab92:	bf00      	nop
			}

			switch(bootloader_registers.clear_page_on_reg) // очистка указанной страницы памяти контроллера
 800ab94:	4b75      	ldr	r3, [pc, #468]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ab96:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	f040 809e 	bne.w	800acda <ThreadMainTask+0xa12>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ab9e:	4b71      	ldr	r3, [pc, #452]	; (800ad64 <ThreadMainTask+0xa9c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f04f 31ff 	mov.w	r1, #4294967295
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fb fc64 	bl	8006474 <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &temp_reg_h1);
 800abac:	f107 030c 	add.w	r3, r7, #12
 800abb0:	4619      	mov	r1, r3
 800abb2:	f240 203e 	movw	r0, #574	; 0x23e
 800abb6:	f000 ff8b 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &temp_reg_l1);
 800abba:	f107 030b 	add.w	r3, r7, #11
 800abbe:	4619      	mov	r1, r3
 800abc0:	f240 203f 	movw	r0, #575	; 0x23f
 800abc4:	f000 ff84 	bl	800bad0 <fm25v02_read>
					bootloader_registers.clear_page_number_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800abc8:	7b3b      	ldrb	r3, [r7, #12]
 800abca:	021b      	lsls	r3, r3, #8
 800abcc:	b21a      	sxth	r2, r3
 800abce:	7afb      	ldrb	r3, [r7, #11]
 800abd0:	b21b      	sxth	r3, r3
 800abd2:	4313      	orrs	r3, r2
 800abd4:	b21b      	sxth	r3, r3
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	4b64      	ldr	r3, [pc, #400]	; (800ad6c <ThreadMainTask+0xaa4>)
 800abda:	85da      	strh	r2, [r3, #46]	; 0x2e

					osMutexRelease(Fm25v02MutexHandle);
 800abdc:	4b61      	ldr	r3, [pc, #388]	; (800ad64 <ThreadMainTask+0xa9c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7fb fc95 	bl	8006510 <osMutexRelease>

					erase_init.TypeErase = FLASH_TYPEERASE_SECTORS; // заполняем структуру с параметрами очистки памяти
 800abe6:	4b63      	ldr	r3, [pc, #396]	; (800ad74 <ThreadMainTask+0xaac>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
					erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800abec:	4b61      	ldr	r3, [pc, #388]	; (800ad74 <ThreadMainTask+0xaac>)
 800abee:	2202      	movs	r2, #2
 800abf0:	611a      	str	r2, [r3, #16]
					erase_init.Sector = bootloader_registers.clear_page_number_reg;
 800abf2:	4b5e      	ldr	r3, [pc, #376]	; (800ad6c <ThreadMainTask+0xaa4>)
 800abf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abf6:	461a      	mov	r2, r3
 800abf8:	4b5e      	ldr	r3, [pc, #376]	; (800ad74 <ThreadMainTask+0xaac>)
 800abfa:	609a      	str	r2, [r3, #8]
					erase_init.NbSectors = 1;
 800abfc:	4b5d      	ldr	r3, [pc, #372]	; (800ad74 <ThreadMainTask+0xaac>)
 800abfe:	2201      	movs	r2, #1
 800ac00:	60da      	str	r2, [r3, #12]
					erase_init.Banks = 1;
 800ac02:	4b5c      	ldr	r3, [pc, #368]	; (800ad74 <ThreadMainTask+0xaac>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	605a      	str	r2, [r3, #4]

					//osThreadSuspendAll();
					taskENTER_CRITICAL();
 800ac08:	f7fe fe24 	bl	8009854 <vPortEnterCritical>

					HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800ac0c:	f7f7 fc84 	bl	8002518 <HAL_FLASH_Unlock>

					while( HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK ) // выполняем очистку указанной страницы памяти
 800ac10:	bf00      	nop
 800ac12:	4959      	ldr	r1, [pc, #356]	; (800ad78 <ThreadMainTask+0xab0>)
 800ac14:	4857      	ldr	r0, [pc, #348]	; (800ad74 <ThreadMainTask+0xaac>)
 800ac16:	f7f7 fde1 	bl	80027dc <HAL_FLASHEx_Erase>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f8      	bne.n	800ac12 <ThreadMainTask+0x94a>
					{

					}

					HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800ac20:	f7f7 fc9c 	bl	800255c <HAL_FLASH_Lock>

					taskEXIT_CRITICAL();
 800ac24:	f7fe fe46 	bl	80098b4 <vPortExitCritical>
					//osThreadResumeAll();

					if(sector_error != 0xFFFFFFFF) // если произошла ошибка очистки сектора памяти
 800ac28:	4b53      	ldr	r3, [pc, #332]	; (800ad78 <ThreadMainTask+0xab0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d152      	bne.n	800acd8 <ThreadMainTask+0xa10>
					{
						// здесь должен быть обработчик ошибки очистки сектора памяти
					}

					else if( sector_error == 0xFFFFFFFF ) // если не произошло ошибок памяти, то обнуляем регистр и переменную для стирания
 800ac32:	4b51      	ldr	r3, [pc, #324]	; (800ad78 <ThreadMainTask+0xab0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3a:	d14d      	bne.n	800acd8 <ThreadMainTask+0xa10>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac3c:	4b49      	ldr	r3, [pc, #292]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f04f 31ff 	mov.w	r1, #4294967295
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fb fc15 	bl	8006474 <osMutexWait>

						fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00); // обнуляем регистр и переменную очистки страницы
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	f44f 7010 	mov.w	r0, #576	; 0x240
 800ac50:	f000 ff78 	bl	800bb44 <fm25v02_write>
						fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800ac54:	2100      	movs	r1, #0
 800ac56:	f240 2041 	movw	r0, #577	; 0x241
 800ac5a:	f000 ff73 	bl	800bb44 <fm25v02_write>
						bootloader_registers.clear_page_on_reg = 0x0000;
 800ac5e:	4b43      	ldr	r3, [pc, #268]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	861a      	strh	r2, [r3, #48]	; 0x30

						osMutexRelease(Fm25v02MutexHandle);
 800ac64:	4b3f      	ldr	r3, [pc, #252]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fb fc51 	bl	8006510 <osMutexRelease>
					}

				break;
 800ac6e:	e033      	b.n	800acd8 <ThreadMainTask+0xa10>
			}

		}

		else if(bootloader_registers.working_mode_reg == 0) // если включен режим работы
 800ac70:	4b3e      	ldr	r3, [pc, #248]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ac72:	8b9b      	ldrh	r3, [r3, #28]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d130      	bne.n	800acda <ThreadMainTask+0xa12>
		{

			if(bootloader_registers.ready_download_reg != 0x0000)
 800ac78:	4b3c      	ldr	r3, [pc, #240]	; (800ad6c <ThreadMainTask+0xaa4>)
 800ac7a:	8bdb      	ldrh	r3, [r3, #30]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d018      	beq.n	800acb2 <ThreadMainTask+0x9ea>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac80:	4b38      	ldr	r3, [pc, #224]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f04f 31ff 	mov.w	r1, #4294967295
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fb fbf3 	bl	8006474 <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // сбрасываем регистр готовности к загрузке прошивки
 800ac8e:	2100      	movs	r1, #0
 800ac90:	f44f 7008 	mov.w	r0, #544	; 0x220
 800ac94:	f000 ff56 	bl	800bb44 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x00);
 800ac98:	2100      	movs	r1, #0
 800ac9a:	f240 2021 	movw	r0, #545	; 0x221
 800ac9e:	f000 ff51 	bl	800bb44 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0000;
 800aca2:	4b32      	ldr	r3, [pc, #200]	; (800ad6c <ThreadMainTask+0xaa4>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800aca8:	4b2e      	ldr	r3, [pc, #184]	; (800ad64 <ThreadMainTask+0xa9c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f7fb fc2f 	bl	8006510 <osMutexRelease>
			}

			if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 800acb2:	4b2e      	ldr	r3, [pc, #184]	; (800ad6c <ThreadMainTask+0xaa4>)
 800acb4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800acb6:	4b2d      	ldr	r3, [pc, #180]	; (800ad6c <ThreadMainTask+0xaa4>)
 800acb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800acba:	429a      	cmp	r2, r3
 800acbc:	d20d      	bcs.n	800acda <ThreadMainTask+0xa12>
			{
				osDelay(5000); // добавил задержку для теста, чтобы устройство успело отправить значение регистра номер 289, после записи
 800acbe:	f241 3088 	movw	r0, #5000	; 0x1388
 800acc2:	f7fb faf6 	bl	80062b2 <osDelay>
				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800acc6:	4b27      	ldr	r3, [pc, #156]	; (800ad64 <ThreadMainTask+0xa9c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f04f 31ff 	mov.w	r1, #4294967295
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fb fbd0 	bl	8006474 <osMutexWait>
				NVIC_SystemReset();
 800acd4:	f7ff fae2 	bl	800a29c <__NVIC_SystemReset>
				break;
 800acd8:	bf00      	nop

			}
		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800acda:	4b28      	ldr	r3, [pc, #160]	; (800ad7c <ThreadMainTask+0xab4>)
 800acdc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d11e      	bne.n	800ad20 <ThreadMainTask+0xa58>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ace2:	4b20      	ldr	r3, [pc, #128]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f04f 31ff 	mov.w	r1, #4294967295
 800acea:	4618      	mov	r0, r3
 800acec:	f7fb fbc2 	bl	8006474 <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800acf0:	2100      	movs	r1, #0
 800acf2:	f242 105a 	movw	r0, #8538	; 0x215a
 800acf6:	f000 ff25 	bl	800bb44 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800acfa:	2100      	movs	r1, #0
 800acfc:	f242 105b 	movw	r0, #8539	; 0x215b
 800ad00:	f000 ff20 	bl	800bb44 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fb fc01 	bl	8006510 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ad0e:	4b15      	ldr	r3, [pc, #84]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f04f 31ff 	mov.w	r1, #4294967295
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fb fbac 	bl	8006474 <osMutexWait>
				NVIC_SystemReset();
 800ad1c:	f7ff fabe 	bl	800a29c <__NVIC_SystemReset>



		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);

		if( modem_reset_state == 1)
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <ThreadMainTask+0xab8>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d116      	bne.n	800ad58 <ThreadMainTask+0xa90>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ad2a:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <ThreadMainTask+0xa9c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f04f 31ff 	mov.w	r1, #4294967295
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fb fb9e 	bl	8006474 <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 800ad38:	4b12      	ldr	r3, [pc, #72]	; (800ad84 <ThreadMainTask+0xabc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fb fdbd 	bl	80068bc <osThreadSuspend>
			modem_reset_state = 0;
 800ad42:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <ThreadMainTask+0xab8>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	701a      	strb	r2, [r3, #0]
			//AT_QPOWD(0);
			m95_power_off();
 800ad48:	f000 ffea 	bl	800bd20 <m95_power_off>
			HAL_Delay(5000);
 800ad4c:	f241 3088 	movw	r0, #5000	; 0x1388
 800ad50:	f7f6 fdf6 	bl	8001940 <HAL_Delay>
			NVIC_SystemReset();
 800ad54:	f7ff faa2 	bl	800a29c <__NVIC_SystemReset>
		}


		osDelay(10);
 800ad58:	200a      	movs	r0, #10
 800ad5a:	f7fb faaa 	bl	80062b2 <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ad5e:	f7ff bb6f 	b.w	800a440 <ThreadMainTask+0x178>
 800ad62:	bf00      	nop
 800ad64:	20016bd8 	.word	0x20016bd8
 800ad68:	200185e0 	.word	0x200185e0
 800ad6c:	20019f98 	.word	0x20019f98
 800ad70:	20019d70 	.word	0x20019d70
 800ad74:	20019d58 	.word	0x20019d58
 800ad78:	200185d4 	.word	0x200185d4
 800ad7c:	2001a0c4 	.word	0x2001a0c4
 800ad80:	20000805 	.word	0x20000805
 800ad84:	20016bac 	.word	0x20016bac

0800ad88 <ThreadModbusPacketTask>:
extern volatile uint8_t modem_transmit_delay_state;



void ThreadModbusPacketTask(void const * argument)
{
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
	uint8_t temp_reg_h;
	uint8_t temp_reg_l;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800ad90:	4ba4      	ldr	r3, [pc, #656]	; (800b024 <ThreadModbusPacketTask+0x29c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f04f 31ff 	mov.w	r1, #4294967295
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fb fc2f 	bl	80065fc <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800ad9e:	4ba1      	ldr	r3, [pc, #644]	; (800b024 <ThreadModbusPacketTask+0x29c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f04f 31ff 	mov.w	r1, #4294967295
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fb fc28 	bl	80065fc <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 800adac:	4b9e      	ldr	r3, [pc, #632]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	4619      	mov	r1, r3
 800adb2:	4a9e      	ldr	r2, [pc, #632]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800adb4:	f241 7370 	movw	r3, #6000	; 0x1770
 800adb8:	fb03 f301 	mul.w	r3, r3, r1
 800adbc:	4413      	add	r3, r2
 800adbe:	3301      	adds	r3, #1
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d003      	beq.n	800adce <ThreadModbusPacketTask+0x46>
 800adc6:	2b10      	cmp	r3, #16
 800adc8:	f000 80d2 	beq.w	800af70 <ThreadModbusPacketTask+0x1e8>
 800adcc:	e30b      	b.n	800b3e6 <ThreadModbusPacketTask+0x65e>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 800adce:	4b96      	ldr	r3, [pc, #600]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	4619      	mov	r1, r3
 800add4:	4a95      	ldr	r2, [pc, #596]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800add6:	f241 7370 	movw	r3, #6000	; 0x1770
 800adda:	fb03 f301 	mul.w	r3, r3, r1
 800adde:	4413      	add	r3, r2
 800ade0:	3302      	adds	r3, #2
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	b21a      	sxth	r2, r3
 800ade8:	4b8f      	ldr	r3, [pc, #572]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	498f      	ldr	r1, [pc, #572]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800adf0:	f241 7370 	movw	r3, #6000	; 0x1770
 800adf4:	fb03 f300 	mul.w	r3, r3, r0
 800adf8:	440b      	add	r3, r1
 800adfa:	3303      	adds	r3, #3
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b21b      	sxth	r3, r3
 800ae00:	4313      	orrs	r3, r2
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	4b8a      	ldr	r3, [pc, #552]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800ae08:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800ae0a:	4b87      	ldr	r3, [pc, #540]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4a86      	ldr	r2, [pc, #536]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800ae12:	f241 7370 	movw	r3, #6000	; 0x1770
 800ae16:	fb03 f301 	mul.w	r3, r3, r1
 800ae1a:	4413      	add	r3, r2
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	b21a      	sxth	r2, r3
 800ae24:	4b80      	ldr	r3, [pc, #512]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	4980      	ldr	r1, [pc, #512]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800ae2c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ae30:	fb03 f300 	mul.w	r3, r3, r0
 800ae34:	440b      	add	r3, r1
 800ae36:	3305      	adds	r3, #5
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	b21b      	sxth	r3, r3
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	4b7c      	ldr	r3, [pc, #496]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800ae44:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ae46:	4b7c      	ldr	r3, [pc, #496]	; (800b038 <ThreadModbusPacketTask+0x2b0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fb fb10 	bl	8006474 <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 800ae54:	4b76      	ldr	r3, [pc, #472]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	b298      	uxth	r0, r3
 800ae5c:	4b75      	ldr	r3, [pc, #468]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	461a      	mov	r2, r3
 800ae66:	4975      	ldr	r1, [pc, #468]	; (800b03c <ThreadModbusPacketTask+0x2b4>)
 800ae68:	f000 feb8 	bl	800bbdc <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 800ae6c:	4b72      	ldr	r3, [pc, #456]	; (800b038 <ThreadModbusPacketTask+0x2b0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fb fb4d 	bl	8006510 <osMutexRelease>

				buf_out1[0] = 0x01;
 800ae76:	4b72      	ldr	r3, [pc, #456]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 800ae7c:	4b70      	ldr	r3, [pc, #448]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800ae7e:	2203      	movs	r2, #3
 800ae80:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 800ae82:	4b6c      	ldr	r3, [pc, #432]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	4b6c      	ldr	r3, [pc, #432]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800ae8e:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]
 800ae94:	e015      	b.n	800aec2 <ThreadModbusPacketTask+0x13a>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	005a      	lsls	r2, r3, #1
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	005b      	lsls	r3, r3, #1
 800ae9e:	3303      	adds	r3, #3
 800aea0:	4966      	ldr	r1, [pc, #408]	; (800b03c <ThreadModbusPacketTask+0x2b4>)
 800aea2:	5c89      	ldrb	r1, [r1, r2]
 800aea4:	4a66      	ldr	r2, [pc, #408]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800aea6:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	3302      	adds	r3, #2
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	4961      	ldr	r1, [pc, #388]	; (800b03c <ThreadModbusPacketTask+0x2b4>)
 800aeb6:	5c89      	ldrb	r1, [r1, r2]
 800aeb8:	4a61      	ldr	r2, [pc, #388]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800aeba:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	3301      	adds	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	4b5b      	ldr	r3, [pc, #364]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3e3      	bcc.n	800ae96 <ThreadModbusPacketTask+0x10e>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 800aece:	4b59      	ldr	r3, [pc, #356]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	3303      	adds	r3, #3
 800aed6:	4619      	mov	r1, r3
 800aed8:	4859      	ldr	r0, [pc, #356]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800aeda:	f002 fba5 	bl	800d628 <CRC16>
 800aede:	4603      	mov	r3, r0
 800aee0:	4a58      	ldr	r2, [pc, #352]	; (800b044 <ThreadModbusPacketTask+0x2bc>)
 800aee2:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 800aee4:	4b57      	ldr	r3, [pc, #348]	; (800b044 <ThreadModbusPacketTask+0x2bc>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	4b52      	ldr	r3, [pc, #328]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	3303      	adds	r3, #3
 800aef0:	b2d1      	uxtb	r1, r2
 800aef2:	4a53      	ldr	r2, [pc, #332]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800aef4:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 800aef6:	4b53      	ldr	r3, [pc, #332]	; (800b044 <ThreadModbusPacketTask+0x2bc>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	0a1a      	lsrs	r2, r3, #8
 800aefc:	4b4d      	ldr	r3, [pc, #308]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	3302      	adds	r3, #2
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	b2d1      	uxtb	r1, r2
 800af06:	4a4e      	ldr	r2, [pc, #312]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800af08:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 800af0a:	4b4f      	ldr	r3, [pc, #316]	; (800b048 <ThreadModbusPacketTask+0x2c0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f04f 31ff 	mov.w	r1, #4294967295
 800af12:	4618      	mov	r0, r3
 800af14:	f7fb faae 	bl	8006474 <osMutexWait>
				//if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
				if( AT_CIPSEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 800af18:	4b46      	ldr	r3, [pc, #280]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	b29b      	uxth	r3, r3
 800af20:	3305      	adds	r3, #5
 800af22:	b29b      	uxth	r3, r3
 800af24:	4619      	mov	r1, r3
 800af26:	4846      	ldr	r0, [pc, #280]	; (800b040 <ThreadModbusPacketTask+0x2b8>)
 800af28:	f001 fbb4 	bl	800c694 <AT_CIPSEND>
				{

				}
				osMutexRelease(UartMutexHandle);
 800af2c:	4b46      	ldr	r3, [pc, #280]	; (800b048 <ThreadModbusPacketTask+0x2c0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fb faed 	bl	8006510 <osMutexRelease>

				modem_transmit_delay_state = 0;
 800af36:	4b45      	ldr	r3, [pc, #276]	; (800b04c <ThreadModbusPacketTask+0x2c4>)
 800af38:	2200      	movs	r2, #0
 800af3a:	701a      	strb	r2, [r3, #0]
				modem_transmit_delay = 0;
 800af3c:	4b44      	ldr	r3, [pc, #272]	; (800b050 <ThreadModbusPacketTask+0x2c8>)
 800af3e:	2200      	movs	r2, #0
 800af40:	801a      	strh	r2, [r3, #0]
				osThreadResume(M95TaskHandle);
 800af42:	4b44      	ldr	r3, [pc, #272]	; (800b054 <ThreadModbusPacketTask+0x2cc>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fb fcc4 	bl	80068d4 <osThreadResume>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 800af4c:	4b38      	ldr	r3, [pc, #224]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af54:	d105      	bne.n	800af62 <ThreadModbusPacketTask+0x1da>
				{
					osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800af56:	4b40      	ldr	r3, [pc, #256]	; (800b058 <ThreadModbusPacketTask+0x2d0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4940      	ldr	r1, [pc, #256]	; (800b05c <ThreadModbusPacketTask+0x2d4>)
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fb f9f1 	bl	8006344 <osTimerStart>
				}

				osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800af62:	4b3d      	ldr	r3, [pc, #244]	; (800b058 <ThreadModbusPacketTask+0x2d0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	493d      	ldr	r1, [pc, #244]	; (800b05c <ThreadModbusPacketTask+0x2d4>)
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fb f9eb 	bl	8006344 <osTimerStart>


			break;
 800af6e:	e23a      	b.n	800b3e6 <ThreadModbusPacketTask+0x65e>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 800af70:	4b2d      	ldr	r3, [pc, #180]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	4619      	mov	r1, r3
 800af76:	4a2d      	ldr	r2, [pc, #180]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800af78:	f241 7370 	movw	r3, #6000	; 0x1770
 800af7c:	fb03 f301 	mul.w	r3, r3, r1
 800af80:	4413      	add	r3, r2
 800af82:	3302      	adds	r3, #2
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	b21a      	sxth	r2, r3
 800af8a:	4b27      	ldr	r3, [pc, #156]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	4618      	mov	r0, r3
 800af90:	4926      	ldr	r1, [pc, #152]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800af92:	f241 7370 	movw	r3, #6000	; 0x1770
 800af96:	fb03 f300 	mul.w	r3, r3, r0
 800af9a:	440b      	add	r3, r1
 800af9c:	3303      	adds	r3, #3
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b21b      	sxth	r3, r3
 800afa2:	4313      	orrs	r3, r2
 800afa4:	b21b      	sxth	r3, r3
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	4b21      	ldr	r3, [pc, #132]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800afaa:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800afac:	4b1e      	ldr	r3, [pc, #120]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	4619      	mov	r1, r3
 800afb2:	4a1e      	ldr	r2, [pc, #120]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800afb4:	f241 7370 	movw	r3, #6000	; 0x1770
 800afb8:	fb03 f301 	mul.w	r3, r3, r1
 800afbc:	4413      	add	r3, r2
 800afbe:	3304      	adds	r3, #4
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	b21a      	sxth	r2, r3
 800afc6:	4b18      	ldr	r3, [pc, #96]	; (800b028 <ThreadModbusPacketTask+0x2a0>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	4917      	ldr	r1, [pc, #92]	; (800b02c <ThreadModbusPacketTask+0x2a4>)
 800afce:	f241 7370 	movw	r3, #6000	; 0x1770
 800afd2:	fb03 f300 	mul.w	r3, r3, r0
 800afd6:	440b      	add	r3, r1
 800afd8:	3305      	adds	r3, #5
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	b21b      	sxth	r3, r3
 800afde:	4313      	orrs	r3, r2
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	4b13      	ldr	r3, [pc, #76]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800afe6:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 800afe8:	4b11      	ldr	r3, [pc, #68]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff0:	d306      	bcc.n	800b000 <ThreadModbusPacketTask+0x278>
 800aff2:	4b0f      	ldr	r3, [pc, #60]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	f241 028f 	movw	r2, #4239	; 0x108f
 800affa:	4293      	cmp	r3, r2
 800affc:	f240 81ec 	bls.w	800b3d8 <ThreadModbusPacketTask+0x650>
 800b000:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b008:	d209      	bcs.n	800b01e <ThreadModbusPacketTask+0x296>
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <ThreadModbusPacketTask+0x2a8>)
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	4b08      	ldr	r3, [pc, #32]	; (800b034 <ThreadModbusPacketTask+0x2ac>)
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	4413      	add	r3, r2
 800b016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01a:	f300 81dd 	bgt.w	800b3d8 <ThreadModbusPacketTask+0x650>
				{

					// обработка пакета записи 16-битного регистра modbus

					//for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
					for(uint16_t a=0; a<modbus_size; a++)
 800b01e:	2300      	movs	r3, #0
 800b020:	81bb      	strh	r3, [r7, #12]
 800b022:	e0a4      	b.n	800b16e <ThreadModbusPacketTask+0x3e6>
 800b024:	20016bb0 	.word	0x20016bb0
 800b028:	20007f97 	.word	0x20007f97
 800b02c:	200080bc 	.word	0x200080bc
 800b030:	20019f80 	.word	0x20019f80
 800b034:	20019f82 	.word	0x20019f82
 800b038:	20016bd8 	.word	0x20016bd8
 800b03c:	20019e80 	.word	0x20019e80
 800b040:	20019d80 	.word	0x20019d80
 800b044:	20019f94 	.word	0x20019f94
 800b048:	20016b2c 	.word	0x20016b2c
 800b04c:	20007f9a 	.word	0x20007f9a
 800b050:	20007f98 	.word	0x20007f98
 800b054:	20016bac 	.word	0x20016bac
 800b058:	20016b30 	.word	0x20016b30
 800b05c:	00015f90 	.word	0x00015f90
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b060:	4b96      	ldr	r3, [pc, #600]	; (800b2bc <ThreadModbusPacketTask+0x534>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f04f 31ff 	mov.w	r1, #4294967295
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fb fa03 	bl	8006474 <osMutexWait>
						//fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
						//fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
						fm25v02_write( (2*modbus_address+2*a), modbus_buffer[modbus_packet_number1][7+a*2] );
 800b06e:	4b94      	ldr	r3, [pc, #592]	; (800b2c0 <ThreadModbusPacketTask+0x538>)
 800b070:	881a      	ldrh	r2, [r3, #0]
 800b072:	89bb      	ldrh	r3, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	b29b      	uxth	r3, r3
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	b298      	uxth	r0, r3
 800b07c:	4b91      	ldr	r3, [pc, #580]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	461c      	mov	r4, r3
 800b082:	89bb      	ldrh	r3, [r7, #12]
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	3307      	adds	r3, #7
 800b088:	498f      	ldr	r1, [pc, #572]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b08a:	f241 7270 	movw	r2, #6000	; 0x1770
 800b08e:	fb02 f204 	mul.w	r2, r2, r4
 800b092:	440a      	add	r2, r1
 800b094:	4413      	add	r3, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	f000 fd53 	bl	800bb44 <fm25v02_write>
						fm25v02_write( (2*modbus_address+2*a+1), modbus_buffer[modbus_packet_number1][8+a*2] );
 800b09e:	4b88      	ldr	r3, [pc, #544]	; (800b2c0 <ThreadModbusPacketTask+0x538>)
 800b0a0:	881a      	ldrh	r2, [r3, #0]
 800b0a2:	89bb      	ldrh	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	b298      	uxth	r0, r3
 800b0b0:	4b84      	ldr	r3, [pc, #528]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	461c      	mov	r4, r3
 800b0b6:	89bb      	ldrh	r3, [r7, #12]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	4982      	ldr	r1, [pc, #520]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b0be:	f241 7270 	movw	r2, #6000	; 0x1770
 800b0c2:	fb02 f204 	mul.w	r2, r2, r4
 800b0c6:	440a      	add	r2, r1
 800b0c8:	4413      	add	r3, r2
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f000 fd39 	bl	800bb44 <fm25v02_write>
						fm25v02_read( (2*modbus_address+2*a), &temp_reg_h);
 800b0d2:	4b7b      	ldr	r3, [pc, #492]	; (800b2c0 <ThreadModbusPacketTask+0x538>)
 800b0d4:	881a      	ldrh	r2, [r3, #0]
 800b0d6:	89bb      	ldrh	r3, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f107 020b 	add.w	r2, r7, #11
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fcf2 	bl	800bad0 <fm25v02_read>
						fm25v02_read( (2*modbus_address+2*a+1), &temp_reg_l);
 800b0ec:	4b74      	ldr	r3, [pc, #464]	; (800b2c0 <ThreadModbusPacketTask+0x538>)
 800b0ee:	881a      	ldrh	r2, [r3, #0]
 800b0f0:	89bb      	ldrh	r3, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f107 020a 	add.w	r2, r7, #10
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fce3 	bl	800bad0 <fm25v02_read>
						if( (temp_reg_h == modbus_buffer[modbus_packet_number1][7+a*2] ) && ( temp_reg_l == modbus_buffer[modbus_packet_number1][8+a*2]) )
 800b10a:	4b6e      	ldr	r3, [pc, #440]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	89bb      	ldrh	r3, [r7, #12]
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	3307      	adds	r3, #7
 800b116:	496c      	ldr	r1, [pc, #432]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b118:	f241 7270 	movw	r2, #6000	; 0x1770
 800b11c:	fb02 f200 	mul.w	r2, r2, r0
 800b120:	440a      	add	r2, r1
 800b122:	4413      	add	r3, r2
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	7afb      	ldrb	r3, [r7, #11]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d110      	bne.n	800b14e <ThreadModbusPacketTask+0x3c6>
 800b12c:	4b65      	ldr	r3, [pc, #404]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	89bb      	ldrh	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	4963      	ldr	r1, [pc, #396]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b13a:	f241 7270 	movw	r2, #6000	; 0x1770
 800b13e:	fb02 f200 	mul.w	r2, r2, r0
 800b142:	440a      	add	r2, r1
 800b144:	4413      	add	r3, r2
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	7abb      	ldrb	r3, [r7, #10]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d007      	beq.n	800b15e <ThreadModbusPacketTask+0x3d6>
						{
							//LED8_TOGGLE();
						}
						else
						{
							BUZ_ON();
 800b14e:	f000 fd83 	bl	800bc58 <BUZ_ON>
							HAL_Delay(300);
 800b152:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b156:	f7f6 fbf3 	bl	8001940 <HAL_Delay>
							BUZ_OFF();
 800b15a:	f000 fd89 	bl	800bc70 <BUZ_OFF>
						}
						osMutexRelease(Fm25v02MutexHandle);
 800b15e:	4b57      	ldr	r3, [pc, #348]	; (800b2bc <ThreadModbusPacketTask+0x534>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4618      	mov	r0, r3
 800b164:	f7fb f9d4 	bl	8006510 <osMutexRelease>
					for(uint16_t a=0; a<modbus_size; a++)
 800b168:	89bb      	ldrh	r3, [r7, #12]
 800b16a:	3301      	adds	r3, #1
 800b16c:	81bb      	strh	r3, [r7, #12]
 800b16e:	4b57      	ldr	r3, [pc, #348]	; (800b2cc <ThreadModbusPacketTask+0x544>)
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	89ba      	ldrh	r2, [r7, #12]
 800b174:	429a      	cmp	r2, r3
 800b176:	f4ff af73 	bcc.w	800b060 <ThreadModbusPacketTask+0x2d8>
					}

					buf_out1[0] = 0x01;
 800b17a:	4b55      	ldr	r3, [pc, #340]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 800b180:	4b53      	ldr	r3, [pc, #332]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b182:	2210      	movs	r2, #16
 800b184:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 800b186:	4b4f      	ldr	r3, [pc, #316]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	4619      	mov	r1, r3
 800b18c:	4a4e      	ldr	r2, [pc, #312]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b18e:	f241 7370 	movw	r3, #6000	; 0x1770
 800b192:	fb03 f301 	mul.w	r3, r3, r1
 800b196:	4413      	add	r3, r2
 800b198:	3302      	adds	r3, #2
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	4b4c      	ldr	r3, [pc, #304]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b19e:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 800b1a0:	4b48      	ldr	r3, [pc, #288]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4a48      	ldr	r2, [pc, #288]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b1a8:	f241 7370 	movw	r3, #6000	; 0x1770
 800b1ac:	fb03 f301 	mul.w	r3, r3, r1
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	4b46      	ldr	r3, [pc, #280]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b1b8:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 800b1ba:	4b42      	ldr	r3, [pc, #264]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4a41      	ldr	r2, [pc, #260]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b1c2:	f241 7370 	movw	r3, #6000	; 0x1770
 800b1c6:	fb03 f301 	mul.w	r3, r3, r1
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	781a      	ldrb	r2, [r3, #0]
 800b1d0:	4b3f      	ldr	r3, [pc, #252]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b1d2:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 800b1d4:	4b3b      	ldr	r3, [pc, #236]	; (800b2c4 <ThreadModbusPacketTask+0x53c>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4a3b      	ldr	r2, [pc, #236]	; (800b2c8 <ThreadModbusPacketTask+0x540>)
 800b1dc:	f241 7370 	movw	r3, #6000	; 0x1770
 800b1e0:	fb03 f301 	mul.w	r3, r3, r1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3305      	adds	r3, #5
 800b1e8:	781a      	ldrb	r2, [r3, #0]
 800b1ea:	4b39      	ldr	r3, [pc, #228]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b1ec:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 800b1ee:	2106      	movs	r1, #6
 800b1f0:	4837      	ldr	r0, [pc, #220]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b1f2:	f002 fa19 	bl	800d628 <CRC16>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4a36      	ldr	r2, [pc, #216]	; (800b2d4 <ThreadModbusPacketTask+0x54c>)
 800b1fa:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 800b1fc:	4b35      	ldr	r3, [pc, #212]	; (800b2d4 <ThreadModbusPacketTask+0x54c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	b2da      	uxtb	r2, r3
 800b202:	4b33      	ldr	r3, [pc, #204]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b204:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 800b206:	4b33      	ldr	r3, [pc, #204]	; (800b2d4 <ThreadModbusPacketTask+0x54c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	0a1b      	lsrs	r3, r3, #8
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	4b30      	ldr	r3, [pc, #192]	; (800b2d0 <ThreadModbusPacketTask+0x548>)
 800b210:	71da      	strb	r2, [r3, #7]


					osMutexWait(Fm25v02MutexHandle, osWaitForever); // читаем значения регистров
 800b212:	4b2a      	ldr	r3, [pc, #168]	; (800b2bc <ThreadModbusPacketTask+0x534>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f04f 31ff 	mov.w	r1, #4294967295
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fb f92a 	bl	8006474 <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800b220:	f107 030b 	add.w	r3, r7, #11
 800b224:	4619      	mov	r1, r3
 800b226:	f44f 7010 	mov.w	r0, #576	; 0x240
 800b22a:	f000 fc51 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800b22e:	f107 030a 	add.w	r3, r7, #10
 800b232:	4619      	mov	r1, r3
 800b234:	f240 2041 	movw	r0, #577	; 0x241
 800b238:	f000 fc4a 	bl	800bad0 <fm25v02_read>
					bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	b21a      	sxth	r2, r3
 800b242:	7abb      	ldrb	r3, [r7, #10]
 800b244:	b21b      	sxth	r3, r3
 800b246:	4313      	orrs	r3, r2
 800b248:	b21b      	sxth	r3, r3
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	4b22      	ldr	r3, [pc, #136]	; (800b2d8 <ThreadModbusPacketTask+0x550>)
 800b24e:	861a      	strh	r2, [r3, #48]	; 0x30

					fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800b250:	f107 030b 	add.w	r3, r7, #11
 800b254:	4619      	mov	r1, r3
 800b256:	f240 2042 	movw	r0, #578	; 0x242
 800b25a:	f000 fc39 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800b25e:	f107 030a 	add.w	r3, r7, #10
 800b262:	4619      	mov	r1, r3
 800b264:	f240 2043 	movw	r0, #579	; 0x243
 800b268:	f000 fc32 	bl	800bad0 <fm25v02_read>
					bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	b21a      	sxth	r2, r3
 800b272:	7abb      	ldrb	r3, [r7, #10]
 800b274:	b21b      	sxth	r3, r3
 800b276:	4313      	orrs	r3, r2
 800b278:	b21b      	sxth	r3, r3
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	4b16      	ldr	r3, [pc, #88]	; (800b2d8 <ThreadModbusPacketTask+0x550>)
 800b27e:	865a      	strh	r2, [r3, #50]	; 0x32

					fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800b280:	f107 030b 	add.w	r3, r7, #11
 800b284:	4619      	mov	r1, r3
 800b286:	f44f 7011 	mov.w	r0, #580	; 0x244
 800b28a:	f000 fc21 	bl	800bad0 <fm25v02_read>
					fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800b28e:	f107 030a 	add.w	r3, r7, #10
 800b292:	4619      	mov	r1, r3
 800b294:	f240 2045 	movw	r0, #581	; 0x245
 800b298:	f000 fc1a 	bl	800bad0 <fm25v02_read>
					bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	b21a      	sxth	r2, r3
 800b2a2:	7abb      	ldrb	r3, [r7, #10]
 800b2a4:	b21b      	sxth	r3, r3
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	b21b      	sxth	r3, r3
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <ThreadModbusPacketTask+0x550>)
 800b2ae:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800b2b0:	4b02      	ldr	r3, [pc, #8]	; (800b2bc <ThreadModbusPacketTask+0x534>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fb f92b 	bl	8006510 <osMutexRelease>

					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800b2ba:	e066      	b.n	800b38a <ThreadModbusPacketTask+0x602>
 800b2bc:	20016bd8 	.word	0x20016bd8
 800b2c0:	20019f80 	.word	0x20019f80
 800b2c4:	20007f97 	.word	0x20007f97
 800b2c8:	200080bc 	.word	0x200080bc
 800b2cc:	20019f82 	.word	0x20019f82
 800b2d0:	20019d80 	.word	0x20019d80
 800b2d4:	20019f94 	.word	0x20019f94
 800b2d8:	20019f98 	.word	0x20019f98
					{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b2dc:	4b44      	ldr	r3, [pc, #272]	; (800b3f0 <ThreadModbusPacketTask+0x668>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fb f8c5 	bl	8006474 <osMutexWait>

						fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800b2ea:	f107 030b 	add.w	r3, r7, #11
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	f44f 7010 	mov.w	r0, #576	; 0x240
 800b2f4:	f000 fbec 	bl	800bad0 <fm25v02_read>
						fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800b2f8:	f107 030a 	add.w	r3, r7, #10
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f240 2041 	movw	r0, #577	; 0x241
 800b302:	f000 fbe5 	bl	800bad0 <fm25v02_read>
						bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	021b      	lsls	r3, r3, #8
 800b30a:	b21a      	sxth	r2, r3
 800b30c:	7abb      	ldrb	r3, [r7, #10]
 800b30e:	b21b      	sxth	r3, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	b21b      	sxth	r3, r3
 800b314:	b29a      	uxth	r2, r3
 800b316:	4b37      	ldr	r3, [pc, #220]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b318:	861a      	strh	r2, [r3, #48]	; 0x30

						fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800b31a:	f107 030b 	add.w	r3, r7, #11
 800b31e:	4619      	mov	r1, r3
 800b320:	f240 2042 	movw	r0, #578	; 0x242
 800b324:	f000 fbd4 	bl	800bad0 <fm25v02_read>
						fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800b328:	f107 030a 	add.w	r3, r7, #10
 800b32c:	4619      	mov	r1, r3
 800b32e:	f240 2043 	movw	r0, #579	; 0x243
 800b332:	f000 fbcd 	bl	800bad0 <fm25v02_read>
						bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b336:	7afb      	ldrb	r3, [r7, #11]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	b21a      	sxth	r2, r3
 800b33c:	7abb      	ldrb	r3, [r7, #10]
 800b33e:	b21b      	sxth	r3, r3
 800b340:	4313      	orrs	r3, r2
 800b342:	b21b      	sxth	r3, r3
 800b344:	b29a      	uxth	r2, r3
 800b346:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b348:	865a      	strh	r2, [r3, #50]	; 0x32

						fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800b34a:	f107 030b 	add.w	r3, r7, #11
 800b34e:	4619      	mov	r1, r3
 800b350:	f44f 7011 	mov.w	r0, #580	; 0x244
 800b354:	f000 fbbc 	bl	800bad0 <fm25v02_read>
						fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800b358:	f107 030a 	add.w	r3, r7, #10
 800b35c:	4619      	mov	r1, r3
 800b35e:	f240 2045 	movw	r0, #581	; 0x245
 800b362:	f000 fbb5 	bl	800bad0 <fm25v02_read>
						bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	b21a      	sxth	r2, r3
 800b36c:	7abb      	ldrb	r3, [r7, #10]
 800b36e:	b21b      	sxth	r3, r3
 800b370:	4313      	orrs	r3, r2
 800b372:	b21b      	sxth	r3, r3
 800b374:	b29a      	uxth	r2, r3
 800b376:	4b1f      	ldr	r3, [pc, #124]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b378:	869a      	strh	r2, [r3, #52]	; 0x34

						osMutexRelease(Fm25v02MutexHandle);
 800b37a:	4b1d      	ldr	r3, [pc, #116]	; (800b3f0 <ThreadModbusPacketTask+0x668>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fb f8c6 	bl	8006510 <osMutexRelease>

						osDelay(10);
 800b384:	200a      	movs	r0, #10
 800b386:	f7fa ff94 	bl	80062b2 <osDelay>
					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800b38a:	4b1a      	ldr	r3, [pc, #104]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b38c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d0a4      	beq.n	800b2dc <ThreadModbusPacketTask+0x554>
 800b392:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b396:	2b01      	cmp	r3, #1
 800b398:	d0a0      	beq.n	800b2dc <ThreadModbusPacketTask+0x554>
 800b39a:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <ThreadModbusPacketTask+0x66c>)
 800b39c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d09c      	beq.n	800b2dc <ThreadModbusPacketTask+0x554>

					}


					osMutexWait(UartMutexHandle, osWaitForever);
 800b3a2:	4b15      	ldr	r3, [pc, #84]	; (800b3f8 <ThreadModbusPacketTask+0x670>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f04f 31ff 	mov.w	r1, #4294967295
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fb f862 	bl	8006474 <osMutexWait>
					//if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
					if( AT_CIPSEND(&buf_out1[0], 8) != AT_OK )
 800b3b0:	2108      	movs	r1, #8
 800b3b2:	4812      	ldr	r0, [pc, #72]	; (800b3fc <ThreadModbusPacketTask+0x674>)
 800b3b4:	f001 f96e 	bl	800c694 <AT_CIPSEND>
					{
						//LED8_ON(); // тест
					}
					osMutexRelease(UartMutexHandle);
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	; (800b3f8 <ThreadModbusPacketTask+0x670>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fb f8a7 	bl	8006510 <osMutexRelease>

					modem_transmit_delay_state = 0;
 800b3c2:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <ThreadModbusPacketTask+0x678>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
					modem_transmit_delay = 0;
 800b3c8:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <ThreadModbusPacketTask+0x67c>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	801a      	strh	r2, [r3, #0]
					osThreadResume(M95TaskHandle);
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <ThreadModbusPacketTask+0x680>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fb fa7e 	bl	80068d4 <osThreadResume>

				}

				osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800b3d8:	4b0c      	ldr	r3, [pc, #48]	; (800b40c <ThreadModbusPacketTask+0x684>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	490c      	ldr	r1, [pc, #48]	; (800b410 <ThreadModbusPacketTask+0x688>)
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fa ffb0 	bl	8006344 <osTimerStart>


			break;
 800b3e4:	bf00      	nop
		}


		osDelay(1);
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	f7fa ff63 	bl	80062b2 <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800b3ec:	e4d7      	b.n	800ad9e <ThreadModbusPacketTask+0x16>
 800b3ee:	bf00      	nop
 800b3f0:	20016bd8 	.word	0x20016bd8
 800b3f4:	20019f98 	.word	0x20019f98
 800b3f8:	20016b2c 	.word	0x20016b2c
 800b3fc:	20019d80 	.word	0x20019d80
 800b400:	20007f9a 	.word	0x20007f9a
 800b404:	20007f98 	.word	0x20007f98
 800b408:	20016bac 	.word	0x20016bac
 800b40c:	20016b30 	.word	0x20016b30
 800b410:	00015f90 	.word	0x00015f90

0800b414 <ThreadModbusTask>:
volatile uint16_t modem_transmit_delay = 0;
volatile uint8_t modem_transmit_delay_state = 0;


void ThreadModbusTask(void const * argument)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b089      	sub	sp, #36	; 0x24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b420:	4ba1      	ldr	r3, [pc, #644]	; (800b6a8 <ThreadModbusTask+0x294>)
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	4ca1      	ldr	r4, [pc, #644]	; (800b6ac <ThreadModbusTask+0x298>)
 800b426:	463b      	mov	r3, r7
 800b428:	f04f 32ff 	mov.w	r2, #4294967295
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fb f9d1 	bl	80067d4 <osMessageGet>
 800b432:	463b      	mov	r3, r7
 800b434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 800b43c:	4b9b      	ldr	r3, [pc, #620]	; (800b6ac <ThreadModbusTask+0x298>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b10      	cmp	r3, #16
 800b442:	f040 8311 	bne.w	800ba68 <ThreadModbusTask+0x654>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 800b446:	4b99      	ldr	r3, [pc, #612]	; (800b6ac <ThreadModbusTask+0x298>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	2b0f      	cmp	r3, #15
 800b44e:	f200 8230 	bhi.w	800b8b2 <ThreadModbusTask+0x49e>
 800b452:	a201      	add	r2, pc, #4	; (adr r2, 800b458 <ThreadModbusTask+0x44>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b499 	.word	0x0800b499
 800b45c:	0800b8b3 	.word	0x0800b8b3
 800b460:	0800b58f 	.word	0x0800b58f
 800b464:	0800b8b3 	.word	0x0800b8b3
 800b468:	0800b8b3 	.word	0x0800b8b3
 800b46c:	0800b699 	.word	0x0800b699
 800b470:	0800b8b3 	.word	0x0800b8b3
 800b474:	0800b8b3 	.word	0x0800b8b3
 800b478:	0800b8b3 	.word	0x0800b8b3
 800b47c:	0800b8b3 	.word	0x0800b8b3
 800b480:	0800b8b3 	.word	0x0800b8b3
 800b484:	0800b8b3 	.word	0x0800b8b3
 800b488:	0800b8b3 	.word	0x0800b8b3
 800b48c:	0800b8b3 	.word	0x0800b8b3
 800b490:	0800b8b3 	.word	0x0800b8b3
 800b494:	0800b7ad 	.word	0x0800b7ad
			{
				case(0x01):
					if(i==0)
 800b498:	8bfb      	ldrh	r3, [r7, #30]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d113      	bne.n	800b4c6 <ThreadModbusTask+0xb2>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b49e:	4b83      	ldr	r3, [pc, #524]	; (800b6ac <ThreadModbusTask+0x298>)
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	4b83      	ldr	r3, [pc, #524]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	461c      	mov	r4, r3
 800b4a8:	8bfb      	ldrh	r3, [r7, #30]
 800b4aa:	b2d0      	uxtb	r0, r2
 800b4ac:	4981      	ldr	r1, [pc, #516]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b4ae:	f241 7270 	movw	r2, #6000	; 0x1770
 800b4b2:	fb02 f204 	mul.w	r2, r2, r4
 800b4b6:	440a      	add	r2, r1
 800b4b8:	4413      	add	r3, r2
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	701a      	strb	r2, [r3, #0]
						i++;
 800b4be:	8bfb      	ldrh	r3, [r7, #30]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b4c4:	e26c      	b.n	800b9a0 <ThreadModbusTask+0x58c>
					else if(i==1)
 800b4c6:	8bfb      	ldrh	r3, [r7, #30]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d104      	bne.n	800b4d6 <ThreadModbusTask+0xc2>
						i = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	83bb      	strh	r3, [r7, #28]
				break;
 800b4d4:	e264      	b.n	800b9a0 <ThreadModbusTask+0x58c>
					else if(i>1)
 800b4d6:	8bfb      	ldrh	r3, [r7, #30]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	f240 8261 	bls.w	800b9a0 <ThreadModbusTask+0x58c>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b4de:	8bfb      	ldrh	r3, [r7, #30]
 800b4e0:	2b06      	cmp	r3, #6
 800b4e2:	d140      	bne.n	800b566 <ThreadModbusTask+0x152>
 800b4e4:	4b72      	ldr	r3, [pc, #456]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4a72      	ldr	r2, [pc, #456]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b4ec:	f241 7370 	movw	r3, #6000	; 0x1770
 800b4f0:	fb03 f301 	mul.w	r3, r3, r1
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b10      	cmp	r3, #16
 800b4fc:	d133      	bne.n	800b566 <ThreadModbusTask+0x152>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b4fe:	4b6b      	ldr	r3, [pc, #428]	; (800b6ac <ThreadModbusTask+0x298>)
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	4b6b      	ldr	r3, [pc, #428]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	461c      	mov	r4, r3
 800b508:	8bfb      	ldrh	r3, [r7, #30]
 800b50a:	b2d0      	uxtb	r0, r2
 800b50c:	4969      	ldr	r1, [pc, #420]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b50e:	f241 7270 	movw	r2, #6000	; 0x1770
 800b512:	fb02 f204 	mul.w	r2, r2, r4
 800b516:	440a      	add	r2, r1
 800b518:	4413      	add	r3, r2
 800b51a:	4602      	mov	r2, r0
 800b51c:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b51e:	4b64      	ldr	r3, [pc, #400]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	4619      	mov	r1, r3
 800b524:	4a63      	ldr	r2, [pc, #396]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b526:	f241 7370 	movw	r3, #6000	; 0x1770
 800b52a:	fb03 f301 	mul.w	r3, r3, r1
 800b52e:	4413      	add	r3, r2
 800b530:	3304      	adds	r3, #4
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	4a5e      	ldr	r2, [pc, #376]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b538:	7812      	ldrb	r2, [r2, #0]
 800b53a:	4610      	mov	r0, r2
 800b53c:	495d      	ldr	r1, [pc, #372]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b53e:	f241 7270 	movw	r2, #6000	; 0x1770
 800b542:	fb02 f200 	mul.w	r2, r2, r0
 800b546:	440a      	add	r2, r1
 800b548:	3205      	adds	r2, #5
 800b54a:	7812      	ldrb	r2, [r2, #0]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	b29b      	uxth	r3, r3
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	b29b      	uxth	r3, r3
 800b554:	3309      	adds	r3, #9
 800b556:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b558:	4a57      	ldr	r2, [pc, #348]	; (800b6b8 <ThreadModbusTask+0x2a4>)
 800b55a:	8bbb      	ldrh	r3, [r7, #28]
 800b55c:	8013      	strh	r3, [r2, #0]
							i++;
 800b55e:	8bfb      	ldrh	r3, [r7, #30]
 800b560:	3301      	adds	r3, #1
 800b562:	83fb      	strh	r3, [r7, #30]
				break;
 800b564:	e21c      	b.n	800b9a0 <ThreadModbusTask+0x58c>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b566:	4b51      	ldr	r3, [pc, #324]	; (800b6ac <ThreadModbusTask+0x298>)
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	4b51      	ldr	r3, [pc, #324]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461c      	mov	r4, r3
 800b570:	8bfb      	ldrh	r3, [r7, #30]
 800b572:	b2d0      	uxtb	r0, r2
 800b574:	494f      	ldr	r1, [pc, #316]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b576:	f241 7270 	movw	r2, #6000	; 0x1770
 800b57a:	fb02 f204 	mul.w	r2, r2, r4
 800b57e:	440a      	add	r2, r1
 800b580:	4413      	add	r3, r2
 800b582:	4602      	mov	r2, r0
 800b584:	701a      	strb	r2, [r3, #0]
							i++;
 800b586:	8bfb      	ldrh	r3, [r7, #30]
 800b588:	3301      	adds	r3, #1
 800b58a:	83fb      	strh	r3, [r7, #30]
				break;
 800b58c:	e208      	b.n	800b9a0 <ThreadModbusTask+0x58c>

				case(0x03):
					if(i==0)
 800b58e:	8bfb      	ldrh	r3, [r7, #30]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <ThreadModbusTask+0x18a>
					{
						i = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b59c:	e202      	b.n	800b9a4 <ThreadModbusTask+0x590>
					else if(i==1)
 800b59e:	8bfb      	ldrh	r3, [r7, #30]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d11d      	bne.n	800b5e0 <ThreadModbusTask+0x1cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b5a4:	4b41      	ldr	r3, [pc, #260]	; (800b6ac <ThreadModbusTask+0x298>)
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	4b41      	ldr	r3, [pc, #260]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	461c      	mov	r4, r3
 800b5ae:	8bfb      	ldrh	r3, [r7, #30]
 800b5b0:	b2d0      	uxtb	r0, r2
 800b5b2:	4940      	ldr	r1, [pc, #256]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b5b4:	f241 7270 	movw	r2, #6000	; 0x1770
 800b5b8:	fb02 f204 	mul.w	r2, r2, r4
 800b5bc:	440a      	add	r2, r1
 800b5be:	4413      	add	r3, r2
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	701a      	strb	r2, [r3, #0]
						i++;
 800b5c4:	8bfb      	ldrh	r3, [r7, #30]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	83bb      	strh	r3, [r7, #28]
						modem_transmit_delay_state = 1;
 800b5ce:	4b3b      	ldr	r3, [pc, #236]	; (800b6bc <ThreadModbusTask+0x2a8>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(M95TaskHandle);
 800b5d4:	4b3a      	ldr	r3, [pc, #232]	; (800b6c0 <ThreadModbusTask+0x2ac>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fb f96f 	bl	80068bc <osThreadSuspend>
				break;
 800b5de:	e1e1      	b.n	800b9a4 <ThreadModbusTask+0x590>
					else if(i>1)
 800b5e0:	8bfb      	ldrh	r3, [r7, #30]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	f240 81de 	bls.w	800b9a4 <ThreadModbusTask+0x590>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b5e8:	8bfb      	ldrh	r3, [r7, #30]
 800b5ea:	2b06      	cmp	r3, #6
 800b5ec:	d140      	bne.n	800b670 <ThreadModbusTask+0x25c>
 800b5ee:	4b30      	ldr	r3, [pc, #192]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4a2f      	ldr	r2, [pc, #188]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b5f6:	f241 7370 	movw	r3, #6000	; 0x1770
 800b5fa:	fb03 f301 	mul.w	r3, r3, r1
 800b5fe:	4413      	add	r3, r2
 800b600:	3301      	adds	r3, #1
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b10      	cmp	r3, #16
 800b606:	d133      	bne.n	800b670 <ThreadModbusTask+0x25c>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b608:	4b28      	ldr	r3, [pc, #160]	; (800b6ac <ThreadModbusTask+0x298>)
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	4b28      	ldr	r3, [pc, #160]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	461c      	mov	r4, r3
 800b612:	8bfb      	ldrh	r3, [r7, #30]
 800b614:	b2d0      	uxtb	r0, r2
 800b616:	4927      	ldr	r1, [pc, #156]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b618:	f241 7270 	movw	r2, #6000	; 0x1770
 800b61c:	fb02 f204 	mul.w	r2, r2, r4
 800b620:	440a      	add	r2, r1
 800b622:	4413      	add	r3, r2
 800b624:	4602      	mov	r2, r0
 800b626:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b628:	4b21      	ldr	r3, [pc, #132]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	4619      	mov	r1, r3
 800b62e:	4a21      	ldr	r2, [pc, #132]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b630:	f241 7370 	movw	r3, #6000	; 0x1770
 800b634:	fb03 f301 	mul.w	r3, r3, r1
 800b638:	4413      	add	r3, r2
 800b63a:	3304      	adds	r3, #4
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	4a1b      	ldr	r2, [pc, #108]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b642:	7812      	ldrb	r2, [r2, #0]
 800b644:	4610      	mov	r0, r2
 800b646:	491b      	ldr	r1, [pc, #108]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b648:	f241 7270 	movw	r2, #6000	; 0x1770
 800b64c:	fb02 f200 	mul.w	r2, r2, r0
 800b650:	440a      	add	r2, r1
 800b652:	3205      	adds	r2, #5
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	4313      	orrs	r3, r2
 800b658:	b29b      	uxth	r3, r3
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3309      	adds	r3, #9
 800b660:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b662:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <ThreadModbusTask+0x2a4>)
 800b664:	8bbb      	ldrh	r3, [r7, #28]
 800b666:	8013      	strh	r3, [r2, #0]
							i++;
 800b668:	8bfb      	ldrh	r3, [r7, #30]
 800b66a:	3301      	adds	r3, #1
 800b66c:	83fb      	strh	r3, [r7, #30]
				break;
 800b66e:	e199      	b.n	800b9a4 <ThreadModbusTask+0x590>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b670:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <ThreadModbusTask+0x298>)
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <ThreadModbusTask+0x29c>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461c      	mov	r4, r3
 800b67a:	8bfb      	ldrh	r3, [r7, #30]
 800b67c:	b2d0      	uxtb	r0, r2
 800b67e:	490d      	ldr	r1, [pc, #52]	; (800b6b4 <ThreadModbusTask+0x2a0>)
 800b680:	f241 7270 	movw	r2, #6000	; 0x1770
 800b684:	fb02 f204 	mul.w	r2, r2, r4
 800b688:	440a      	add	r2, r1
 800b68a:	4413      	add	r3, r2
 800b68c:	4602      	mov	r2, r0
 800b68e:	701a      	strb	r2, [r3, #0]
							i++;
 800b690:	8bfb      	ldrh	r3, [r7, #30]
 800b692:	3301      	adds	r3, #1
 800b694:	83fb      	strh	r3, [r7, #30]
				break;
 800b696:	e185      	b.n	800b9a4 <ThreadModbusTask+0x590>

				case(0x06):
					if(i==0)
 800b698:	8bfb      	ldrh	r3, [r7, #30]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d112      	bne.n	800b6c4 <ThreadModbusTask+0x2b0>
					{
						i = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	83bb      	strh	r3, [r7, #28]
 800b6a6:	e025      	b.n	800b6f4 <ThreadModbusTask+0x2e0>
 800b6a8:	200080b8 	.word	0x200080b8
 800b6ac:	20019f84 	.word	0x20019f84
 800b6b0:	20007f96 	.word	0x20007f96
 800b6b4:	200080bc 	.word	0x200080bc
 800b6b8:	20019f90 	.word	0x20019f90
 800b6bc:	20007f9a 	.word	0x20007f9a
 800b6c0:	20016bac 	.word	0x20016bac
					}
					else if(i==1)
 800b6c4:	8bfb      	ldrh	r3, [r7, #30]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d114      	bne.n	800b6f4 <ThreadModbusTask+0x2e0>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b6ca:	4ba5      	ldr	r3, [pc, #660]	; (800b960 <ThreadModbusTask+0x54c>)
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	4ba5      	ldr	r3, [pc, #660]	; (800b964 <ThreadModbusTask+0x550>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461c      	mov	r4, r3
 800b6d4:	8bfb      	ldrh	r3, [r7, #30]
 800b6d6:	b2d0      	uxtb	r0, r2
 800b6d8:	49a3      	ldr	r1, [pc, #652]	; (800b968 <ThreadModbusTask+0x554>)
 800b6da:	f241 7270 	movw	r2, #6000	; 0x1770
 800b6de:	fb02 f204 	mul.w	r2, r2, r4
 800b6e2:	440a      	add	r2, r1
 800b6e4:	4413      	add	r3, r2
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	701a      	strb	r2, [r3, #0]
						i++;
 800b6ea:	8bfb      	ldrh	r3, [r7, #30]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 800b6f4:	8bfb      	ldrh	r3, [r7, #30]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	f240 8156 	bls.w	800b9a8 <ThreadModbusTask+0x594>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b6fc:	8bfb      	ldrh	r3, [r7, #30]
 800b6fe:	2b06      	cmp	r3, #6
 800b700:	d140      	bne.n	800b784 <ThreadModbusTask+0x370>
 800b702:	4b98      	ldr	r3, [pc, #608]	; (800b964 <ThreadModbusTask+0x550>)
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	4619      	mov	r1, r3
 800b708:	4a97      	ldr	r2, [pc, #604]	; (800b968 <ThreadModbusTask+0x554>)
 800b70a:	f241 7370 	movw	r3, #6000	; 0x1770
 800b70e:	fb03 f301 	mul.w	r3, r3, r1
 800b712:	4413      	add	r3, r2
 800b714:	3301      	adds	r3, #1
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b10      	cmp	r3, #16
 800b71a:	d133      	bne.n	800b784 <ThreadModbusTask+0x370>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b71c:	4b90      	ldr	r3, [pc, #576]	; (800b960 <ThreadModbusTask+0x54c>)
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	4b90      	ldr	r3, [pc, #576]	; (800b964 <ThreadModbusTask+0x550>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	461c      	mov	r4, r3
 800b726:	8bfb      	ldrh	r3, [r7, #30]
 800b728:	b2d0      	uxtb	r0, r2
 800b72a:	498f      	ldr	r1, [pc, #572]	; (800b968 <ThreadModbusTask+0x554>)
 800b72c:	f241 7270 	movw	r2, #6000	; 0x1770
 800b730:	fb02 f204 	mul.w	r2, r2, r4
 800b734:	440a      	add	r2, r1
 800b736:	4413      	add	r3, r2
 800b738:	4602      	mov	r2, r0
 800b73a:	701a      	strb	r2, [r3, #0]
							//i_max = 9 + (uint8_t)ModbusEvent.value.v;
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b73c:	4b89      	ldr	r3, [pc, #548]	; (800b964 <ThreadModbusTask+0x550>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	4619      	mov	r1, r3
 800b742:	4a89      	ldr	r2, [pc, #548]	; (800b968 <ThreadModbusTask+0x554>)
 800b744:	f241 7370 	movw	r3, #6000	; 0x1770
 800b748:	fb03 f301 	mul.w	r3, r3, r1
 800b74c:	4413      	add	r3, r2
 800b74e:	3304      	adds	r3, #4
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	4a83      	ldr	r2, [pc, #524]	; (800b964 <ThreadModbusTask+0x550>)
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	4610      	mov	r0, r2
 800b75a:	4983      	ldr	r1, [pc, #524]	; (800b968 <ThreadModbusTask+0x554>)
 800b75c:	f241 7270 	movw	r2, #6000	; 0x1770
 800b760:	fb02 f200 	mul.w	r2, r2, r0
 800b764:	440a      	add	r2, r1
 800b766:	3205      	adds	r2, #5
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	b29b      	uxth	r3, r3
 800b772:	3309      	adds	r3, #9
 800b774:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b776:	4a7d      	ldr	r2, [pc, #500]	; (800b96c <ThreadModbusTask+0x558>)
 800b778:	8bbb      	ldrh	r3, [r7, #28]
 800b77a:	8013      	strh	r3, [r2, #0]
							i++;
 800b77c:	8bfb      	ldrh	r3, [r7, #30]
 800b77e:	3301      	adds	r3, #1
 800b780:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b782:	e111      	b.n	800b9a8 <ThreadModbusTask+0x594>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b784:	4b76      	ldr	r3, [pc, #472]	; (800b960 <ThreadModbusTask+0x54c>)
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	4b76      	ldr	r3, [pc, #472]	; (800b964 <ThreadModbusTask+0x550>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	461c      	mov	r4, r3
 800b78e:	8bfb      	ldrh	r3, [r7, #30]
 800b790:	b2d0      	uxtb	r0, r2
 800b792:	4975      	ldr	r1, [pc, #468]	; (800b968 <ThreadModbusTask+0x554>)
 800b794:	f241 7270 	movw	r2, #6000	; 0x1770
 800b798:	fb02 f204 	mul.w	r2, r2, r4
 800b79c:	440a      	add	r2, r1
 800b79e:	4413      	add	r3, r2
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	701a      	strb	r2, [r3, #0]
							i++;
 800b7a4:	8bfb      	ldrh	r3, [r7, #30]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	83fb      	strh	r3, [r7, #30]
				break;
 800b7aa:	e0fd      	b.n	800b9a8 <ThreadModbusTask+0x594>

				case(0x10):
					if(i==0)
 800b7ac:	8bfb      	ldrh	r3, [r7, #30]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d104      	bne.n	800b7bc <ThreadModbusTask+0x3a8>
					{
						i = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b7ba:	e0f7      	b.n	800b9ac <ThreadModbusTask+0x598>
					else if(i==1)
 800b7bc:	8bfb      	ldrh	r3, [r7, #30]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d11b      	bne.n	800b7fa <ThreadModbusTask+0x3e6>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b7c2:	4b67      	ldr	r3, [pc, #412]	; (800b960 <ThreadModbusTask+0x54c>)
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	4b67      	ldr	r3, [pc, #412]	; (800b964 <ThreadModbusTask+0x550>)
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	461c      	mov	r4, r3
 800b7cc:	8bfb      	ldrh	r3, [r7, #30]
 800b7ce:	b2d0      	uxtb	r0, r2
 800b7d0:	4965      	ldr	r1, [pc, #404]	; (800b968 <ThreadModbusTask+0x554>)
 800b7d2:	f241 7270 	movw	r2, #6000	; 0x1770
 800b7d6:	fb02 f204 	mul.w	r2, r2, r4
 800b7da:	440a      	add	r2, r1
 800b7dc:	4413      	add	r3, r2
 800b7de:	4602      	mov	r2, r0
 800b7e0:	701a      	strb	r2, [r3, #0]
						i++;
 800b7e2:	8bfb      	ldrh	r3, [r7, #30]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	83fb      	strh	r3, [r7, #30]
						modem_transmit_delay_state = 1;
 800b7e8:	4b61      	ldr	r3, [pc, #388]	; (800b970 <ThreadModbusTask+0x55c>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(M95TaskHandle);
 800b7ee:	4b61      	ldr	r3, [pc, #388]	; (800b974 <ThreadModbusTask+0x560>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fb f862 	bl	80068bc <osThreadSuspend>
				break;
 800b7f8:	e0d8      	b.n	800b9ac <ThreadModbusTask+0x598>
					else if(i>1)
 800b7fa:	8bfb      	ldrh	r3, [r7, #30]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	f240 80d5 	bls.w	800b9ac <ThreadModbusTask+0x598>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b802:	8bfb      	ldrh	r3, [r7, #30]
 800b804:	2b06      	cmp	r3, #6
 800b806:	d140      	bne.n	800b88a <ThreadModbusTask+0x476>
 800b808:	4b56      	ldr	r3, [pc, #344]	; (800b964 <ThreadModbusTask+0x550>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	4619      	mov	r1, r3
 800b80e:	4a56      	ldr	r2, [pc, #344]	; (800b968 <ThreadModbusTask+0x554>)
 800b810:	f241 7370 	movw	r3, #6000	; 0x1770
 800b814:	fb03 f301 	mul.w	r3, r3, r1
 800b818:	4413      	add	r3, r2
 800b81a:	3301      	adds	r3, #1
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b10      	cmp	r3, #16
 800b820:	d133      	bne.n	800b88a <ThreadModbusTask+0x476>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b822:	4b4f      	ldr	r3, [pc, #316]	; (800b960 <ThreadModbusTask+0x54c>)
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	4b4f      	ldr	r3, [pc, #316]	; (800b964 <ThreadModbusTask+0x550>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	461c      	mov	r4, r3
 800b82c:	8bfb      	ldrh	r3, [r7, #30]
 800b82e:	b2d0      	uxtb	r0, r2
 800b830:	494d      	ldr	r1, [pc, #308]	; (800b968 <ThreadModbusTask+0x554>)
 800b832:	f241 7270 	movw	r2, #6000	; 0x1770
 800b836:	fb02 f204 	mul.w	r2, r2, r4
 800b83a:	440a      	add	r2, r1
 800b83c:	4413      	add	r3, r2
 800b83e:	4602      	mov	r2, r0
 800b840:	701a      	strb	r2, [r3, #0]
								i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b842:	4b48      	ldr	r3, [pc, #288]	; (800b964 <ThreadModbusTask+0x550>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	4619      	mov	r1, r3
 800b848:	4a47      	ldr	r2, [pc, #284]	; (800b968 <ThreadModbusTask+0x554>)
 800b84a:	f241 7370 	movw	r3, #6000	; 0x1770
 800b84e:	fb03 f301 	mul.w	r3, r3, r1
 800b852:	4413      	add	r3, r2
 800b854:	3304      	adds	r3, #4
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	021b      	lsls	r3, r3, #8
 800b85a:	4a42      	ldr	r2, [pc, #264]	; (800b964 <ThreadModbusTask+0x550>)
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	4610      	mov	r0, r2
 800b860:	4941      	ldr	r1, [pc, #260]	; (800b968 <ThreadModbusTask+0x554>)
 800b862:	f241 7270 	movw	r2, #6000	; 0x1770
 800b866:	fb02 f200 	mul.w	r2, r2, r0
 800b86a:	440a      	add	r2, r1
 800b86c:	3205      	adds	r2, #5
 800b86e:	7812      	ldrb	r2, [r2, #0]
 800b870:	4313      	orrs	r3, r2
 800b872:	b29b      	uxth	r3, r3
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	b29b      	uxth	r3, r3
 800b878:	3309      	adds	r3, #9
 800b87a:	83bb      	strh	r3, [r7, #28]
								i_m = i_max;
 800b87c:	4a3b      	ldr	r2, [pc, #236]	; (800b96c <ThreadModbusTask+0x558>)
 800b87e:	8bbb      	ldrh	r3, [r7, #28]
 800b880:	8013      	strh	r3, [r2, #0]
								i++;
 800b882:	8bfb      	ldrh	r3, [r7, #30]
 800b884:	3301      	adds	r3, #1
 800b886:	83fb      	strh	r3, [r7, #30]
				break;
 800b888:	e090      	b.n	800b9ac <ThreadModbusTask+0x598>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b88a:	4b35      	ldr	r3, [pc, #212]	; (800b960 <ThreadModbusTask+0x54c>)
 800b88c:	685a      	ldr	r2, [r3, #4]
 800b88e:	4b35      	ldr	r3, [pc, #212]	; (800b964 <ThreadModbusTask+0x550>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	461c      	mov	r4, r3
 800b894:	8bfb      	ldrh	r3, [r7, #30]
 800b896:	b2d0      	uxtb	r0, r2
 800b898:	4933      	ldr	r1, [pc, #204]	; (800b968 <ThreadModbusTask+0x554>)
 800b89a:	f241 7270 	movw	r2, #6000	; 0x1770
 800b89e:	fb02 f204 	mul.w	r2, r2, r4
 800b8a2:	440a      	add	r2, r1
 800b8a4:	4413      	add	r3, r2
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	701a      	strb	r2, [r3, #0]
							i++;
 800b8aa:	8bfb      	ldrh	r3, [r7, #30]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	83fb      	strh	r3, [r7, #30]
				break;
 800b8b0:	e07c      	b.n	800b9ac <ThreadModbusTask+0x598>

				default:
					if(i==0)
 800b8b2:	8bfb      	ldrh	r3, [r7, #30]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d104      	bne.n	800b8c2 <ThreadModbusTask+0x4ae>
					{
						i = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b8c0:	e076      	b.n	800b9b0 <ThreadModbusTask+0x59c>
					else if(i==1)
 800b8c2:	8bfb      	ldrh	r3, [r7, #30]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d104      	bne.n	800b8d2 <ThreadModbusTask+0x4be>
						i = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	83bb      	strh	r3, [r7, #28]
				break;
 800b8d0:	e06e      	b.n	800b9b0 <ThreadModbusTask+0x59c>
					else if(i>1)
 800b8d2:	8bfb      	ldrh	r3, [r7, #30]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d96b      	bls.n	800b9b0 <ThreadModbusTask+0x59c>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b8d8:	8bfb      	ldrh	r3, [r7, #30]
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d14c      	bne.n	800b978 <ThreadModbusTask+0x564>
 800b8de:	4b21      	ldr	r3, [pc, #132]	; (800b964 <ThreadModbusTask+0x550>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4a20      	ldr	r2, [pc, #128]	; (800b968 <ThreadModbusTask+0x554>)
 800b8e6:	f241 7370 	movw	r3, #6000	; 0x1770
 800b8ea:	fb03 f301 	mul.w	r3, r3, r1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b10      	cmp	r3, #16
 800b8f6:	d13f      	bne.n	800b978 <ThreadModbusTask+0x564>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b8f8:	4b19      	ldr	r3, [pc, #100]	; (800b960 <ThreadModbusTask+0x54c>)
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	4b19      	ldr	r3, [pc, #100]	; (800b964 <ThreadModbusTask+0x550>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	461c      	mov	r4, r3
 800b902:	8bfb      	ldrh	r3, [r7, #30]
 800b904:	b2d0      	uxtb	r0, r2
 800b906:	4918      	ldr	r1, [pc, #96]	; (800b968 <ThreadModbusTask+0x554>)
 800b908:	f241 7270 	movw	r2, #6000	; 0x1770
 800b90c:	fb02 f204 	mul.w	r2, r2, r4
 800b910:	440a      	add	r2, r1
 800b912:	4413      	add	r3, r2
 800b914:	4602      	mov	r2, r0
 800b916:	701a      	strb	r2, [r3, #0]
							i_max = 9 + 2*( (((uint16_t)modbus_buffer[modbus_packet_number][4])<<8) | ((uint16_t)modbus_buffer[modbus_packet_number][5]) );
 800b918:	4b12      	ldr	r3, [pc, #72]	; (800b964 <ThreadModbusTask+0x550>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	4619      	mov	r1, r3
 800b91e:	4a12      	ldr	r2, [pc, #72]	; (800b968 <ThreadModbusTask+0x554>)
 800b920:	f241 7370 	movw	r3, #6000	; 0x1770
 800b924:	fb03 f301 	mul.w	r3, r3, r1
 800b928:	4413      	add	r3, r2
 800b92a:	3304      	adds	r3, #4
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	4a0c      	ldr	r2, [pc, #48]	; (800b964 <ThreadModbusTask+0x550>)
 800b932:	7812      	ldrb	r2, [r2, #0]
 800b934:	4610      	mov	r0, r2
 800b936:	490c      	ldr	r1, [pc, #48]	; (800b968 <ThreadModbusTask+0x554>)
 800b938:	f241 7270 	movw	r2, #6000	; 0x1770
 800b93c:	fb02 f200 	mul.w	r2, r2, r0
 800b940:	440a      	add	r2, r1
 800b942:	3205      	adds	r2, #5
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	4313      	orrs	r3, r2
 800b948:	b29b      	uxth	r3, r3
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	3309      	adds	r3, #9
 800b950:	83bb      	strh	r3, [r7, #28]
							i_m = i_max;
 800b952:	4a06      	ldr	r2, [pc, #24]	; (800b96c <ThreadModbusTask+0x558>)
 800b954:	8bbb      	ldrh	r3, [r7, #28]
 800b956:	8013      	strh	r3, [r2, #0]
							i++;
 800b958:	8bfb      	ldrh	r3, [r7, #30]
 800b95a:	3301      	adds	r3, #1
 800b95c:	83fb      	strh	r3, [r7, #30]
				break;
 800b95e:	e027      	b.n	800b9b0 <ThreadModbusTask+0x59c>
 800b960:	20019f84 	.word	0x20019f84
 800b964:	20007f96 	.word	0x20007f96
 800b968:	200080bc 	.word	0x200080bc
 800b96c:	20019f90 	.word	0x20019f90
 800b970:	20007f9a 	.word	0x20007f9a
 800b974:	20016bac 	.word	0x20016bac
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b978:	4b4c      	ldr	r3, [pc, #304]	; (800baac <ThreadModbusTask+0x698>)
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	4b4c      	ldr	r3, [pc, #304]	; (800bab0 <ThreadModbusTask+0x69c>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	461c      	mov	r4, r3
 800b982:	8bfb      	ldrh	r3, [r7, #30]
 800b984:	b2d0      	uxtb	r0, r2
 800b986:	494b      	ldr	r1, [pc, #300]	; (800bab4 <ThreadModbusTask+0x6a0>)
 800b988:	f241 7270 	movw	r2, #6000	; 0x1770
 800b98c:	fb02 f204 	mul.w	r2, r2, r4
 800b990:	440a      	add	r2, r1
 800b992:	4413      	add	r3, r2
 800b994:	4602      	mov	r2, r0
 800b996:	701a      	strb	r2, [r3, #0]
							i++;
 800b998:	8bfb      	ldrh	r3, [r7, #30]
 800b99a:	3301      	adds	r3, #1
 800b99c:	83fb      	strh	r3, [r7, #30]
				break;
 800b99e:	e007      	b.n	800b9b0 <ThreadModbusTask+0x59c>
				break;
 800b9a0:	bf00      	nop
 800b9a2:	e006      	b.n	800b9b2 <ThreadModbusTask+0x59e>
				break;
 800b9a4:	bf00      	nop
 800b9a6:	e004      	b.n	800b9b2 <ThreadModbusTask+0x59e>
				break;
 800b9a8:	bf00      	nop
 800b9aa:	e002      	b.n	800b9b2 <ThreadModbusTask+0x59e>
				break;
 800b9ac:	bf00      	nop
 800b9ae:	e000      	b.n	800b9b2 <ThreadModbusTask+0x59e>
				break;
 800b9b0:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 800b9b2:	8bfa      	ldrh	r2, [r7, #30]
 800b9b4:	8bbb      	ldrh	r3, [r7, #28]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d356      	bcc.n	800ba68 <ThreadModbusTask+0x654>
 800b9ba:	8bfb      	ldrh	r3, [r7, #30]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d053      	beq.n	800ba68 <ThreadModbusTask+0x654>
 800b9c0:	8bbb      	ldrh	r3, [r7, #28]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d050      	beq.n	800ba68 <ThreadModbusTask+0x654>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 800b9c6:	4b3a      	ldr	r3, [pc, #232]	; (800bab0 <ThreadModbusTask+0x69c>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f241 7370 	movw	r3, #6000	; 0x1770
 800b9d0:	fb03 f302 	mul.w	r3, r3, r2
 800b9d4:	4a37      	ldr	r2, [pc, #220]	; (800bab4 <ThreadModbusTask+0x6a0>)
 800b9d6:	441a      	add	r2, r3
 800b9d8:	8bbb      	ldrh	r3, [r7, #28]
 800b9da:	3b02      	subs	r3, #2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f001 fe22 	bl	800d628 <CRC16>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	4a34      	ldr	r2, [pc, #208]	; (800bab8 <ThreadModbusTask+0x6a4>)
 800b9e8:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 800b9ea:	4b33      	ldr	r3, [pc, #204]	; (800bab8 <ThreadModbusTask+0x6a4>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	4a2f      	ldr	r2, [pc, #188]	; (800bab0 <ThreadModbusTask+0x69c>)
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	8bba      	ldrh	r2, [r7, #28]
 800b9fa:	3a01      	subs	r2, #1
 800b9fc:	482d      	ldr	r0, [pc, #180]	; (800bab4 <ThreadModbusTask+0x6a0>)
 800b9fe:	f241 7170 	movw	r1, #6000	; 0x1770
 800ba02:	fb01 f104 	mul.w	r1, r1, r4
 800ba06:	4401      	add	r1, r0
 800ba08:	440a      	add	r2, r1
 800ba0a:	7812      	ldrb	r2, [r2, #0]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d127      	bne.n	800ba60 <ThreadModbusTask+0x64c>
 800ba10:	4b29      	ldr	r3, [pc, #164]	; (800bab8 <ThreadModbusTask+0x6a4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	4a26      	ldr	r2, [pc, #152]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba18:	7812      	ldrb	r2, [r2, #0]
 800ba1a:	4614      	mov	r4, r2
 800ba1c:	8bba      	ldrh	r2, [r7, #28]
 800ba1e:	3a02      	subs	r2, #2
 800ba20:	4824      	ldr	r0, [pc, #144]	; (800bab4 <ThreadModbusTask+0x6a0>)
 800ba22:	f241 7170 	movw	r1, #6000	; 0x1770
 800ba26:	fb01 f104 	mul.w	r1, r1, r4
 800ba2a:	4401      	add	r1, r0
 800ba2c:	440a      	add	r2, r1
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d115      	bne.n	800ba60 <ThreadModbusTask+0x64c>
				{
					modbus_packet_number1 = modbus_packet_number;
 800ba34:	4b1e      	ldr	r3, [pc, #120]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba36:	781a      	ldrb	r2, [r3, #0]
 800ba38:	4b20      	ldr	r3, [pc, #128]	; (800babc <ThreadModbusTask+0x6a8>)
 800ba3a:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba46:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 10)
 800ba48:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d902      	bls.n	800ba56 <ThreadModbusTask+0x642>
					{
						modbus_packet_number = 0;
 800ba50:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <ThreadModbusTask+0x69c>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 800ba56:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <ThreadModbusTask+0x6ac>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fa fe1c 	bl	8006698 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 800ba60:	2300      	movs	r3, #0
 800ba62:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 800ba64:	2300      	movs	r3, #0
 800ba66:	83bb      	strh	r3, [r7, #28]
				//osThreadResume(M95TaskHandle);

			}
		}

		if(modem_transmit_delay_state == 1)
 800ba68:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <ThreadModbusTask+0x6b0>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	f47f acd6 	bne.w	800b420 <ThreadModbusTask+0xc>
		{
			modem_transmit_delay++;
 800ba74:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <ThreadModbusTask+0x6b4>)
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	4b12      	ldr	r3, [pc, #72]	; (800bac8 <ThreadModbusTask+0x6b4>)
 800ba80:	801a      	strh	r2, [r3, #0]
			if(modem_transmit_delay >= 10000)
 800ba82:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <ThreadModbusTask+0x6b4>)
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	f242 720f 	movw	r2, #9999	; 0x270f
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	f67f acc7 	bls.w	800b420 <ThreadModbusTask+0xc>
			{
				osThreadResume(M95TaskHandle);
 800ba92:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <ThreadModbusTask+0x6b8>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fa ff1c 	bl	80068d4 <osThreadResume>
				modem_transmit_delay = 0;
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <ThreadModbusTask+0x6b4>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	801a      	strh	r2, [r3, #0]
				modem_transmit_delay_state = 0;
 800baa2:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <ThreadModbusTask+0x6b0>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800baa8:	e4ba      	b.n	800b420 <ThreadModbusTask+0xc>
 800baaa:	bf00      	nop
 800baac:	20019f84 	.word	0x20019f84
 800bab0:	20007f96 	.word	0x20007f96
 800bab4:	200080bc 	.word	0x200080bc
 800bab8:	20019f94 	.word	0x20019f94
 800babc:	20007f97 	.word	0x20007f97
 800bac0:	20016bb0 	.word	0x20016bb0
 800bac4:	20007f9a 	.word	0x20007f9a
 800bac8:	20007f98 	.word	0x20007f98
 800bacc:	20016bac 	.word	0x20016bac

0800bad0 <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	6039      	str	r1, [r7, #0]
 800bada:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 800badc:	2303      	movs	r3, #3
 800bade:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800bae0:	88fb      	ldrh	r3, [r7, #6]
 800bae2:	0a1b      	lsrs	r3, r3, #8
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800baea:	88fb      	ldrh	r3, [r7, #6]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 800baf0:	2200      	movs	r2, #0
 800baf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800baf6:	4811      	ldr	r0, [pc, #68]	; (800bb3c <fm25v02_read+0x6c>)
 800baf8:	f7f7 fa2a 	bl	8002f50 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 800bafc:	bf00      	nop
 800bafe:	f107 010c 	add.w	r1, r7, #12
 800bb02:	230a      	movs	r3, #10
 800bb04:	2203      	movs	r2, #3
 800bb06:	480e      	ldr	r0, [pc, #56]	; (800bb40 <fm25v02_read+0x70>)
 800bb08:	f7f8 fa2b 	bl	8003f62 <HAL_SPI_Transmit>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1f5      	bne.n	800bafe <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 800bb12:	bf00      	nop
 800bb14:	230a      	movs	r3, #10
 800bb16:	2201      	movs	r2, #1
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	4809      	ldr	r0, [pc, #36]	; (800bb40 <fm25v02_read+0x70>)
 800bb1c:	f7f8 fb5d 	bl	80041da <HAL_SPI_Receive>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1f6      	bne.n	800bb14 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 800bb26:	2201      	movs	r2, #1
 800bb28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb2c:	4803      	ldr	r0, [pc, #12]	; (800bb3c <fm25v02_read+0x6c>)
 800bb2e:	f7f7 fa0f 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bb32:	bf00      	nop
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	40021c00 	.word	0x40021c00
 800bb40:	20007fa8 	.word	0x20007fa8

0800bb44 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	460a      	mov	r2, r1
 800bb4e:	80fb      	strh	r3, [r7, #6]
 800bb50:	4613      	mov	r3, r2
 800bb52:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 800bb54:	2306      	movs	r3, #6
 800bb56:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb5e:	481d      	ldr	r0, [pc, #116]	; (800bbd4 <fm25v02_write+0x90>)
 800bb60:	f7f7 f9f6 	bl	8002f50 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 800bb64:	bf00      	nop
 800bb66:	f107 010c 	add.w	r1, r7, #12
 800bb6a:	230a      	movs	r3, #10
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	481a      	ldr	r0, [pc, #104]	; (800bbd8 <fm25v02_write+0x94>)
 800bb70:	f7f8 f9f7 	bl	8003f62 <HAL_SPI_Transmit>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1f5      	bne.n	800bb66 <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb80:	4814      	ldr	r0, [pc, #80]	; (800bbd4 <fm25v02_write+0x90>)
 800bb82:	f7f7 f9e5 	bl	8002f50 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 800bb86:	2302      	movs	r3, #2
 800bb88:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	0a1b      	lsrs	r3, r3, #8
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800bb94:	88fb      	ldrh	r3, [r7, #6]
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 800bb9a:	797b      	ldrb	r3, [r7, #5]
 800bb9c:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bba4:	480b      	ldr	r0, [pc, #44]	; (800bbd4 <fm25v02_write+0x90>)
 800bba6:	f7f7 f9d3 	bl	8002f50 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800bbaa:	bf00      	nop
 800bbac:	f107 010c 	add.w	r1, r7, #12
 800bbb0:	230a      	movs	r3, #10
 800bbb2:	2204      	movs	r2, #4
 800bbb4:	4808      	ldr	r0, [pc, #32]	; (800bbd8 <fm25v02_write+0x94>)
 800bbb6:	f7f8 f9d4 	bl	8003f62 <HAL_SPI_Transmit>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1f5      	bne.n	800bbac <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bbc6:	4803      	ldr	r0, [pc, #12]	; (800bbd4 <fm25v02_write+0x90>)
 800bbc8:	f7f7 f9c2 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	40021c00 	.word	0x40021c00
 800bbd8:	20007fa8 	.word	0x20007fa8

0800bbdc <fm25v02_fast_read>:
	}
	return 0;
}

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	6039      	str	r1, [r7, #0]
 800bbe6:	80fb      	strh	r3, [r7, #6]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 800bbec:	230b      	movs	r3, #11
 800bbee:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800bbf0:	88fb      	ldrh	r3, [r7, #6]
 800bbf2:	0a1b      	lsrs	r3, r3, #8
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800bbfa:	88fb      	ldrh	r3, [r7, #6]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 800bc00:	23ff      	movs	r3, #255	; 0xff
 800bc02:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800bc04:	2200      	movs	r2, #0
 800bc06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc0a:	4811      	ldr	r0, [pc, #68]	; (800bc50 <fm25v02_fast_read+0x74>)
 800bc0c:	f7f7 f9a0 	bl	8002f50 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800bc10:	bf00      	nop
 800bc12:	f107 010c 	add.w	r1, r7, #12
 800bc16:	230a      	movs	r3, #10
 800bc18:	2204      	movs	r2, #4
 800bc1a:	480e      	ldr	r0, [pc, #56]	; (800bc54 <fm25v02_fast_read+0x78>)
 800bc1c:	f7f8 f9a1 	bl	8003f62 <HAL_SPI_Transmit>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f5      	bne.n	800bc12 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 800bc26:	bf00      	nop
 800bc28:	88ba      	ldrh	r2, [r7, #4]
 800bc2a:	230a      	movs	r3, #10
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	4809      	ldr	r0, [pc, #36]	; (800bc54 <fm25v02_fast_read+0x78>)
 800bc30:	f7f8 fad3 	bl	80041da <HAL_SPI_Receive>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f6      	bne.n	800bc28 <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc40:	4803      	ldr	r0, [pc, #12]	; (800bc50 <fm25v02_fast_read+0x74>)
 800bc42:	f7f7 f985 	bl	8002f50 <HAL_GPIO_WritePin>
	return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	40021c00 	.word	0x40021c00
 800bc54:	20007fa8 	.word	0x20007fa8

0800bc58 <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc62:	4802      	ldr	r0, [pc, #8]	; (800bc6c <BUZ_ON+0x14>)
 800bc64:	f7f7 f974 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bc68:	bf00      	nop
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	40020c00 	.word	0x40020c00

0800bc70 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800bc74:	2200      	movs	r2, #0
 800bc76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc7a:	4802      	ldr	r0, [pc, #8]	; (800bc84 <BUZ_OFF+0x14>)
 800bc7c:	f7f7 f968 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bc80:	bf00      	nop
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	40020c00 	.word	0x40020c00

0800bc88 <LED_VD3_ON>:
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}

void LED_VD3_ON(void) // включение светодиода VD3
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bc92:	4802      	ldr	r0, [pc, #8]	; (800bc9c <LED_VD3_ON+0x14>)
 800bc94:	f7f7 f95c 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bc98:	bf00      	nop
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	40020800 	.word	0x40020800

0800bca0 <LED_VD3_TOGGLE>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED_VD3_TOGGLE(void) // переключение светодиода VD3
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800bca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bca8:	4802      	ldr	r0, [pc, #8]	; (800bcb4 <LED_VD3_TOGGLE+0x14>)
 800bcaa:	f7f7 f96a 	bl	8002f82 <HAL_GPIO_TogglePin>
}
 800bcae:	bf00      	nop
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40020800 	.word	0x40020800

0800bcb8 <LED1_OFF>:
{
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	2104      	movs	r1, #4
 800bcc0:	4802      	ldr	r0, [pc, #8]	; (800bccc <LED1_OFF+0x14>)
 800bcc2:	f7f7 f945 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bcc6:	bf00      	nop
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	40021c00 	.word	0x40021c00

0800bcd0 <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2104      	movs	r1, #4
 800bcd8:	4802      	ldr	r0, [pc, #8]	; (800bce4 <LED1_ON+0x14>)
 800bcda:	f7f7 f939 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bcde:	bf00      	nop
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	40021c00 	.word	0x40021c00

0800bce8 <m95_power_on>:

	return 0;
}

void m95_power_on(void) // функция включения питания
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800bcec:	2200      	movs	r2, #0
 800bcee:	2140      	movs	r1, #64	; 0x40
 800bcf0:	480a      	ldr	r0, [pc, #40]	; (800bd1c <m95_power_on+0x34>)
 800bcf2:	f7f7 f92d 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bcf6:	2064      	movs	r0, #100	; 0x64
 800bcf8:	f7f5 fe22 	bl	8001940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	2140      	movs	r1, #64	; 0x40
 800bd00:	4806      	ldr	r0, [pc, #24]	; (800bd1c <m95_power_on+0x34>)
 800bd02:	f7f7 f925 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800bd06:	f240 404c 	movw	r0, #1100	; 0x44c
 800bd0a:	f7f5 fe19 	bl	8001940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2140      	movs	r1, #64	; 0x40
 800bd12:	4802      	ldr	r0, [pc, #8]	; (800bd1c <m95_power_on+0x34>)
 800bd14:	f7f7 f91c 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bd18:	bf00      	nop
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	40021c00 	.word	0x40021c00

0800bd20 <m95_power_off>:

void m95_power_off(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800bd24:	2200      	movs	r2, #0
 800bd26:	2140      	movs	r1, #64	; 0x40
 800bd28:	480a      	ldr	r0, [pc, #40]	; (800bd54 <m95_power_off+0x34>)
 800bd2a:	f7f7 f911 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bd2e:	2064      	movs	r0, #100	; 0x64
 800bd30:	f7f5 fe06 	bl	8001940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 800bd34:	2201      	movs	r2, #1
 800bd36:	2140      	movs	r1, #64	; 0x40
 800bd38:	4806      	ldr	r0, [pc, #24]	; (800bd54 <m95_power_off+0x34>)
 800bd3a:	f7f7 f909 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800bd3e:	f240 404c 	movw	r0, #1100	; 0x44c
 800bd42:	f7f5 fdfd 	bl	8001940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800bd46:	2200      	movs	r2, #0
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	4802      	ldr	r0, [pc, #8]	; (800bd54 <m95_power_off+0x34>)
 800bd4c:	f7f7 f900 	bl	8002f50 <HAL_GPIO_WritePin>
}
 800bd50:	bf00      	nop
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	40021c00 	.word	0x40021c00

0800bd58 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	80fb      	strh	r3, [r7, #6]
 800bd62:	e006      	b.n	800bd72 <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 800bd64:	88fb      	ldrh	r3, [r7, #6]
 800bd66:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <modem_rx_buffer_clear+0x30>)
 800bd68:	2100      	movs	r1, #0
 800bd6a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 800bd6c:	88fb      	ldrh	r3, [r7, #6]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	80fb      	strh	r3, [r7, #6]
 800bd72:	88fb      	ldrh	r3, [r7, #6]
 800bd74:	2bff      	cmp	r3, #255	; 0xff
 800bd76:	d9f5      	bls.n	800bd64 <modem_rx_buffer_clear+0xc>
	}
}
 800bd78:	bf00      	nop
 800bd7a:	bf00      	nop
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20016cdc 	.word	0x20016cdc

0800bd8c <ATE0>:

uint8_t ATE0 (void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
	char str_out[6];
	sprintf(str_out, "ATE0\r\n");
 800bd92:	463b      	mov	r3, r7
 800bd94:	491f      	ldr	r1, [pc, #124]	; (800be14 <ATE0+0x88>)
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 fd8e 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800bd9c:	4b1e      	ldr	r3, [pc, #120]	; (800be18 <ATE0+0x8c>)
 800bd9e:	2201      	movs	r2, #1
 800bda0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bda2:	4b1e      	ldr	r3, [pc, #120]	; (800be1c <ATE0+0x90>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bda8:	f7ff ffd6 	bl	800bd58 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bdac:	2201      	movs	r2, #1
 800bdae:	491c      	ldr	r1, [pc, #112]	; (800be20 <ATE0+0x94>)
 800bdb0:	481c      	ldr	r0, [pc, #112]	; (800be24 <ATE0+0x98>)
 800bdb2:	f7f9 f99d 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 6);
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	2206      	movs	r2, #6
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4819      	ldr	r0, [pc, #100]	; (800be24 <ATE0+0x98>)
 800bdbe:	f7f9 f919 	bl	8004ff4 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bdc2:	4b19      	ldr	r3, [pc, #100]	; (800be28 <ATE0+0x9c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fa fc16 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bdd0:	4b16      	ldr	r3, [pc, #88]	; (800be2c <ATE0+0xa0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fa fab3 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bdde:	e010      	b.n	800be02 <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800bde0:	4913      	ldr	r1, [pc, #76]	; (800be30 <ATE0+0xa4>)
 800bde2:	4814      	ldr	r0, [pc, #80]	; (800be34 <ATE0+0xa8>)
 800bde4:	f001 fd88 	bl	800d8f8 <strstr>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d009      	beq.n	800be02 <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800bdee:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <ATE0+0xa0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fa faea 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bdf8:	4b07      	ldr	r3, [pc, #28]	; (800be18 <ATE0+0x8c>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e004      	b.n	800be0c <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 800be02:	4b05      	ldr	r3, [pc, #20]	; (800be18 <ATE0+0x8c>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d0ea      	beq.n	800bde0 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 800be0a:	2301      	movs	r3, #1
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	0800e178 	.word	0x0800e178
 800be18:	20016bb4 	.word	0x20016bb4
 800be1c:	20000804 	.word	0x20000804
 800be20:	20016bdc 	.word	0x20016bdc
 800be24:	20008064 	.word	0x20008064
 800be28:	20018458 	.word	0x20018458
 800be2c:	20016b24 	.word	0x20016b24
 800be30:	0800e180 	.word	0x0800e180
 800be34:	20016cdc 	.word	0x20016cdc

0800be38 <AT>:


uint8_t AT (void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
	char str_out[4];
	sprintf(str_out, "AT\r\n");
 800be3e:	1d3b      	adds	r3, r7, #4
 800be40:	491f      	ldr	r1, [pc, #124]	; (800bec0 <AT+0x88>)
 800be42:	4618      	mov	r0, r3
 800be44:	f001 fd38 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800be48:	4b1e      	ldr	r3, [pc, #120]	; (800bec4 <AT+0x8c>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800be4e:	4b1e      	ldr	r3, [pc, #120]	; (800bec8 <AT+0x90>)
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800be54:	f7ff ff80 	bl	800bd58 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800be58:	2201      	movs	r2, #1
 800be5a:	491c      	ldr	r1, [pc, #112]	; (800becc <AT+0x94>)
 800be5c:	481c      	ldr	r0, [pc, #112]	; (800bed0 <AT+0x98>)
 800be5e:	f7f9 f947 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 4);
 800be62:	1d3b      	adds	r3, r7, #4
 800be64:	2204      	movs	r2, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4819      	ldr	r0, [pc, #100]	; (800bed0 <AT+0x98>)
 800be6a:	f7f9 f8c3 	bl	8004ff4 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800be6e:	4b19      	ldr	r3, [pc, #100]	; (800bed4 <AT+0x9c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f04f 31ff 	mov.w	r1, #4294967295
 800be76:	4618      	mov	r0, r3
 800be78:	f7fa fbc0 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800be7c:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <AT+0xa0>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800be84:	4618      	mov	r0, r3
 800be86:	f7fa fa5d 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800be8a:	e010      	b.n	800beae <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800be8c:	4913      	ldr	r1, [pc, #76]	; (800bedc <AT+0xa4>)
 800be8e:	4814      	ldr	r0, [pc, #80]	; (800bee0 <AT+0xa8>)
 800be90:	f001 fd32 	bl	800d8f8 <strstr>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800be9a:	4b0f      	ldr	r3, [pc, #60]	; (800bed8 <AT+0xa0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fa fa94 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <AT+0x8c>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	e004      	b.n	800beb8 <AT+0x80>
	while(read_rx_state == ACTIVE)
 800beae:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <AT+0x8c>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d0ea      	beq.n	800be8c <AT+0x54>
		}
	}
	return AT_ERROR;
 800beb6:	2301      	movs	r3, #1
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	0800e188 	.word	0x0800e188
 800bec4:	20016bb4 	.word	0x20016bb4
 800bec8:	20000804 	.word	0x20000804
 800becc:	20016bdc 	.word	0x20016bdc
 800bed0:	20008064 	.word	0x20008064
 800bed4:	20018458 	.word	0x20018458
 800bed8:	20016b24 	.word	0x20016b24
 800bedc:	0800e180 	.word	0x0800e180
 800bee0:	20016cdc 	.word	0x20016cdc

0800bee4 <AT_CSQ>:
	}
	return AT_ERROR;
}

uint8_t AT_CSQ (uint8_t* signal_level)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	char str_out[8];
	sprintf(str_out, "AT+CSQ\r\n");
 800beec:	f107 0308 	add.w	r3, r7, #8
 800bef0:	4931      	ldr	r1, [pc, #196]	; (800bfb8 <AT_CSQ+0xd4>)
 800bef2:	4618      	mov	r0, r3
 800bef4:	f001 fce0 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800bef8:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <AT_CSQ+0xd8>)
 800befa:	2201      	movs	r2, #1
 800befc:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800befe:	4b30      	ldr	r3, [pc, #192]	; (800bfc0 <AT_CSQ+0xdc>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bf04:	f7ff ff28 	bl	800bd58 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bf08:	2201      	movs	r2, #1
 800bf0a:	492e      	ldr	r1, [pc, #184]	; (800bfc4 <AT_CSQ+0xe0>)
 800bf0c:	482e      	ldr	r0, [pc, #184]	; (800bfc8 <AT_CSQ+0xe4>)
 800bf0e:	f7f9 f8ef 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 8);
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	2208      	movs	r2, #8
 800bf18:	4619      	mov	r1, r3
 800bf1a:	482b      	ldr	r0, [pc, #172]	; (800bfc8 <AT_CSQ+0xe4>)
 800bf1c:	f7f9 f86a 	bl	8004ff4 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bf20:	4b2a      	ldr	r3, [pc, #168]	; (800bfcc <AT_CSQ+0xe8>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f04f 31ff 	mov.w	r1, #4294967295
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fa fb67 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bf2e:	4b28      	ldr	r3, [pc, #160]	; (800bfd0 <AT_CSQ+0xec>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fa fa04 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bf3c:	e033      	b.n	800bfa6 <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 800bf3e:	4925      	ldr	r1, [pc, #148]	; (800bfd4 <AT_CSQ+0xf0>)
 800bf40:	4825      	ldr	r0, [pc, #148]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf42:	f001 fcd9 	bl	800d8f8 <strstr>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01b      	beq.n	800bf84 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 800bf4c:	4b22      	ldr	r3, [pc, #136]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf4e:	7a5b      	ldrb	r3, [r3, #9]
 800bf50:	2b2c      	cmp	r3, #44	; 0x2c
 800bf52:	d106      	bne.n	800bf62 <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 800bf54:	4b20      	ldr	r3, [pc, #128]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf56:	7a1b      	ldrb	r3, [r3, #8]
 800bf58:	3b30      	subs	r3, #48	; 0x30
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	e010      	b.n	800bf84 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 800bf62:	4b1d      	ldr	r3, [pc, #116]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf64:	7a1b      	ldrb	r3, [r3, #8]
 800bf66:	3b30      	subs	r3, #48	; 0x30
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	0092      	lsls	r2, r2, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf76:	7a5b      	ldrb	r3, [r3, #9]
 800bf78:	4413      	add	r3, r2
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	3b30      	subs	r3, #48	; 0x30
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	701a      	strb	r2, [r3, #0]
			//{
				//*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			//}

		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 800bf84:	4915      	ldr	r1, [pc, #84]	; (800bfdc <AT_CSQ+0xf8>)
 800bf86:	4814      	ldr	r0, [pc, #80]	; (800bfd8 <AT_CSQ+0xf4>)
 800bf88:	f001 fcb6 	bl	800d8f8 <strstr>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 800bf92:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <AT_CSQ+0xec>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fa fa18 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bf9c:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <AT_CSQ+0xd8>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e004      	b.n	800bfb0 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <AT_CSQ+0xd8>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d0c7      	beq.n	800bf3e <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 800bfae:	2301      	movs	r3, #1
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	0800e1a4 	.word	0x0800e1a4
 800bfbc:	20016bb4 	.word	0x20016bb4
 800bfc0:	20000804 	.word	0x20000804
 800bfc4:	20016bdc 	.word	0x20016bdc
 800bfc8:	20008064 	.word	0x20008064
 800bfcc:	20018458 	.word	0x20018458
 800bfd0:	20016b24 	.word	0x20016b24
 800bfd4:	0800e1b0 	.word	0x0800e1b0
 800bfd8:	20016cdc 	.word	0x20016cdc
 800bfdc:	0800e1b8 	.word	0x0800e1b8

0800bfe0 <AT_CIPSTATUS>:

uint8_t AT_CIPSTATUS (void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
	uint8_t str_out[14];
	sprintf(str_out, "AT+CIPSTATUS\r\n");
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	4986      	ldr	r1, [pc, #536]	; (800c204 <AT_CIPSTATUS+0x224>)
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fc64 	bl	800d8b8 <siprintf>
	read_rx_state = ACTIVE;
 800bff0:	4b85      	ldr	r3, [pc, #532]	; (800c208 <AT_CIPSTATUS+0x228>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bff6:	4b85      	ldr	r3, [pc, #532]	; (800c20c <AT_CIPSTATUS+0x22c>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bffc:	f7ff feac 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c000:	2201      	movs	r2, #1
 800c002:	4983      	ldr	r1, [pc, #524]	; (800c210 <AT_CIPSTATUS+0x230>)
 800c004:	4883      	ldr	r0, [pc, #524]	; (800c214 <AT_CIPSTATUS+0x234>)
 800c006:	f7f9 f873 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 14);
 800c00a:	463b      	mov	r3, r7
 800c00c:	220e      	movs	r2, #14
 800c00e:	4619      	mov	r1, r3
 800c010:	4880      	ldr	r0, [pc, #512]	; (800c214 <AT_CIPSTATUS+0x234>)
 800c012:	f7f8 ffef 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c016:	4b80      	ldr	r3, [pc, #512]	; (800c218 <AT_CIPSTATUS+0x238>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f04f 31ff 	mov.w	r1, #4294967295
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fa faec 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c024:	4b7d      	ldr	r3, [pc, #500]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fa f989 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c032:	e0dc      	b.n	800c1ee <AT_CIPSTATUS+0x20e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 800c034:	497a      	ldr	r1, [pc, #488]	; (800c220 <AT_CIPSTATUS+0x240>)
 800c036:	487b      	ldr	r0, [pc, #492]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c038:	f001 fc5e 	bl	800d8f8 <strstr>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <AT_CIPSTATUS+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c042:	4b76      	ldr	r3, [pc, #472]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4618      	mov	r0, r3
 800c048:	f7fa f9c0 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c04c:	4b6e      	ldr	r3, [pc, #440]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c04e:	2200      	movs	r2, #0
 800c050:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 800c052:	2302      	movs	r3, #2
 800c054:	e0d1      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 800c056:	4974      	ldr	r1, [pc, #464]	; (800c228 <AT_CIPSTATUS+0x248>)
 800c058:	4872      	ldr	r0, [pc, #456]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c05a:	f001 fc4d 	bl	800d8f8 <strstr>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d009      	beq.n	800c078 <AT_CIPSTATUS+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c064:	4b6d      	ldr	r3, [pc, #436]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fa f9af 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c06e:	4b66      	ldr	r3, [pc, #408]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c070:	2200      	movs	r2, #0
 800c072:	701a      	strb	r2, [r3, #0]
			return IP_START;
 800c074:	2303      	movs	r3, #3
 800c076:	e0c0      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 800c078:	496c      	ldr	r1, [pc, #432]	; (800c22c <AT_CIPSTATUS+0x24c>)
 800c07a:	486a      	ldr	r0, [pc, #424]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c07c:	f001 fc3c 	bl	800d8f8 <strstr>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d009      	beq.n	800c09a <AT_CIPSTATUS+0xba>
		{
			osTimerStop(AT_TimerHandle);
 800c086:	4b65      	ldr	r3, [pc, #404]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fa f99e 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c090:	4b5d      	ldr	r3, [pc, #372]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 800c096:	2304      	movs	r3, #4
 800c098:	e0af      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 800c09a:	4965      	ldr	r1, [pc, #404]	; (800c230 <AT_CIPSTATUS+0x250>)
 800c09c:	4861      	ldr	r0, [pc, #388]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c09e:	f001 fc2b 	bl	800d8f8 <strstr>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <AT_CIPSTATUS+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 800c0a8:	4b5c      	ldr	r3, [pc, #368]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fa f98d 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0b2:	4b55      	ldr	r3, [pc, #340]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 800c0b8:	2305      	movs	r3, #5
 800c0ba:	e09e      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 800c0bc:	495d      	ldr	r1, [pc, #372]	; (800c234 <AT_CIPSTATUS+0x254>)
 800c0be:	4859      	ldr	r0, [pc, #356]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c0c0:	f001 fc1a 	bl	800d8f8 <strstr>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <AT_CIPSTATUS+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 800c0ca:	4b54      	ldr	r3, [pc, #336]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fa f97c 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0d4:	4b4c      	ldr	r3, [pc, #304]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 800c0da:	2306      	movs	r3, #6
 800c0dc:	e08d      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 800c0de:	4956      	ldr	r1, [pc, #344]	; (800c238 <AT_CIPSTATUS+0x258>)
 800c0e0:	4850      	ldr	r0, [pc, #320]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c0e2:	f001 fc09 	bl	800d8f8 <strstr>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <AT_CIPSTATUS+0x120>
		{
			osTimerStop(AT_TimerHandle);
 800c0ec:	4b4b      	ldr	r3, [pc, #300]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fa f96b 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c0f6:	4b44      	ldr	r3, [pc, #272]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 800c0fc:	2307      	movs	r3, #7
 800c0fe:	e07c      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 800c100:	494e      	ldr	r1, [pc, #312]	; (800c23c <AT_CIPSTATUS+0x25c>)
 800c102:	4848      	ldr	r0, [pc, #288]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c104:	f001 fbf8 	bl	800d8f8 <strstr>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <AT_CIPSTATUS+0x142>
		{
			osTimerStop(AT_TimerHandle);
 800c10e:	4b43      	ldr	r3, [pc, #268]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	f7fa f95a 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c118:	4b3b      	ldr	r3, [pc, #236]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 800c11e:	2308      	movs	r3, #8
 800c120:	e06b      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 800c122:	4947      	ldr	r1, [pc, #284]	; (800c240 <AT_CIPSTATUS+0x260>)
 800c124:	483f      	ldr	r0, [pc, #252]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c126:	f001 fbe7 	bl	800d8f8 <strstr>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <AT_CIPSTATUS+0x164>
		{
			osTimerStop(AT_TimerHandle);
 800c130:	4b3a      	ldr	r3, [pc, #232]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4618      	mov	r0, r3
 800c136:	f7fa f949 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c13a:	4b33      	ldr	r3, [pc, #204]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 800c140:	2309      	movs	r3, #9
 800c142:	e05a      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 800c144:	493f      	ldr	r1, [pc, #252]	; (800c244 <AT_CIPSTATUS+0x264>)
 800c146:	4837      	ldr	r0, [pc, #220]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c148:	f001 fbd6 	bl	800d8f8 <strstr>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <AT_CIPSTATUS+0x186>
		{
			osTimerStop(AT_TimerHandle);
 800c152:	4b32      	ldr	r3, [pc, #200]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7fa f938 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c15c:	4b2a      	ldr	r3, [pc, #168]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 800c162:	230a      	movs	r3, #10
 800c164:	e049      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 800c166:	4938      	ldr	r1, [pc, #224]	; (800c248 <AT_CIPSTATUS+0x268>)
 800c168:	482e      	ldr	r0, [pc, #184]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c16a:	f001 fbc5 	bl	800d8f8 <strstr>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d009      	beq.n	800c188 <AT_CIPSTATUS+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 800c174:	4b29      	ldr	r3, [pc, #164]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fa f927 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c17e:	4b22      	ldr	r3, [pc, #136]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c180:	2200      	movs	r2, #0
 800c182:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 800c184:	230b      	movs	r3, #11
 800c186:	e038      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 800c188:	4930      	ldr	r1, [pc, #192]	; (800c24c <AT_CIPSTATUS+0x26c>)
 800c18a:	4826      	ldr	r0, [pc, #152]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c18c:	f001 fbb4 	bl	800d8f8 <strstr>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <AT_CIPSTATUS+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 800c196:	4b21      	ldr	r3, [pc, #132]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fa f916 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c1a0:	4b19      	ldr	r3, [pc, #100]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	e027      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c1aa:	4929      	ldr	r1, [pc, #164]	; (800c250 <AT_CIPSTATUS+0x270>)
 800c1ac:	481d      	ldr	r0, [pc, #116]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c1ae:	f001 fba3 	bl	800d8f8 <strstr>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d009      	beq.n	800c1cc <AT_CIPSTATUS+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 800c1b8:	4b18      	ldr	r3, [pc, #96]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fa f905 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c1c2:	4b11      	ldr	r3, [pc, #68]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e016      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CLOSED\r\n") != NULL )
 800c1cc:	4921      	ldr	r1, [pc, #132]	; (800c254 <AT_CIPSTATUS+0x274>)
 800c1ce:	4815      	ldr	r0, [pc, #84]	; (800c224 <AT_CIPSTATUS+0x244>)
 800c1d0:	f001 fb92 	bl	800d8f8 <strstr>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <AT_CIPSTATUS+0x20e>
		{
			osTimerStop(AT_TimerHandle);
 800c1da:	4b10      	ldr	r3, [pc, #64]	; (800c21c <AT_CIPSTATUS+0x23c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fa f8f4 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c1e4:	4b08      	ldr	r3, [pc, #32]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	701a      	strb	r2, [r3, #0]
			return TCP_CLOSED;
 800c1ea:	230d      	movs	r3, #13
 800c1ec:	e005      	b.n	800c1fa <AT_CIPSTATUS+0x21a>
	while(read_rx_state == ACTIVE)
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <AT_CIPSTATUS+0x228>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	f43f af1e 	beq.w	800c034 <AT_CIPSTATUS+0x54>
		}

	}
	return AT_ERROR;
 800c1f8:	2301      	movs	r3, #1
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	0800e1bc 	.word	0x0800e1bc
 800c208:	20016bb4 	.word	0x20016bb4
 800c20c:	20000804 	.word	0x20000804
 800c210:	20016bdc 	.word	0x20016bdc
 800c214:	20008064 	.word	0x20008064
 800c218:	20018458 	.word	0x20018458
 800c21c:	20016b24 	.word	0x20016b24
 800c220:	0800e1cc 	.word	0x0800e1cc
 800c224:	20016cdc 	.word	0x20016cdc
 800c228:	0800e1dc 	.word	0x0800e1dc
 800c22c:	0800e1e8 	.word	0x0800e1e8
 800c230:	0800e1f4 	.word	0x0800e1f4
 800c234:	0800e200 	.word	0x0800e200
 800c238:	0800e210 	.word	0x0800e210
 800c23c:	0800e21c 	.word	0x0800e21c
 800c240:	0800e230 	.word	0x0800e230
 800c244:	0800e244 	.word	0x0800e244
 800c248:	0800e250 	.word	0x0800e250
 800c24c:	0800e260 	.word	0x0800e260
 800c250:	0800e26c 	.word	0x0800e26c
 800c254:	0800e274 	.word	0x0800e274

0800c258 <AT_CSTT>:

uint8_t AT_CSTT  (char* apn, char* user, char* password)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b0a0      	sub	sp, #128	; 0x80
 800c25c:	af02      	add	r7, sp, #8
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[101];
	sprintf(str_out, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", apn, user, password);
 800c264:	f107 0010 	add.w	r0, r7, #16
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	492d      	ldr	r1, [pc, #180]	; (800c328 <AT_CSTT+0xd0>)
 800c272:	f001 fb21 	bl	800d8b8 <siprintf>
	n = strlen(str_out);
 800c276:	f107 0310 	add.w	r3, r7, #16
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7f3 ffa8 	bl	80001d0 <strlen>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 800c286:	4b29      	ldr	r3, [pc, #164]	; (800c32c <AT_CSTT+0xd4>)
 800c288:	2201      	movs	r2, #1
 800c28a:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c28c:	4b28      	ldr	r3, [pc, #160]	; (800c330 <AT_CSTT+0xd8>)
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c292:	f7ff fd61 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c296:	2201      	movs	r2, #1
 800c298:	4926      	ldr	r1, [pc, #152]	; (800c334 <AT_CSTT+0xdc>)
 800c29a:	4827      	ldr	r0, [pc, #156]	; (800c338 <AT_CSTT+0xe0>)
 800c29c:	f7f8 ff28 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 800c2a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	f107 0310 	add.w	r3, r7, #16
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	4822      	ldr	r0, [pc, #136]	; (800c338 <AT_CSTT+0xe0>)
 800c2ae:	f7f8 fea1 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c2b2:	4b22      	ldr	r3, [pc, #136]	; (800c33c <AT_CSTT+0xe4>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f04f 31ff 	mov.w	r1, #4294967295
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fa f99e 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c2c0:	4b1f      	ldr	r3, [pc, #124]	; (800c340 <AT_CSTT+0xe8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fa f83b 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c2ce:	e021      	b.n	800c314 <AT_CSTT+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c2d0:	491c      	ldr	r1, [pc, #112]	; (800c344 <AT_CSTT+0xec>)
 800c2d2:	481d      	ldr	r0, [pc, #116]	; (800c348 <AT_CSTT+0xf0>)
 800c2d4:	f001 fb10 	bl	800d8f8 <strstr>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d009      	beq.n	800c2f2 <AT_CSTT+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 800c2de:	4b18      	ldr	r3, [pc, #96]	; (800c340 <AT_CSTT+0xe8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fa f872 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c2e8:	4b10      	ldr	r3, [pc, #64]	; (800c32c <AT_CSTT+0xd4>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e015      	b.n	800c31e <AT_CSTT+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c2f2:	4916      	ldr	r1, [pc, #88]	; (800c34c <AT_CSTT+0xf4>)
 800c2f4:	4814      	ldr	r0, [pc, #80]	; (800c348 <AT_CSTT+0xf0>)
 800c2f6:	f001 faff 	bl	800d8f8 <strstr>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d009      	beq.n	800c314 <AT_CSTT+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <AT_CSTT+0xe8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4618      	mov	r0, r3
 800c306:	f7fa f861 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c30a:	4b08      	ldr	r3, [pc, #32]	; (800c32c <AT_CSTT+0xd4>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e004      	b.n	800c31e <AT_CSTT+0xc6>
	while(read_rx_state == ACTIVE)
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <AT_CSTT+0xd4>)
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d0d9      	beq.n	800c2d0 <AT_CSTT+0x78>
		}

	}
	return AT_ERROR;
 800c31c:	2301      	movs	r3, #1

}
 800c31e:	4618      	mov	r0, r3
 800c320:	3778      	adds	r7, #120	; 0x78
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	0800e284 	.word	0x0800e284
 800c32c:	20016bb4 	.word	0x20016bb4
 800c330:	20000804 	.word	0x20000804
 800c334:	20016bdc 	.word	0x20016bdc
 800c338:	20008064 	.word	0x20008064
 800c33c:	20018458 	.word	0x20018458
 800c340:	20016b24 	.word	0x20016b24
 800c344:	0800e180 	.word	0x0800e180
 800c348:	20016cdc 	.word	0x20016cdc
 800c34c:	0800e26c 	.word	0x0800e26c

0800c350 <AT_CIICR>:

uint8_t AT_CIICR  (void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIICR\r\n");
 800c356:	1d3b      	adds	r3, r7, #4
 800c358:	4928      	ldr	r1, [pc, #160]	; (800c3fc <AT_CIICR+0xac>)
 800c35a:	4618      	mov	r0, r3
 800c35c:	f001 faac 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800c360:	4b27      	ldr	r3, [pc, #156]	; (800c400 <AT_CIICR+0xb0>)
 800c362:	2201      	movs	r2, #1
 800c364:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c366:	4b27      	ldr	r3, [pc, #156]	; (800c404 <AT_CIICR+0xb4>)
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c36c:	f7ff fcf4 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c370:	2201      	movs	r2, #1
 800c372:	4925      	ldr	r1, [pc, #148]	; (800c408 <AT_CIICR+0xb8>)
 800c374:	4825      	ldr	r0, [pc, #148]	; (800c40c <AT_CIICR+0xbc>)
 800c376:	f7f8 febb 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800c37a:	1d3b      	adds	r3, r7, #4
 800c37c:	220a      	movs	r2, #10
 800c37e:	4619      	mov	r1, r3
 800c380:	4822      	ldr	r0, [pc, #136]	; (800c40c <AT_CIICR+0xbc>)
 800c382:	f7f8 fe37 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c386:	4b22      	ldr	r3, [pc, #136]	; (800c410 <AT_CIICR+0xc0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f04f 31ff 	mov.w	r1, #4294967295
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fa f934 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800c394:	4b1f      	ldr	r3, [pc, #124]	; (800c414 <AT_CIICR+0xc4>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f241 3188 	movw	r1, #5000	; 0x1388
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f9 ffd1 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c3a2:	e021      	b.n	800c3e8 <AT_CIICR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c3a4:	491c      	ldr	r1, [pc, #112]	; (800c418 <AT_CIICR+0xc8>)
 800c3a6:	481d      	ldr	r0, [pc, #116]	; (800c41c <AT_CIICR+0xcc>)
 800c3a8:	f001 faa6 	bl	800d8f8 <strstr>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d009      	beq.n	800c3c6 <AT_CIICR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c3b2:	4b18      	ldr	r3, [pc, #96]	; (800c414 <AT_CIICR+0xc4>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fa f808 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c3bc:	4b10      	ldr	r3, [pc, #64]	; (800c400 <AT_CIICR+0xb0>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e015      	b.n	800c3f2 <AT_CIICR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c3c6:	4916      	ldr	r1, [pc, #88]	; (800c420 <AT_CIICR+0xd0>)
 800c3c8:	4814      	ldr	r0, [pc, #80]	; (800c41c <AT_CIICR+0xcc>)
 800c3ca:	f001 fa95 	bl	800d8f8 <strstr>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <AT_CIICR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c3d4:	4b0f      	ldr	r3, [pc, #60]	; (800c414 <AT_CIICR+0xc4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f9 fff7 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c3de:	4b08      	ldr	r3, [pc, #32]	; (800c400 <AT_CIICR+0xb0>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e004      	b.n	800c3f2 <AT_CIICR+0xa2>
	while(read_rx_state == ACTIVE)
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <AT_CIICR+0xb0>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d0d9      	beq.n	800c3a4 <AT_CIICR+0x54>
		}

	}
	return AT_ERROR;
 800c3f0:	2301      	movs	r3, #1

}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800e2a0 	.word	0x0800e2a0
 800c400:	20016bb4 	.word	0x20016bb4
 800c404:	20000804 	.word	0x20000804
 800c408:	20016bdc 	.word	0x20016bdc
 800c40c:	20008064 	.word	0x20008064
 800c410:	20018458 	.word	0x20018458
 800c414:	20016b24 	.word	0x20016b24
 800c418:	0800e180 	.word	0x0800e180
 800c41c:	20016cdc 	.word	0x20016cdc
 800c420:	0800e26c 	.word	0x0800e26c

0800c424 <AT_CIFSR>:

uint8_t AT_CIFSR  (void)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIFSR\r\n");
 800c42a:	1d3b      	adds	r3, r7, #4
 800c42c:	4928      	ldr	r1, [pc, #160]	; (800c4d0 <AT_CIFSR+0xac>)
 800c42e:	4618      	mov	r0, r3
 800c430:	f001 fa42 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800c434:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <AT_CIFSR+0xb0>)
 800c436:	2201      	movs	r2, #1
 800c438:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c43a:	4b27      	ldr	r3, [pc, #156]	; (800c4d8 <AT_CIFSR+0xb4>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c440:	f7ff fc8a 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c444:	2201      	movs	r2, #1
 800c446:	4925      	ldr	r1, [pc, #148]	; (800c4dc <AT_CIFSR+0xb8>)
 800c448:	4825      	ldr	r0, [pc, #148]	; (800c4e0 <AT_CIFSR+0xbc>)
 800c44a:	f7f8 fe51 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800c44e:	1d3b      	adds	r3, r7, #4
 800c450:	220a      	movs	r2, #10
 800c452:	4619      	mov	r1, r3
 800c454:	4822      	ldr	r0, [pc, #136]	; (800c4e0 <AT_CIFSR+0xbc>)
 800c456:	f7f8 fdcd 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c45a:	4b22      	ldr	r3, [pc, #136]	; (800c4e4 <AT_CIFSR+0xc0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f04f 31ff 	mov.w	r1, #4294967295
 800c462:	4618      	mov	r0, r3
 800c464:	f7fa f8ca 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800c468:	4b1f      	ldr	r3, [pc, #124]	; (800c4e8 <AT_CIFSR+0xc4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f241 3188 	movw	r1, #5000	; 0x1388
 800c470:	4618      	mov	r0, r3
 800c472:	f7f9 ff67 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c476:	e021      	b.n	800c4bc <AT_CIFSR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c478:	491c      	ldr	r1, [pc, #112]	; (800c4ec <AT_CIFSR+0xc8>)
 800c47a:	481d      	ldr	r0, [pc, #116]	; (800c4f0 <AT_CIFSR+0xcc>)
 800c47c:	f001 fa3c 	bl	800d8f8 <strstr>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d009      	beq.n	800c49a <AT_CIFSR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c486:	4b18      	ldr	r3, [pc, #96]	; (800c4e8 <AT_CIFSR+0xc4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f9 ff9e 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <AT_CIFSR+0xb0>)
 800c492:	2200      	movs	r2, #0
 800c494:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	e015      	b.n	800c4c6 <AT_CIFSR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c49a:	4916      	ldr	r1, [pc, #88]	; (800c4f4 <AT_CIFSR+0xd0>)
 800c49c:	4814      	ldr	r0, [pc, #80]	; (800c4f0 <AT_CIFSR+0xcc>)
 800c49e:	f001 fa2b 	bl	800d8f8 <strstr>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d009      	beq.n	800c4bc <AT_CIFSR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c4a8:	4b0f      	ldr	r3, [pc, #60]	; (800c4e8 <AT_CIFSR+0xc4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7f9 ff8d 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <AT_CIFSR+0xb0>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e004      	b.n	800c4c6 <AT_CIFSR+0xa2>
	while(read_rx_state == ACTIVE)
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <AT_CIFSR+0xb0>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d0d9      	beq.n	800c478 <AT_CIFSR+0x54>
		}

	}
	return AT_ERROR;
 800c4c4:	2301      	movs	r3, #1

}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800e2ac 	.word	0x0800e2ac
 800c4d4:	20016bb4 	.word	0x20016bb4
 800c4d8:	20000804 	.word	0x20000804
 800c4dc:	20016bdc 	.word	0x20016bdc
 800c4e0:	20008064 	.word	0x20008064
 800c4e4:	20018458 	.word	0x20018458
 800c4e8:	20016b24 	.word	0x20016b24
 800c4ec:	0800e180 	.word	0x0800e180
 800c4f0:	20016cdc 	.word	0x20016cdc
 800c4f4:	0800e26c 	.word	0x0800e26c

0800c4f8 <AT_CIPSTART>:

uint8_t AT_CIPSTART (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b098      	sub	sp, #96	; 0x60
 800c4fc:	af04      	add	r7, sp, #16
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	4608      	mov	r0, r1
 800c502:	4611      	mov	r1, r2
 800c504:	461a      	mov	r2, r3
 800c506:	4603      	mov	r3, r0
 800c508:	70fb      	strb	r3, [r7, #3]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70bb      	strb	r3, [r7, #2]
 800c50e:	4613      	mov	r3, r2
 800c510:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[42];
	uint8_t n;

	sprintf(str1, "%s", type);
 800c512:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	4951      	ldr	r1, [pc, #324]	; (800c660 <AT_CIPSTART+0x168>)
 800c51a:	4618      	mov	r0, r3
 800c51c:	f001 f9cc 	bl	800d8b8 <siprintf>
	sprintf(str2, "%u", ip1);
 800c520:	78fa      	ldrb	r2, [r7, #3]
 800c522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c526:	494f      	ldr	r1, [pc, #316]	; (800c664 <AT_CIPSTART+0x16c>)
 800c528:	4618      	mov	r0, r3
 800c52a:	f001 f9c5 	bl	800d8b8 <siprintf>
	sprintf(str3, "%u", ip2);
 800c52e:	78ba      	ldrb	r2, [r7, #2]
 800c530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c534:	494b      	ldr	r1, [pc, #300]	; (800c664 <AT_CIPSTART+0x16c>)
 800c536:	4618      	mov	r0, r3
 800c538:	f001 f9be 	bl	800d8b8 <siprintf>
	sprintf(str4, "%u", ip3);
 800c53c:	787a      	ldrb	r2, [r7, #1]
 800c53e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c542:	4948      	ldr	r1, [pc, #288]	; (800c664 <AT_CIPSTART+0x16c>)
 800c544:	4618      	mov	r0, r3
 800c546:	f001 f9b7 	bl	800d8b8 <siprintf>
	sprintf(str5, "%u", ip4);
 800c54a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c54e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c552:	4944      	ldr	r1, [pc, #272]	; (800c664 <AT_CIPSTART+0x16c>)
 800c554:	4618      	mov	r0, r3
 800c556:	f001 f9af 	bl	800d8b8 <siprintf>
	sprintf(str6, "%u", port);
 800c55a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800c55e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c562:	4940      	ldr	r1, [pc, #256]	; (800c664 <AT_CIPSTART+0x16c>)
 800c564:	4618      	mov	r0, r3
 800c566:	f001 f9a7 	bl	800d8b8 <siprintf>

	n = sprintf(str7, "AT+CIPSTART=\"%s\",\"%s.%s.%s.%s\",%s\r\n", str1, str2, str3, str4, str5, str6);
 800c56a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c56e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c572:	f107 0008 	add.w	r0, r7, #8
 800c576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c57a:	9303      	str	r3, [sp, #12]
 800c57c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c580:	9302      	str	r3, [sp, #8]
 800c582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	460b      	mov	r3, r1
 800c590:	4935      	ldr	r1, [pc, #212]	; (800c668 <AT_CIPSTART+0x170>)
 800c592:	f001 f991 	bl	800d8b8 <siprintf>
 800c596:	4603      	mov	r3, r0
 800c598:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 800c59c:	4b33      	ldr	r3, [pc, #204]	; (800c66c <AT_CIPSTART+0x174>)
 800c59e:	2201      	movs	r2, #1
 800c5a0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c5a2:	4b33      	ldr	r3, [pc, #204]	; (800c670 <AT_CIPSTART+0x178>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c5a8:	f7ff fbd6 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	4931      	ldr	r1, [pc, #196]	; (800c674 <AT_CIPSTART+0x17c>)
 800c5b0:	4831      	ldr	r0, [pc, #196]	; (800c678 <AT_CIPSTART+0x180>)
 800c5b2:	f7f8 fd9d 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 800c5b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	482d      	ldr	r0, [pc, #180]	; (800c678 <AT_CIPSTART+0x180>)
 800c5c4:	f7f8 fd16 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c5c8:	4b2c      	ldr	r3, [pc, #176]	; (800c67c <AT_CIPSTART+0x184>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f04f 31ff 	mov.w	r1, #4294967295
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fa f813 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 800c5d6:	4b2a      	ldr	r3, [pc, #168]	; (800c680 <AT_CIPSTART+0x188>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f9 feb0 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c5e4:	e032      	b.n	800c64c <AT_CIPSTART+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 800c5e6:	4927      	ldr	r1, [pc, #156]	; (800c684 <AT_CIPSTART+0x18c>)
 800c5e8:	4827      	ldr	r0, [pc, #156]	; (800c688 <AT_CIPSTART+0x190>)
 800c5ea:	f001 f985 	bl	800d8f8 <strstr>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d009      	beq.n	800c608 <AT_CIPSTART+0x110>
		{
			osTimerStop(AT_TimerHandle);
 800c5f4:	4b22      	ldr	r3, [pc, #136]	; (800c680 <AT_CIPSTART+0x188>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7f9 fee7 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c5fe:	4b1b      	ldr	r3, [pc, #108]	; (800c66c <AT_CIPSTART+0x174>)
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	e026      	b.n	800c656 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 800c608:	4920      	ldr	r1, [pc, #128]	; (800c68c <AT_CIPSTART+0x194>)
 800c60a:	481f      	ldr	r0, [pc, #124]	; (800c688 <AT_CIPSTART+0x190>)
 800c60c:	f001 f974 	bl	800d8f8 <strstr>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d009      	beq.n	800c62a <AT_CIPSTART+0x132>
		{
			osTimerStop(AT_TimerHandle);
 800c616:	4b1a      	ldr	r3, [pc, #104]	; (800c680 <AT_CIPSTART+0x188>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7f9 fed6 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c620:	4b12      	ldr	r3, [pc, #72]	; (800c66c <AT_CIPSTART+0x174>)
 800c622:	2200      	movs	r2, #0
 800c624:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	e015      	b.n	800c656 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 800c62a:	4919      	ldr	r1, [pc, #100]	; (800c690 <AT_CIPSTART+0x198>)
 800c62c:	4816      	ldr	r0, [pc, #88]	; (800c688 <AT_CIPSTART+0x190>)
 800c62e:	f001 f963 	bl	800d8f8 <strstr>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d009      	beq.n	800c64c <AT_CIPSTART+0x154>
		{
			osTimerStop(AT_TimerHandle);
 800c638:	4b11      	ldr	r3, [pc, #68]	; (800c680 <AT_CIPSTART+0x188>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f9 fec5 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <AT_CIPSTART+0x174>)
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e004      	b.n	800c656 <AT_CIPSTART+0x15e>
	while(read_rx_state == ACTIVE)
 800c64c:	4b07      	ldr	r3, [pc, #28]	; (800c66c <AT_CIPSTART+0x174>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d0c8      	beq.n	800c5e6 <AT_CIPSTART+0xee>
		}

	}
	return AT_ERROR;
 800c654:	2301      	movs	r3, #1

}
 800c656:	4618      	mov	r0, r3
 800c658:	3750      	adds	r7, #80	; 0x50
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	0800e2b8 	.word	0x0800e2b8
 800c664:	0800e2bc 	.word	0x0800e2bc
 800c668:	0800e2c0 	.word	0x0800e2c0
 800c66c:	20016bb4 	.word	0x20016bb4
 800c670:	20000804 	.word	0x20000804
 800c674:	20016bdc 	.word	0x20016bdc
 800c678:	20008064 	.word	0x20008064
 800c67c:	20018458 	.word	0x20018458
 800c680:	20016b24 	.word	0x20016b24
 800c684:	0800e250 	.word	0x0800e250
 800c688:	20016cdc 	.word	0x20016cdc
 800c68c:	0800e2e4 	.word	0x0800e2e4
 800c690:	0800e2f8 	.word	0x0800e2f8

0800c694 <AT_CIPSEND>:

uint8_t AT_CIPSEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[17];

	n1 = sprintf(str_out, "AT+CIPSEND=%u\r\n", length);
 800c6a0:	887a      	ldrh	r2, [r7, #2]
 800c6a2:	f107 030c 	add.w	r3, r7, #12
 800c6a6:	493a      	ldr	r1, [pc, #232]	; (800c790 <AT_CIPSEND+0xfc>)
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f905 	bl	800d8b8 <siprintf>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	77fb      	strb	r3, [r7, #31]

 	read_rx_state = ACTIVE;
 800c6b2:	4b38      	ldr	r3, [pc, #224]	; (800c794 <AT_CIPSEND+0x100>)
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c6b8:	4b37      	ldr	r3, [pc, #220]	; (800c798 <AT_CIPSEND+0x104>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c6be:	f7ff fb4b 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	4935      	ldr	r1, [pc, #212]	; (800c79c <AT_CIPSEND+0x108>)
 800c6c6:	4836      	ldr	r0, [pc, #216]	; (800c7a0 <AT_CIPSEND+0x10c>)
 800c6c8:	f7f8 fd12 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 800c6cc:	7ffb      	ldrb	r3, [r7, #31]
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4832      	ldr	r0, [pc, #200]	; (800c7a0 <AT_CIPSEND+0x10c>)
 800c6d8:	f7f8 fc8c 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c6dc:	4b31      	ldr	r3, [pc, #196]	; (800c7a4 <AT_CIPSEND+0x110>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f9 ff89 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c6ea:	4b2f      	ldr	r3, [pc, #188]	; (800c7a8 <AT_CIPSEND+0x114>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7f9 fe26 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c6f8:	e041      	b.n	800c77e <AT_CIPSEND+0xea>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 800c6fa:	492c      	ldr	r1, [pc, #176]	; (800c7ac <AT_CIPSEND+0x118>)
 800c6fc:	482c      	ldr	r0, [pc, #176]	; (800c7b0 <AT_CIPSEND+0x11c>)
 800c6fe:	f001 f8fb 	bl	800d8f8 <strstr>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d03a      	beq.n	800c77e <AT_CIPSEND+0xea>
		{
			osTimerStop(AT_TimerHandle);
 800c708:	4b27      	ldr	r3, [pc, #156]	; (800c7a8 <AT_CIPSEND+0x114>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7f9 fe5d 	bl	80063cc <osTimerStop>
			modem_rx_number = 0;
 800c712:	4b21      	ldr	r3, [pc, #132]	; (800c798 <AT_CIPSEND+0x104>)
 800c714:	2200      	movs	r2, #0
 800c716:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 800c718:	f7ff fb1e 	bl	800bd58 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c71c:	2201      	movs	r2, #1
 800c71e:	491f      	ldr	r1, [pc, #124]	; (800c79c <AT_CIPSEND+0x108>)
 800c720:	481f      	ldr	r0, [pc, #124]	; (800c7a0 <AT_CIPSEND+0x10c>)
 800c722:	f7f8 fce5 	bl	80050f0 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 800c726:	887b      	ldrh	r3, [r7, #2]
 800c728:	461a      	mov	r2, r3
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	481c      	ldr	r0, [pc, #112]	; (800c7a0 <AT_CIPSEND+0x10c>)
 800c72e:	f7f8 fc61 	bl	8004ff4 <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c732:	4b1c      	ldr	r3, [pc, #112]	; (800c7a4 <AT_CIPSEND+0x110>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f04f 31ff 	mov.w	r1, #4294967295
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f9 ff5e 	bl	80065fc <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 800c740:	4b19      	ldr	r3, [pc, #100]	; (800c7a8 <AT_CIPSEND+0x114>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c748:	4618      	mov	r0, r3
 800c74a:	f7f9 fdfb 	bl	8006344 <osTimerStart>
			while(read_rx_state == ACTIVE)
 800c74e:	e010      	b.n	800c772 <AT_CIPSEND+0xde>
					read_rx_state = NOT_ACTIVE;
					return AT_OK;
				}
				*/

				if( strstr(modem_rx_buffer, "SEND OK\r\n") != NULL )
 800c750:	4918      	ldr	r1, [pc, #96]	; (800c7b4 <AT_CIPSEND+0x120>)
 800c752:	4817      	ldr	r0, [pc, #92]	; (800c7b0 <AT_CIPSEND+0x11c>)
 800c754:	f001 f8d0 	bl	800d8f8 <strstr>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d009      	beq.n	800c772 <AT_CIPSEND+0xde>
				{
					osTimerStop(AT_TimerHandle);
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <AT_CIPSEND+0x114>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4618      	mov	r0, r3
 800c764:	f7f9 fe32 	bl	80063cc <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <AT_CIPSEND+0x100>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	e00a      	b.n	800c788 <AT_CIPSEND+0xf4>
			while(read_rx_state == ACTIVE)
 800c772:	4b08      	ldr	r3, [pc, #32]	; (800c794 <AT_CIPSEND+0x100>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d0ea      	beq.n	800c750 <AT_CIPSEND+0xbc>
					return AT_ERROR;
				}
				*/
			}

			return AT_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e004      	b.n	800c788 <AT_CIPSEND+0xf4>
	while(read_rx_state == ACTIVE)
 800c77e:	4b05      	ldr	r3, [pc, #20]	; (800c794 <AT_CIPSEND+0x100>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d0b9      	beq.n	800c6fa <AT_CIPSEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 800c786:	2301      	movs	r3, #1

}
 800c788:	4618      	mov	r0, r3
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	0800e308 	.word	0x0800e308
 800c794:	20016bb4 	.word	0x20016bb4
 800c798:	20000804 	.word	0x20000804
 800c79c:	20016bdc 	.word	0x20016bdc
 800c7a0:	20008064 	.word	0x20008064
 800c7a4:	20018458 	.word	0x20018458
 800c7a8:	20016b24 	.word	0x20016b24
 800c7ac:	0800e318 	.word	0x0800e318
 800c7b0:	20016cdc 	.word	0x20016cdc
 800c7b4:	0800e31c 	.word	0x0800e31c

0800c7b8 <AT_CIPSHUT>:

uint8_t AT_CIPSHUT  (void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
	uint8_t str_out[12];
	sprintf(str_out, "AT+CIPSHUT\r\n");
 800c7be:	1d3b      	adds	r3, r7, #4
 800c7c0:	4928      	ldr	r1, [pc, #160]	; (800c864 <AT_CIPSHUT+0xac>)
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 f878 	bl	800d8b8 <siprintf>

	read_rx_state = ACTIVE;
 800c7c8:	4b27      	ldr	r3, [pc, #156]	; (800c868 <AT_CIPSHUT+0xb0>)
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c7ce:	4b27      	ldr	r3, [pc, #156]	; (800c86c <AT_CIPSHUT+0xb4>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c7d4:	f7ff fac0 	bl	800bd58 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c7d8:	2201      	movs	r2, #1
 800c7da:	4925      	ldr	r1, [pc, #148]	; (800c870 <AT_CIPSHUT+0xb8>)
 800c7dc:	4825      	ldr	r0, [pc, #148]	; (800c874 <AT_CIPSHUT+0xbc>)
 800c7de:	f7f8 fc87 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 12);
 800c7e2:	1d3b      	adds	r3, r7, #4
 800c7e4:	220c      	movs	r2, #12
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4822      	ldr	r0, [pc, #136]	; (800c874 <AT_CIPSHUT+0xbc>)
 800c7ea:	f7f8 fc03 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c7ee:	4b22      	ldr	r3, [pc, #136]	; (800c878 <AT_CIPSHUT+0xc0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f04f 31ff 	mov.w	r1, #4294967295
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f9 ff00 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 800c7fc:	4b1f      	ldr	r3, [pc, #124]	; (800c87c <AT_CIPSHUT+0xc4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f242 7110 	movw	r1, #10000	; 0x2710
 800c804:	4618      	mov	r0, r3
 800c806:	f7f9 fd9d 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c80a:	e021      	b.n	800c850 <AT_CIPSHUT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c80c:	491c      	ldr	r1, [pc, #112]	; (800c880 <AT_CIPSHUT+0xc8>)
 800c80e:	481d      	ldr	r0, [pc, #116]	; (800c884 <AT_CIPSHUT+0xcc>)
 800c810:	f001 f872 	bl	800d8f8 <strstr>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <AT_CIPSHUT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c81a:	4b18      	ldr	r3, [pc, #96]	; (800c87c <AT_CIPSHUT+0xc4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f9 fdd4 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c824:	4b10      	ldr	r3, [pc, #64]	; (800c868 <AT_CIPSHUT+0xb0>)
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e015      	b.n	800c85a <AT_CIPSHUT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c82e:	4916      	ldr	r1, [pc, #88]	; (800c888 <AT_CIPSHUT+0xd0>)
 800c830:	4814      	ldr	r0, [pc, #80]	; (800c884 <AT_CIPSHUT+0xcc>)
 800c832:	f001 f861 	bl	800d8f8 <strstr>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d009      	beq.n	800c850 <AT_CIPSHUT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c83c:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <AT_CIPSHUT+0xc4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f7f9 fdc3 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c846:	4b08      	ldr	r3, [pc, #32]	; (800c868 <AT_CIPSHUT+0xb0>)
 800c848:	2200      	movs	r2, #0
 800c84a:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e004      	b.n	800c85a <AT_CIPSHUT+0xa2>
	while(read_rx_state == ACTIVE)
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <AT_CIPSHUT+0xb0>)
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d0d9      	beq.n	800c80c <AT_CIPSHUT+0x54>
		}

	}
	return AT_ERROR;
 800c858:	2301      	movs	r3, #1

}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	0800e328 	.word	0x0800e328
 800c868:	20016bb4 	.word	0x20016bb4
 800c86c:	20000804 	.word	0x20000804
 800c870:	20016bdc 	.word	0x20016bdc
 800c874:	20008064 	.word	0x20008064
 800c878:	20018458 	.word	0x20018458
 800c87c:	20016b24 	.word	0x20016b24
 800c880:	0800e180 	.word	0x0800e180
 800c884:	20016cdc 	.word	0x20016cdc
 800c888:	0800e26c 	.word	0x0800e26c

0800c88c <AT_CCID>:

uint8_t AT_CCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 800c88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c890:	b0ae      	sub	sp, #184	; 0xb8
 800c892:	af00      	add	r7, sp, #0
 800c894:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800c898:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+CCID\r\n");
 800c89c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c8a0:	491d      	ldr	r1, [pc, #116]	; (800c918 <AT_CCID+0x8c>)
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 f808 	bl	800d8b8 <siprintf>
	read_rx_state = ACTIVE;
 800c8a8:	4a1c      	ldr	r2, [pc, #112]	; (800c91c <AT_CCID+0x90>)
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 800c8ae:	4a1c      	ldr	r2, [pc, #112]	; (800c920 <AT_CCID+0x94>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 800c8b4:	f7ff fa50 	bl	800bd58 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	491a      	ldr	r1, [pc, #104]	; (800c924 <AT_CCID+0x98>)
 800c8bc:	481a      	ldr	r0, [pc, #104]	; (800c928 <AT_CCID+0x9c>)
 800c8be:	f7f8 fc17 	bl	80050f0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800c8c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c8c6:	2209      	movs	r2, #9
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4817      	ldr	r0, [pc, #92]	; (800c928 <AT_CCID+0x9c>)
 800c8cc:	f7f8 fb92 	bl	8004ff4 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c8d0:	4b16      	ldr	r3, [pc, #88]	; (800c92c <AT_CCID+0xa0>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f04f 31ff 	mov.w	r1, #4294967295
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7f9 fe8f 	bl	80065fc <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c8de:	4b14      	ldr	r3, [pc, #80]	; (800c930 <AT_CCID+0xa4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f9 fd2c 	bl	8006344 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c8ec:	e34b      	b.n	800cf86 <AT_CCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c8ee:	4911      	ldr	r1, [pc, #68]	; (800c934 <AT_CCID+0xa8>)
 800c8f0:	4811      	ldr	r0, [pc, #68]	; (800c938 <AT_CCID+0xac>)
 800c8f2:	f001 f801 	bl	800d8f8 <strstr>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 8344 	beq.w	800cf86 <AT_CCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 800c8fe:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <AT_CCID+0xa4>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f7f9 fd62 	bl	80063cc <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c908:	4a04      	ldr	r2, [pc, #16]	; (800c91c <AT_CCID+0x90>)
 800c90a:	2300      	movs	r3, #0
 800c90c:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 800c90e:	2300      	movs	r3, #0
 800c910:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c914:	e029      	b.n	800c96a <AT_CCID+0xde>
 800c916:	bf00      	nop
 800c918:	0800e338 	.word	0x0800e338
 800c91c:	20016bb4 	.word	0x20016bb4
 800c920:	20000804 	.word	0x20000804
 800c924:	20016bdc 	.word	0x20016bdc
 800c928:	20008064 	.word	0x20008064
 800c92c:	20018458 	.word	0x20018458
 800c930:	20016b24 	.word	0x20016b24
 800c934:	0800e180 	.word	0x0800e180
 800c938:	20016cdc 	.word	0x20016cdc
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[4+i] - 48;
 800c93c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c940:	1d1a      	adds	r2, r3, #4
 800c942:	4bde      	ldr	r3, [pc, #888]	; (800ccbc <AT_CCID+0x430>)
 800c944:	5c9b      	ldrb	r3, [r3, r2]
 800c946:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800c94a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c94e:	00da      	lsls	r2, r3, #3
 800c950:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c954:	1899      	adds	r1, r3, r2
 800c956:	4602      	mov	r2, r0
 800c958:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c95c:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 800c960:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c964:	3301      	adds	r3, #1
 800c966:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c96a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c96e:	2b12      	cmp	r3, #18
 800c970:	d9e4      	bls.n	800c93c <AT_CCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 800c972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	49d1      	ldr	r1, [pc, #836]	; (800ccc0 <AT_CCID+0x434>)
 800c97c:	fb01 f003 	mul.w	r0, r1, r3
 800c980:	49d0      	ldr	r1, [pc, #832]	; (800ccc4 <AT_CCID+0x438>)
 800c982:	fb01 f102 	mul.w	r1, r1, r2
 800c986:	4408      	add	r0, r1
 800c988:	49cd      	ldr	r1, [pc, #820]	; (800ccc0 <AT_CCID+0x434>)
 800c98a:	fba2 4501 	umull	r4, r5, r2, r1
 800c98e:	1943      	adds	r3, r0, r5
 800c990:	461d      	mov	r5, r3
 800c992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c996:	3308      	adds	r3, #8
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	49ca      	ldr	r1, [pc, #808]	; (800ccc8 <AT_CCID+0x43c>)
 800c99e:	fb01 f003 	mul.w	r0, r1, r3
 800c9a2:	49ca      	ldr	r1, [pc, #808]	; (800cccc <AT_CCID+0x440>)
 800c9a4:	fb01 f102 	mul.w	r1, r1, r2
 800c9a8:	4408      	add	r0, r1
 800c9aa:	49c7      	ldr	r1, [pc, #796]	; (800ccc8 <AT_CCID+0x43c>)
 800c9ac:	fba2 2301 	umull	r2, r3, r2, r1
 800c9b0:	18c1      	adds	r1, r0, r3
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	eb14 0a02 	adds.w	sl, r4, r2
 800c9b8:	eb45 0b03 	adc.w	fp, r5, r3
 800c9bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9c0:	3318      	adds	r3, #24
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	49c2      	ldr	r1, [pc, #776]	; (800ccd0 <AT_CCID+0x444>)
 800c9c8:	fb01 f003 	mul.w	r0, r1, r3
 800c9cc:	49c1      	ldr	r1, [pc, #772]	; (800ccd4 <AT_CCID+0x448>)
 800c9ce:	fb01 f102 	mul.w	r1, r1, r2
 800c9d2:	4408      	add	r0, r1
 800c9d4:	49be      	ldr	r1, [pc, #760]	; (800ccd0 <AT_CCID+0x444>)
 800c9d6:	fba2 4501 	umull	r4, r5, r2, r1
 800c9da:	1943      	adds	r3, r0, r5
 800c9dc:	461d      	mov	r5, r3
 800c9de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9e2:	3310      	adds	r3, #16
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	49bb      	ldr	r1, [pc, #748]	; (800ccd8 <AT_CCID+0x44c>)
 800c9ea:	fb01 f003 	mul.w	r0, r1, r3
 800c9ee:	49bb      	ldr	r1, [pc, #748]	; (800ccdc <AT_CCID+0x450>)
 800c9f0:	fb01 f102 	mul.w	r1, r1, r2
 800c9f4:	4408      	add	r0, r1
 800c9f6:	49b8      	ldr	r1, [pc, #736]	; (800ccd8 <AT_CCID+0x44c>)
 800c9f8:	fba2 2301 	umull	r2, r3, r2, r1
 800c9fc:	18c1      	adds	r1, r0, r3
 800c9fe:	460b      	mov	r3, r1
 800ca00:	eb14 0802 	adds.w	r8, r4, r2
 800ca04:	eb45 0903 	adc.w	r9, r5, r3
 800ca08:	eb1a 0308 	adds.w	r3, sl, r8
 800ca0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca10:	eb4b 0309 	adc.w	r3, fp, r9
 800ca14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca1c:	3328      	adds	r3, #40	; 0x28
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	49af      	ldr	r1, [pc, #700]	; (800cce0 <AT_CCID+0x454>)
 800ca24:	fb01 f003 	mul.w	r0, r1, r3
 800ca28:	f640 1118 	movw	r1, #2328	; 0x918
 800ca2c:	fb01 f102 	mul.w	r1, r1, r2
 800ca30:	4408      	add	r0, r1
 800ca32:	49ab      	ldr	r1, [pc, #684]	; (800cce0 <AT_CCID+0x454>)
 800ca34:	fba2 4501 	umull	r4, r5, r2, r1
 800ca38:	1943      	adds	r3, r0, r5
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca40:	3320      	adds	r3, #32
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	49a7      	ldr	r1, [pc, #668]	; (800cce4 <AT_CCID+0x458>)
 800ca48:	fb01 f003 	mul.w	r0, r1, r3
 800ca4c:	f645 21f3 	movw	r1, #23283	; 0x5af3
 800ca50:	fb01 f102 	mul.w	r1, r1, r2
 800ca54:	4408      	add	r0, r1
 800ca56:	49a3      	ldr	r1, [pc, #652]	; (800cce4 <AT_CCID+0x458>)
 800ca58:	fba2 2301 	umull	r2, r3, r2, r1
 800ca5c:	18c1      	adds	r1, r0, r3
 800ca5e:	460b      	mov	r3, r1
 800ca60:	18a1      	adds	r1, r4, r2
 800ca62:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800ca66:	eb45 0303 	adc.w	r3, r5, r3
 800ca6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca6e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800ca72:	4623      	mov	r3, r4
 800ca74:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ca78:	4602      	mov	r2, r0
 800ca7a:	189b      	adds	r3, r3, r2
 800ca7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca80:	460b      	mov	r3, r1
 800ca82:	462a      	mov	r2, r5
 800ca84:	eb42 0303 	adc.w	r3, r2, r3
 800ca88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ca8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca90:	3338      	adds	r3, #56	; 0x38
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	4994      	ldr	r1, [pc, #592]	; (800cce8 <AT_CCID+0x45c>)
 800ca98:	fb01 f003 	mul.w	r0, r1, r3
 800ca9c:	2117      	movs	r1, #23
 800ca9e:	fb01 f102 	mul.w	r1, r1, r2
 800caa2:	4408      	add	r0, r1
 800caa4:	4990      	ldr	r1, [pc, #576]	; (800cce8 <AT_CCID+0x45c>)
 800caa6:	fba2 4501 	umull	r4, r5, r2, r1
 800caaa:	1943      	adds	r3, r0, r5
 800caac:	461d      	mov	r5, r3
 800caae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cab2:	3330      	adds	r3, #48	; 0x30
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	498c      	ldr	r1, [pc, #560]	; (800ccec <AT_CCID+0x460>)
 800caba:	fb01 f003 	mul.w	r0, r1, r3
 800cabe:	21e8      	movs	r1, #232	; 0xe8
 800cac0:	fb01 f102 	mul.w	r1, r1, r2
 800cac4:	4408      	add	r0, r1
 800cac6:	4989      	ldr	r1, [pc, #548]	; (800ccec <AT_CCID+0x460>)
 800cac8:	fba2 2301 	umull	r2, r3, r2, r1
 800cacc:	18c1      	adds	r1, r0, r3
 800cace:	460b      	mov	r3, r1
 800cad0:	18a1      	adds	r1, r4, r2
 800cad2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800cad6:	eb45 0303 	adc.w	r3, r5, r3
 800cada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cade:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800cae2:	4623      	mov	r3, r4
 800cae4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cae8:	4602      	mov	r2, r0
 800caea:	189b      	adds	r3, r3, r2
 800caec:	67bb      	str	r3, [r7, #120]	; 0x78
 800caee:	460b      	mov	r3, r1
 800caf0:	462a      	mov	r2, r5
 800caf2:	eb42 0303 	adc.w	r3, r2, r3
 800caf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800caf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cafc:	3348      	adds	r3, #72	; 0x48
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	497b      	ldr	r1, [pc, #492]	; (800ccf0 <AT_CCID+0x464>)
 800cb04:	fb01 f003 	mul.w	r0, r1, r3
 800cb08:	2100      	movs	r1, #0
 800cb0a:	fb01 f102 	mul.w	r1, r1, r2
 800cb0e:	4408      	add	r0, r1
 800cb10:	4977      	ldr	r1, [pc, #476]	; (800ccf0 <AT_CCID+0x464>)
 800cb12:	fba2 4501 	umull	r4, r5, r2, r1
 800cb16:	1943      	adds	r3, r0, r5
 800cb18:	461d      	mov	r5, r3
 800cb1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb1e:	3340      	adds	r3, #64	; 0x40
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	4973      	ldr	r1, [pc, #460]	; (800ccf4 <AT_CCID+0x468>)
 800cb26:	fb01 f003 	mul.w	r0, r1, r3
 800cb2a:	2102      	movs	r1, #2
 800cb2c:	fb01 f102 	mul.w	r1, r1, r2
 800cb30:	4408      	add	r0, r1
 800cb32:	4970      	ldr	r1, [pc, #448]	; (800ccf4 <AT_CCID+0x468>)
 800cb34:	fba2 2301 	umull	r2, r3, r2, r1
 800cb38:	18c1      	adds	r1, r0, r3
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	18a1      	adds	r1, r4, r2
 800cb3e:	6739      	str	r1, [r7, #112]	; 0x70
 800cb40:	eb45 0303 	adc.w	r3, r5, r3
 800cb44:	677b      	str	r3, [r7, #116]	; 0x74
 800cb46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800cb4a:	4623      	mov	r3, r4
 800cb4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800cb50:	4602      	mov	r2, r0
 800cb52:	189b      	adds	r3, r3, r2
 800cb54:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb56:	460b      	mov	r3, r1
 800cb58:	462a      	mov	r2, r5
 800cb5a:	eb42 0303 	adc.w	r3, r2, r3
 800cb5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb64:	3358      	adds	r3, #88	; 0x58
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	4963      	ldr	r1, [pc, #396]	; (800ccf8 <AT_CCID+0x46c>)
 800cb6c:	fb01 f003 	mul.w	r0, r1, r3
 800cb70:	2100      	movs	r1, #0
 800cb72:	fb01 f102 	mul.w	r1, r1, r2
 800cb76:	4408      	add	r0, r1
 800cb78:	495f      	ldr	r1, [pc, #380]	; (800ccf8 <AT_CCID+0x46c>)
 800cb7a:	fba2 4501 	umull	r4, r5, r2, r1
 800cb7e:	1943      	adds	r3, r0, r5
 800cb80:	461d      	mov	r5, r3
 800cb82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb86:	3350      	adds	r3, #80	; 0x50
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	495b      	ldr	r1, [pc, #364]	; (800ccfc <AT_CCID+0x470>)
 800cb8e:	fb01 f003 	mul.w	r0, r1, r3
 800cb92:	2100      	movs	r1, #0
 800cb94:	fb01 f102 	mul.w	r1, r1, r2
 800cb98:	4408      	add	r0, r1
 800cb9a:	4958      	ldr	r1, [pc, #352]	; (800ccfc <AT_CCID+0x470>)
 800cb9c:	fba2 2301 	umull	r2, r3, r2, r1
 800cba0:	18c1      	adds	r1, r0, r3
 800cba2:	460b      	mov	r3, r1
 800cba4:	18a1      	adds	r1, r4, r2
 800cba6:	6639      	str	r1, [r7, #96]	; 0x60
 800cba8:	eb45 0303 	adc.w	r3, r5, r3
 800cbac:	667b      	str	r3, [r7, #100]	; 0x64
 800cbae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800cbb2:	4623      	mov	r3, r4
 800cbb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cbb8:	4602      	mov	r2, r0
 800cbba:	189b      	adds	r3, r3, r2
 800cbbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	462a      	mov	r2, r5
 800cbc2:	eb42 0303 	adc.w	r3, r2, r3
 800cbc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbcc:	3368      	adds	r3, #104	; 0x68
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	494b      	ldr	r1, [pc, #300]	; (800cd00 <AT_CCID+0x474>)
 800cbd4:	fb01 f003 	mul.w	r0, r1, r3
 800cbd8:	2100      	movs	r1, #0
 800cbda:	fb01 f102 	mul.w	r1, r1, r2
 800cbde:	4408      	add	r0, r1
 800cbe0:	4947      	ldr	r1, [pc, #284]	; (800cd00 <AT_CCID+0x474>)
 800cbe2:	fba2 8901 	umull	r8, r9, r2, r1
 800cbe6:	eb00 0309 	add.w	r3, r0, r9
 800cbea:	4699      	mov	r9, r3
 800cbec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbf0:	3360      	adds	r3, #96	; 0x60
 800cbf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	f04f 0000 	mov.w	r0, #0
 800cbfe:	f04f 0100 	mov.w	r1, #0
 800cc02:	0159      	lsls	r1, r3, #5
 800cc04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc08:	0150      	lsls	r0, r2, #5
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	1b12      	subs	r2, r2, r4
 800cc10:	eb63 0305 	sbc.w	r3, r3, r5
 800cc14:	f04f 0000 	mov.w	r0, #0
 800cc18:	f04f 0100 	mov.w	r1, #0
 800cc1c:	0259      	lsls	r1, r3, #9
 800cc1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800cc22:	0250      	lsls	r0, r2, #9
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	1912      	adds	r2, r2, r4
 800cc2a:	eb45 0303 	adc.w	r3, r5, r3
 800cc2e:	f04f 0000 	mov.w	r0, #0
 800cc32:	f04f 0100 	mov.w	r1, #0
 800cc36:	0199      	lsls	r1, r3, #6
 800cc38:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800cc3c:	0190      	lsls	r0, r2, #6
 800cc3e:	1a80      	subs	r0, r0, r2
 800cc40:	eb61 0103 	sbc.w	r1, r1, r3
 800cc44:	1903      	adds	r3, r0, r4
 800cc46:	653b      	str	r3, [r7, #80]	; 0x50
 800cc48:	eb41 0305 	adc.w	r3, r1, r5
 800cc4c:	657b      	str	r3, [r7, #84]	; 0x54
 800cc4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cc52:	460b      	mov	r3, r1
 800cc54:	eb18 0303 	adds.w	r3, r8, r3
 800cc58:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	eb49 0303 	adc.w	r3, r9, r3
 800cc60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc62:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800cc66:	4623      	mov	r3, r4
 800cc68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	189b      	adds	r3, r3, r2
 800cc70:	643b      	str	r3, [r7, #64]	; 0x40
 800cc72:	460b      	mov	r3, r1
 800cc74:	462a      	mov	r2, r5
 800cc76:	eb42 0303 	adc.w	r3, r2, r3
 800cc7a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc80:	3378      	adds	r3, #120	; 0x78
 800cc82:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	f04f 0000 	mov.w	r0, #0
 800cc8e:	f04f 0100 	mov.w	r1, #0
 800cc92:	0159      	lsls	r1, r3, #5
 800cc94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc98:	0150      	lsls	r0, r2, #5
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	1b12      	subs	r2, r2, r4
 800cca0:	eb63 0305 	sbc.w	r3, r3, r5
 800cca4:	f04f 0000 	mov.w	r0, #0
 800cca8:	f04f 0100 	mov.w	r1, #0
 800ccac:	0099      	lsls	r1, r3, #2
 800ccae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ccb2:	0090      	lsls	r0, r2, #2
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	1912      	adds	r2, r2, r4
 800ccba:	e023      	b.n	800cd04 <AT_CCID+0x478>
 800ccbc:	20016cdc 	.word	0x20016cdc
 800ccc0:	a7640000 	.word	0xa7640000
 800ccc4:	0de0b6b3 	.word	0x0de0b6b3
 800ccc8:	5d8a0000 	.word	0x5d8a0000
 800cccc:	01634578 	.word	0x01634578
 800ccd0:	a4c68000 	.word	0xa4c68000
 800ccd4:	00038d7e 	.word	0x00038d7e
 800ccd8:	6fc10000 	.word	0x6fc10000
 800ccdc:	002386f2 	.word	0x002386f2
 800cce0:	4e72a000 	.word	0x4e72a000
 800cce4:	107a4000 	.word	0x107a4000
 800cce8:	4876e800 	.word	0x4876e800
 800ccec:	d4a51000 	.word	0xd4a51000
 800ccf0:	3b9aca00 	.word	0x3b9aca00
 800ccf4:	540be400 	.word	0x540be400
 800ccf8:	00989680 	.word	0x00989680
 800ccfc:	05f5e100 	.word	0x05f5e100
 800cd00:	000186a0 	.word	0x000186a0
 800cd04:	eb45 0303 	adc.w	r3, r5, r3
 800cd08:	f04f 0000 	mov.w	r0, #0
 800cd0c:	f04f 0100 	mov.w	r1, #0
 800cd10:	00d9      	lsls	r1, r3, #3
 800cd12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd16:	00d0      	lsls	r0, r2, #3
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4690      	mov	r8, r2
 800cd1e:	4699      	mov	r9, r3
 800cd20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd24:	3370      	adds	r3, #112	; 0x70
 800cd26:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	f04f 0000 	mov.w	r0, #0
 800cd32:	f04f 0100 	mov.w	r1, #0
 800cd36:	0099      	lsls	r1, r3, #2
 800cd38:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cd3c:	0090      	lsls	r0, r2, #2
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	1912      	adds	r2, r2, r4
 800cd44:	eb45 0303 	adc.w	r3, r5, r3
 800cd48:	f04f 0000 	mov.w	r0, #0
 800cd4c:	f04f 0100 	mov.w	r1, #0
 800cd50:	00d9      	lsls	r1, r3, #3
 800cd52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd56:	00d0      	lsls	r0, r2, #3
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	1b12      	subs	r2, r2, r4
 800cd5e:	eb63 0305 	sbc.w	r3, r3, r5
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f04f 0100 	mov.w	r1, #0
 800cd6a:	0119      	lsls	r1, r3, #4
 800cd6c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cd70:	0110      	lsls	r0, r2, #4
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	1912      	adds	r2, r2, r4
 800cd78:	eb45 0303 	adc.w	r3, r5, r3
 800cd7c:	f04f 0000 	mov.w	r0, #0
 800cd80:	f04f 0100 	mov.w	r1, #0
 800cd84:	0119      	lsls	r1, r3, #4
 800cd86:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cd8a:	0110      	lsls	r0, r2, #4
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	eb18 0102 	adds.w	r1, r8, r2
 800cd94:	63b9      	str	r1, [r7, #56]	; 0x38
 800cd96:	eb49 0303 	adc.w	r3, r9, r3
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd9c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800cda0:	4623      	mov	r3, r4
 800cda2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cda6:	4602      	mov	r2, r0
 800cda8:	189b      	adds	r3, r3, r2
 800cdaa:	633b      	str	r3, [r7, #48]	; 0x30
 800cdac:	460b      	mov	r3, r1
 800cdae:	462a      	mov	r2, r5
 800cdb0:	eb42 0303 	adc.w	r3, r2, r3
 800cdb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdba:	3388      	adds	r3, #136	; 0x88
 800cdbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	462b      	mov	r3, r5
 800cdc4:	f04f 0000 	mov.w	r0, #0
 800cdc8:	f04f 0100 	mov.w	r1, #0
 800cdcc:	0099      	lsls	r1, r3, #2
 800cdce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cdd2:	0090      	lsls	r0, r2, #2
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	1912      	adds	r2, r2, r4
 800cdda:	eb45 0303 	adc.w	r3, r5, r3
 800cdde:	1891      	adds	r1, r2, r2
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	415b      	adcs	r3, r3
 800cde4:	60fb      	str	r3, [r7, #12]
 800cde6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdea:	4690      	mov	r8, r2
 800cdec:	4699      	mov	r9, r3
 800cdee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdf2:	3380      	adds	r3, #128	; 0x80
 800cdf4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	1891      	adds	r1, r2, r2
 800cdfe:	6039      	str	r1, [r7, #0]
 800ce00:	415b      	adcs	r3, r3
 800ce02:	607b      	str	r3, [r7, #4]
 800ce04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce08:	1912      	adds	r2, r2, r4
 800ce0a:	eb45 0303 	adc.w	r3, r5, r3
 800ce0e:	f04f 0000 	mov.w	r0, #0
 800ce12:	f04f 0100 	mov.w	r1, #0
 800ce16:	0159      	lsls	r1, r3, #5
 800ce18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce1c:	0150      	lsls	r0, r2, #5
 800ce1e:	1812      	adds	r2, r2, r0
 800ce20:	eb41 0303 	adc.w	r3, r1, r3
 800ce24:	1911      	adds	r1, r2, r4
 800ce26:	62b9      	str	r1, [r7, #40]	; 0x28
 800ce28:	416b      	adcs	r3, r5
 800ce2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ce30:	460b      	mov	r3, r1
 800ce32:	eb18 0303 	adds.w	r3, r8, r3
 800ce36:	623b      	str	r3, [r7, #32]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	eb49 0303 	adc.w	r3, r9, r3
 800ce3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ce44:	4623      	mov	r3, r4
 800ce46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	189b      	adds	r3, r3, r2
 800ce4e:	61bb      	str	r3, [r7, #24]
 800ce50:	460b      	mov	r3, r1
 800ce52:	462a      	mov	r2, r5
 800ce54:	eb42 0303 	adc.w	r3, r2, r3
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce5e:	3390      	adds	r3, #144	; 0x90
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ce68:	3198      	adds	r1, #152	; 0x98
 800ce6a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ce6e:	4620      	mov	r0, r4
 800ce70:	1880      	adds	r0, r0, r2
 800ce72:	6138      	str	r0, [r7, #16]
 800ce74:	4628      	mov	r0, r5
 800ce76:	eb43 0000 	adc.w	r0, r3, r0
 800ce7a:	6178      	str	r0, [r7, #20]
 800ce7c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ce80:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 800ce84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce88:	3398      	adds	r3, #152	; 0x98
 800ce8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce8e:	f04f 0200 	mov.w	r2, #0
 800ce92:	f04f 0300 	mov.w	r3, #0
 800ce96:	0e0a      	lsrs	r2, r1, #24
 800ce98:	2300      	movs	r3, #0
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cea0:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 800cea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cea6:	3398      	adds	r3, #152	; 0x98
 800cea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceac:	f04f 0200 	mov.w	r2, #0
 800ceb0:	f04f 0300 	mov.w	r3, #0
 800ceb4:	0c0a      	lsrs	r2, r1, #16
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cebc:	3101      	adds	r1, #1
 800cebe:	b2d3      	uxtb	r3, r2
 800cec0:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 800cec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cec6:	3398      	adds	r3, #152	; 0x98
 800cec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cecc:	f04f 0200 	mov.w	r2, #0
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	0a0a      	lsrs	r2, r1, #8
 800ced6:	2300      	movs	r3, #0
 800ced8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cedc:	3102      	adds	r1, #2
 800cede:	b2d3      	uxtb	r3, r2
 800cee0:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 800cee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cee6:	3398      	adds	r3, #152	; 0x98
 800cee8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceec:	f04f 0200 	mov.w	r2, #0
 800cef0:	f04f 0300 	mov.w	r3, #0
 800cef4:	000a      	movs	r2, r1
 800cef6:	2300      	movs	r3, #0
 800cef8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cefc:	3103      	adds	r1, #3
 800cefe:	b2d3      	uxtb	r3, r2
 800cf00:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 800cf02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf06:	3398      	adds	r3, #152	; 0x98
 800cf08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf0c:	f04f 0200 	mov.w	r2, #0
 800cf10:	f04f 0300 	mov.w	r3, #0
 800cf14:	0e02      	lsrs	r2, r0, #24
 800cf16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf1a:	0e0b      	lsrs	r3, r1, #24
 800cf1c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf20:	3104      	adds	r1, #4
 800cf22:	b2d3      	uxtb	r3, r2
 800cf24:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 800cf26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf2a:	3398      	adds	r3, #152	; 0x98
 800cf2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf30:	f04f 0200 	mov.w	r2, #0
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	0c02      	lsrs	r2, r0, #16
 800cf3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf3e:	0c0b      	lsrs	r3, r1, #16
 800cf40:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf44:	3105      	adds	r1, #5
 800cf46:	b2d3      	uxtb	r3, r2
 800cf48:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 800cf4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf4e:	3398      	adds	r3, #152	; 0x98
 800cf50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	f04f 0300 	mov.w	r3, #0
 800cf5c:	0a02      	lsrs	r2, r0, #8
 800cf5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cf62:	0a0b      	lsrs	r3, r1, #8
 800cf64:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf68:	3106      	adds	r1, #6
 800cf6a:	b2d3      	uxtb	r3, r2
 800cf6c:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 800cf6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf72:	3398      	adds	r3, #152	; 0x98
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf7c:	3107      	adds	r1, #7
 800cf7e:	b2d3      	uxtb	r3, r2
 800cf80:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e005      	b.n	800cf92 <AT_CCID+0x706>
	while(read_rx_state == ACTIVE)
 800cf86:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <AT_CCID+0x710>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	f43f acaf 	beq.w	800c8ee <AT_CCID+0x62>
		}

	}
	return AT_ERROR;
 800cf90:	2301      	movs	r3, #1
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	37b8      	adds	r7, #184	; 0xb8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf9c:	20016bb4 	.word	0x20016bb4

0800cfa0 <read_bootloader_registers_no_rtos>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_bootloader_registers_no_rtos(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800cfa6:	1dfb      	adds	r3, r7, #7
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cfae:	f7fe fd8f 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800cfb2:	1dbb      	adds	r3, r7, #6
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f240 2001 	movw	r0, #513	; 0x201
 800cfba:	f7fe fd89 	bl	800bad0 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	021b      	lsls	r3, r3, #8
 800cfc2:	b21a      	sxth	r2, r3
 800cfc4:	79bb      	ldrb	r3, [r7, #6]
 800cfc6:	b21b      	sxth	r3, r3
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	b21b      	sxth	r3, r3
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	4bbb      	ldr	r3, [pc, #748]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800cfd0:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800cfd2:	1dfb      	adds	r3, r7, #7
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	f44f 7001 	mov.w	r0, #516	; 0x204
 800cfda:	f7fe fd79 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800cfde:	1dbb      	adds	r3, r7, #6
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f240 2005 	movw	r0, #517	; 0x205
 800cfe6:	f7fe fd73 	bl	800bad0 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	021b      	lsls	r3, r3, #8
 800cfee:	b21a      	sxth	r2, r3
 800cff0:	79bb      	ldrb	r3, [r7, #6]
 800cff2:	b21b      	sxth	r3, r3
 800cff4:	4313      	orrs	r3, r2
 800cff6:	b21b      	sxth	r3, r3
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4bb0      	ldr	r3, [pc, #704]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800cffc:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800cffe:	1dfb      	adds	r3, r7, #7
 800d000:	4619      	mov	r1, r3
 800d002:	f240 2006 	movw	r0, #518	; 0x206
 800d006:	f7fe fd63 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800d00a:	1dbb      	adds	r3, r7, #6
 800d00c:	4619      	mov	r1, r3
 800d00e:	f240 2007 	movw	r0, #519	; 0x207
 800d012:	f7fe fd5d 	bl	800bad0 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	021b      	lsls	r3, r3, #8
 800d01a:	b21a      	sxth	r2, r3
 800d01c:	79bb      	ldrb	r3, [r7, #6]
 800d01e:	b21b      	sxth	r3, r3
 800d020:	4313      	orrs	r3, r2
 800d022:	b21b      	sxth	r3, r3
 800d024:	b29a      	uxth	r2, r3
 800d026:	4ba5      	ldr	r3, [pc, #660]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d028:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800d02a:	1dfb      	adds	r3, r7, #7
 800d02c:	4619      	mov	r1, r3
 800d02e:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d032:	f7fe fd4d 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800d036:	1dbb      	adds	r3, r7, #6
 800d038:	4619      	mov	r1, r3
 800d03a:	f240 2009 	movw	r0, #521	; 0x209
 800d03e:	f7fe fd47 	bl	800bad0 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	021b      	lsls	r3, r3, #8
 800d046:	b21a      	sxth	r2, r3
 800d048:	79bb      	ldrb	r3, [r7, #6]
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	4313      	orrs	r3, r2
 800d04e:	b21b      	sxth	r3, r3
 800d050:	b29a      	uxth	r2, r3
 800d052:	4b9a      	ldr	r3, [pc, #616]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d054:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d056:	1dfb      	adds	r3, r7, #7
 800d058:	4619      	mov	r1, r3
 800d05a:	f240 200a 	movw	r0, #522	; 0x20a
 800d05e:	f7fe fd37 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d062:	1dbb      	adds	r3, r7, #6
 800d064:	4619      	mov	r1, r3
 800d066:	f240 200b 	movw	r0, #523	; 0x20b
 800d06a:	f7fe fd31 	bl	800bad0 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	b21a      	sxth	r2, r3
 800d074:	79bb      	ldrb	r3, [r7, #6]
 800d076:	b21b      	sxth	r3, r3
 800d078:	4313      	orrs	r3, r2
 800d07a:	b21b      	sxth	r3, r3
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	4b8f      	ldr	r3, [pc, #572]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d080:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d082:	1dfb      	adds	r3, r7, #7
 800d084:	4619      	mov	r1, r3
 800d086:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800d08a:	f7fe fd21 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d08e:	1dbb      	adds	r3, r7, #6
 800d090:	4619      	mov	r1, r3
 800d092:	f240 200d 	movw	r0, #525	; 0x20d
 800d096:	f7fe fd1b 	bl	800bad0 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	b21a      	sxth	r2, r3
 800d0a0:	79bb      	ldrb	r3, [r7, #6]
 800d0a2:	b21b      	sxth	r3, r3
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	4b84      	ldr	r3, [pc, #528]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d0ac:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d0ae:	1dfb      	adds	r3, r7, #7
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f240 200e 	movw	r0, #526	; 0x20e
 800d0b6:	f7fe fd0b 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d0ba:	1dbb      	adds	r3, r7, #6
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f240 200f 	movw	r0, #527	; 0x20f
 800d0c2:	f7fe fd05 	bl	800bad0 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	021b      	lsls	r3, r3, #8
 800d0ca:	b21a      	sxth	r2, r3
 800d0cc:	79bb      	ldrb	r3, [r7, #6]
 800d0ce:	b21b      	sxth	r3, r3
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	b21b      	sxth	r3, r3
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	4b79      	ldr	r3, [pc, #484]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d0d8:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d0da:	1dfb      	adds	r3, r7, #7
 800d0dc:	4619      	mov	r1, r3
 800d0de:	f44f 7004 	mov.w	r0, #528	; 0x210
 800d0e2:	f7fe fcf5 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d0e6:	1dbb      	adds	r3, r7, #6
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f240 2011 	movw	r0, #529	; 0x211
 800d0ee:	f7fe fcef 	bl	800bad0 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	021b      	lsls	r3, r3, #8
 800d0f6:	b21a      	sxth	r2, r3
 800d0f8:	79bb      	ldrb	r3, [r7, #6]
 800d0fa:	b21b      	sxth	r3, r3
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	b21b      	sxth	r3, r3
 800d100:	b29a      	uxth	r2, r3
 800d102:	4b6e      	ldr	r3, [pc, #440]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d104:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d106:	1dfb      	adds	r3, r7, #7
 800d108:	4619      	mov	r1, r3
 800d10a:	f240 2012 	movw	r0, #530	; 0x212
 800d10e:	f7fe fcdf 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d112:	1dbb      	adds	r3, r7, #6
 800d114:	4619      	mov	r1, r3
 800d116:	f240 2013 	movw	r0, #531	; 0x213
 800d11a:	f7fe fcd9 	bl	800bad0 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	021b      	lsls	r3, r3, #8
 800d122:	b21a      	sxth	r2, r3
 800d124:	79bb      	ldrb	r3, [r7, #6]
 800d126:	b21b      	sxth	r3, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	4b63      	ldr	r3, [pc, #396]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d130:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800d132:	1dfb      	adds	r3, r7, #7
 800d134:	4619      	mov	r1, r3
 800d136:	f44f 7005 	mov.w	r0, #532	; 0x214
 800d13a:	f7fe fcc9 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800d13e:	1dbb      	adds	r3, r7, #6
 800d140:	4619      	mov	r1, r3
 800d142:	f240 2015 	movw	r0, #533	; 0x215
 800d146:	f7fe fcc3 	bl	800bad0 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	b21a      	sxth	r2, r3
 800d150:	79bb      	ldrb	r3, [r7, #6]
 800d152:	b21b      	sxth	r3, r3
 800d154:	4313      	orrs	r3, r2
 800d156:	b21b      	sxth	r3, r3
 800d158:	b29a      	uxth	r2, r3
 800d15a:	4b58      	ldr	r3, [pc, #352]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d15c:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800d15e:	1dfb      	adds	r3, r7, #7
 800d160:	4619      	mov	r1, r3
 800d162:	f240 2016 	movw	r0, #534	; 0x216
 800d166:	f7fe fcb3 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800d16a:	1dbb      	adds	r3, r7, #6
 800d16c:	4619      	mov	r1, r3
 800d16e:	f240 2017 	movw	r0, #535	; 0x217
 800d172:	f7fe fcad 	bl	800bad0 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	b21a      	sxth	r2, r3
 800d17c:	79bb      	ldrb	r3, [r7, #6]
 800d17e:	b21b      	sxth	r3, r3
 800d180:	4313      	orrs	r3, r2
 800d182:	b21b      	sxth	r3, r3
 800d184:	b29a      	uxth	r2, r3
 800d186:	4b4d      	ldr	r3, [pc, #308]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d188:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800d18a:	1dfb      	adds	r3, r7, #7
 800d18c:	4619      	mov	r1, r3
 800d18e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d192:	f7fe fc9d 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800d196:	1dbb      	adds	r3, r7, #6
 800d198:	4619      	mov	r1, r3
 800d19a:	f240 2019 	movw	r0, #537	; 0x219
 800d19e:	f7fe fc97 	bl	800bad0 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d1a2:	79fb      	ldrb	r3, [r7, #7]
 800d1a4:	021b      	lsls	r3, r3, #8
 800d1a6:	b21a      	sxth	r2, r3
 800d1a8:	79bb      	ldrb	r3, [r7, #6]
 800d1aa:	b21b      	sxth	r3, r3
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	b21b      	sxth	r3, r3
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	4b42      	ldr	r3, [pc, #264]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d1b4:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800d1b6:	1dfb      	adds	r3, r7, #7
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	f240 201a 	movw	r0, #538	; 0x21a
 800d1be:	f7fe fc87 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800d1c2:	1dbb      	adds	r3, r7, #6
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	f240 201b 	movw	r0, #539	; 0x21b
 800d1ca:	f7fe fc81 	bl	800bad0 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	021b      	lsls	r3, r3, #8
 800d1d2:	b21a      	sxth	r2, r3
 800d1d4:	79bb      	ldrb	r3, [r7, #6]
 800d1d6:	b21b      	sxth	r3, r3
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	b21b      	sxth	r3, r3
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d1e0:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800d1e2:	1dfb      	adds	r3, r7, #7
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d1ea:	f7fe fc71 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800d1ee:	1dbb      	adds	r3, r7, #6
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f240 201d 	movw	r0, #541	; 0x21d
 800d1f6:	f7fe fc6b 	bl	800bad0 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	021b      	lsls	r3, r3, #8
 800d1fe:	b21a      	sxth	r2, r3
 800d200:	79bb      	ldrb	r3, [r7, #6]
 800d202:	b21b      	sxth	r3, r3
 800d204:	4313      	orrs	r3, r2
 800d206:	b21b      	sxth	r3, r3
 800d208:	b29a      	uxth	r2, r3
 800d20a:	4b2c      	ldr	r3, [pc, #176]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d20c:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800d20e:	1dfb      	adds	r3, r7, #7
 800d210:	4619      	mov	r1, r3
 800d212:	f240 201e 	movw	r0, #542	; 0x21e
 800d216:	f7fe fc5b 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800d21a:	1dbb      	adds	r3, r7, #6
 800d21c:	4619      	mov	r1, r3
 800d21e:	f240 201f 	movw	r0, #543	; 0x21f
 800d222:	f7fe fc55 	bl	800bad0 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	021b      	lsls	r3, r3, #8
 800d22a:	b21a      	sxth	r2, r3
 800d22c:	79bb      	ldrb	r3, [r7, #6]
 800d22e:	b21b      	sxth	r3, r3
 800d230:	4313      	orrs	r3, r2
 800d232:	b21b      	sxth	r3, r3
 800d234:	b29a      	uxth	r2, r3
 800d236:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d238:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800d23a:	1dfb      	adds	r3, r7, #7
 800d23c:	4619      	mov	r1, r3
 800d23e:	f44f 7008 	mov.w	r0, #544	; 0x220
 800d242:	f7fe fc45 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800d246:	1dbb      	adds	r3, r7, #6
 800d248:	4619      	mov	r1, r3
 800d24a:	f240 2021 	movw	r0, #545	; 0x221
 800d24e:	f7fe fc3f 	bl	800bad0 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d252:	79fb      	ldrb	r3, [r7, #7]
 800d254:	021b      	lsls	r3, r3, #8
 800d256:	b21a      	sxth	r2, r3
 800d258:	79bb      	ldrb	r3, [r7, #6]
 800d25a:	b21b      	sxth	r3, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b21b      	sxth	r3, r3
 800d260:	b29a      	uxth	r2, r3
 800d262:	4b16      	ldr	r3, [pc, #88]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d264:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800d266:	1dfb      	adds	r3, r7, #7
 800d268:	4619      	mov	r1, r3
 800d26a:	f240 2022 	movw	r0, #546	; 0x222
 800d26e:	f7fe fc2f 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800d272:	1dbb      	adds	r3, r7, #6
 800d274:	4619      	mov	r1, r3
 800d276:	f240 2023 	movw	r0, #547	; 0x223
 800d27a:	f7fe fc29 	bl	800bad0 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	021b      	lsls	r3, r3, #8
 800d282:	b21a      	sxth	r2, r3
 800d284:	79bb      	ldrb	r3, [r7, #6]
 800d286:	b21b      	sxth	r3, r3
 800d288:	4313      	orrs	r3, r2
 800d28a:	b21b      	sxth	r3, r3
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	4b0b      	ldr	r3, [pc, #44]	; (800d2bc <read_bootloader_registers_no_rtos+0x31c>)
 800d290:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800d292:	1dfb      	adds	r3, r7, #7
 800d294:	4619      	mov	r1, r3
 800d296:	f44f 7009 	mov.w	r0, #548	; 0x224
 800d29a:	f7fe fc19 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800d29e:	1dbb      	adds	r3, r7, #6
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f240 2025 	movw	r0, #549	; 0x225
 800d2a6:	f7fe fc13 	bl	800bad0 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	021b      	lsls	r3, r3, #8
 800d2ae:	b21a      	sxth	r2, r3
 800d2b0:	79bb      	ldrb	r3, [r7, #6]
 800d2b2:	b21b      	sxth	r3, r3
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	b21b      	sxth	r3, r3
 800d2b8:	e002      	b.n	800d2c0 <read_bootloader_registers_no_rtos+0x320>
 800d2ba:	bf00      	nop
 800d2bc:	20019f98 	.word	0x20019f98
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	4bbc      	ldr	r3, [pc, #752]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d2c4:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800d2c6:	1dfb      	adds	r3, r7, #7
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f240 2026 	movw	r0, #550	; 0x226
 800d2ce:	f7fe fbff 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800d2d2:	1dbb      	adds	r3, r7, #6
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f240 2027 	movw	r0, #551	; 0x227
 800d2da:	f7fe fbf9 	bl	800bad0 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	021b      	lsls	r3, r3, #8
 800d2e2:	b21a      	sxth	r2, r3
 800d2e4:	79bb      	ldrb	r3, [r7, #6]
 800d2e6:	b21b      	sxth	r3, r3
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	b21b      	sxth	r3, r3
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	4bb1      	ldr	r3, [pc, #708]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d2f0:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800d2f2:	1dfb      	adds	r3, r7, #7
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	f44f 700a 	mov.w	r0, #552	; 0x228
 800d2fa:	f7fe fbe9 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800d2fe:	1dbb      	adds	r3, r7, #6
 800d300:	4619      	mov	r1, r3
 800d302:	f240 2029 	movw	r0, #553	; 0x229
 800d306:	f7fe fbe3 	bl	800bad0 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	b21a      	sxth	r2, r3
 800d310:	79bb      	ldrb	r3, [r7, #6]
 800d312:	b21b      	sxth	r3, r3
 800d314:	4313      	orrs	r3, r2
 800d316:	b21b      	sxth	r3, r3
 800d318:	b29a      	uxth	r2, r3
 800d31a:	4ba6      	ldr	r3, [pc, #664]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d31c:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800d31e:	1dfb      	adds	r3, r7, #7
 800d320:	4619      	mov	r1, r3
 800d322:	f240 202a 	movw	r0, #554	; 0x22a
 800d326:	f7fe fbd3 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800d32a:	1dbb      	adds	r3, r7, #6
 800d32c:	4619      	mov	r1, r3
 800d32e:	f240 202b 	movw	r0, #555	; 0x22b
 800d332:	f7fe fbcd 	bl	800bad0 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	b21a      	sxth	r2, r3
 800d33c:	79bb      	ldrb	r3, [r7, #6]
 800d33e:	b21b      	sxth	r3, r3
 800d340:	4313      	orrs	r3, r2
 800d342:	b21b      	sxth	r3, r3
 800d344:	b29a      	uxth	r2, r3
 800d346:	4b9b      	ldr	r3, [pc, #620]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d348:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800d34a:	1dfb      	adds	r3, r7, #7
 800d34c:	4619      	mov	r1, r3
 800d34e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d352:	f7fe fbbd 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800d356:	1dbb      	adds	r3, r7, #6
 800d358:	4619      	mov	r1, r3
 800d35a:	f240 202d 	movw	r0, #557	; 0x22d
 800d35e:	f7fe fbb7 	bl	800bad0 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d362:	79fb      	ldrb	r3, [r7, #7]
 800d364:	021b      	lsls	r3, r3, #8
 800d366:	b21a      	sxth	r2, r3
 800d368:	79bb      	ldrb	r3, [r7, #6]
 800d36a:	b21b      	sxth	r3, r3
 800d36c:	4313      	orrs	r3, r2
 800d36e:	b21b      	sxth	r3, r3
 800d370:	b29a      	uxth	r2, r3
 800d372:	4b90      	ldr	r3, [pc, #576]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d374:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800d376:	1dfb      	adds	r3, r7, #7
 800d378:	4619      	mov	r1, r3
 800d37a:	f240 202e 	movw	r0, #558	; 0x22e
 800d37e:	f7fe fba7 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800d382:	1dbb      	adds	r3, r7, #6
 800d384:	4619      	mov	r1, r3
 800d386:	f240 202f 	movw	r0, #559	; 0x22f
 800d38a:	f7fe fba1 	bl	800bad0 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	021b      	lsls	r3, r3, #8
 800d392:	b21a      	sxth	r2, r3
 800d394:	79bb      	ldrb	r3, [r7, #6]
 800d396:	b21b      	sxth	r3, r3
 800d398:	4313      	orrs	r3, r2
 800d39a:	b21b      	sxth	r3, r3
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	4b85      	ldr	r3, [pc, #532]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d3a0:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800d3a2:	1dfb      	adds	r3, r7, #7
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	f240 203e 	movw	r0, #574	; 0x23e
 800d3aa:	f7fe fb91 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800d3ae:	1dbb      	adds	r3, r7, #6
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f240 203f 	movw	r0, #575	; 0x23f
 800d3b6:	f7fe fb8b 	bl	800bad0 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	b21a      	sxth	r2, r3
 800d3c0:	79bb      	ldrb	r3, [r7, #6]
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	b21b      	sxth	r3, r3
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	4b7a      	ldr	r3, [pc, #488]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d3cc:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800d3ce:	1dfb      	adds	r3, r7, #7
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	f44f 7010 	mov.w	r0, #576	; 0x240
 800d3d6:	f7fe fb7b 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800d3da:	1dbb      	adds	r3, r7, #6
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f240 2041 	movw	r0, #577	; 0x241
 800d3e2:	f7fe fb75 	bl	800bad0 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	021b      	lsls	r3, r3, #8
 800d3ea:	b21a      	sxth	r2, r3
 800d3ec:	79bb      	ldrb	r3, [r7, #6]
 800d3ee:	b21b      	sxth	r3, r3
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	b21b      	sxth	r3, r3
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	4b6f      	ldr	r3, [pc, #444]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d3f8:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800d3fa:	1dfb      	adds	r3, r7, #7
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	f240 2042 	movw	r0, #578	; 0x242
 800d402:	f7fe fb65 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800d406:	1dbb      	adds	r3, r7, #6
 800d408:	4619      	mov	r1, r3
 800d40a:	f240 2043 	movw	r0, #579	; 0x243
 800d40e:	f7fe fb5f 	bl	800bad0 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	021b      	lsls	r3, r3, #8
 800d416:	b21a      	sxth	r2, r3
 800d418:	79bb      	ldrb	r3, [r7, #6]
 800d41a:	b21b      	sxth	r3, r3
 800d41c:	4313      	orrs	r3, r2
 800d41e:	b21b      	sxth	r3, r3
 800d420:	b29a      	uxth	r2, r3
 800d422:	4b64      	ldr	r3, [pc, #400]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d424:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800d426:	1dfb      	adds	r3, r7, #7
 800d428:	4619      	mov	r1, r3
 800d42a:	f44f 7011 	mov.w	r0, #580	; 0x244
 800d42e:	f7fe fb4f 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800d432:	1dbb      	adds	r3, r7, #6
 800d434:	4619      	mov	r1, r3
 800d436:	f240 2045 	movw	r0, #581	; 0x245
 800d43a:	f7fe fb49 	bl	800bad0 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	b21a      	sxth	r2, r3
 800d444:	79bb      	ldrb	r3, [r7, #6]
 800d446:	b21b      	sxth	r3, r3
 800d448:	4313      	orrs	r3, r2
 800d44a:	b21b      	sxth	r3, r3
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	4b59      	ldr	r3, [pc, #356]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d450:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800d452:	1dfb      	adds	r3, r7, #7
 800d454:	4619      	mov	r1, r3
 800d456:	f240 2046 	movw	r0, #582	; 0x246
 800d45a:	f7fe fb39 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800d45e:	1dbb      	adds	r3, r7, #6
 800d460:	4619      	mov	r1, r3
 800d462:	f240 2047 	movw	r0, #583	; 0x247
 800d466:	f7fe fb33 	bl	800bad0 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	021b      	lsls	r3, r3, #8
 800d46e:	b21a      	sxth	r2, r3
 800d470:	79bb      	ldrb	r3, [r7, #6]
 800d472:	b21b      	sxth	r3, r3
 800d474:	4313      	orrs	r3, r2
 800d476:	b21b      	sxth	r3, r3
 800d478:	b29a      	uxth	r2, r3
 800d47a:	4b4e      	ldr	r3, [pc, #312]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d47c:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800d47e:	1dfb      	adds	r3, r7, #7
 800d480:	4619      	mov	r1, r3
 800d482:	f44f 7012 	mov.w	r0, #584	; 0x248
 800d486:	f7fe fb23 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800d48a:	1dbb      	adds	r3, r7, #6
 800d48c:	4619      	mov	r1, r3
 800d48e:	f240 2049 	movw	r0, #585	; 0x249
 800d492:	f7fe fb1d 	bl	800bad0 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	021b      	lsls	r3, r3, #8
 800d49a:	b21a      	sxth	r2, r3
 800d49c:	79bb      	ldrb	r3, [r7, #6]
 800d49e:	b21b      	sxth	r3, r3
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	b21b      	sxth	r3, r3
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	4b43      	ldr	r3, [pc, #268]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d4a8:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800d4aa:	1dfb      	adds	r3, r7, #7
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	f240 204a 	movw	r0, #586	; 0x24a
 800d4b2:	f7fe fb0d 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800d4b6:	1dbb      	adds	r3, r7, #6
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	f240 204b 	movw	r0, #587	; 0x24b
 800d4be:	f7fe fb07 	bl	800bad0 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	021b      	lsls	r3, r3, #8
 800d4c6:	b21a      	sxth	r2, r3
 800d4c8:	79bb      	ldrb	r3, [r7, #6]
 800d4ca:	b21b      	sxth	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b21b      	sxth	r3, r3
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	4b38      	ldr	r3, [pc, #224]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d4d4:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800d4d6:	1dfb      	adds	r3, r7, #7
 800d4d8:	4619      	mov	r1, r3
 800d4da:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800d4de:	f7fe faf7 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800d4e2:	1dbb      	adds	r3, r7, #6
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f240 204d 	movw	r0, #589	; 0x24d
 800d4ea:	f7fe faf1 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d4ee:	79fb      	ldrb	r3, [r7, #7]
 800d4f0:	021b      	lsls	r3, r3, #8
 800d4f2:	b21a      	sxth	r2, r3
 800d4f4:	79bb      	ldrb	r3, [r7, #6]
 800d4f6:	b21b      	sxth	r3, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	4b2d      	ldr	r3, [pc, #180]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d500:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800d502:	1dfb      	adds	r3, r7, #7
 800d504:	4619      	mov	r1, r3
 800d506:	f240 204e 	movw	r0, #590	; 0x24e
 800d50a:	f7fe fae1 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800d50e:	1dbb      	adds	r3, r7, #6
 800d510:	4619      	mov	r1, r3
 800d512:	f240 204f 	movw	r0, #591	; 0x24f
 800d516:	f7fe fadb 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	b21a      	sxth	r2, r3
 800d520:	79bb      	ldrb	r3, [r7, #6]
 800d522:	b21b      	sxth	r3, r3
 800d524:	4313      	orrs	r3, r2
 800d526:	b21b      	sxth	r3, r3
 800d528:	b29a      	uxth	r2, r3
 800d52a:	4b22      	ldr	r3, [pc, #136]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d52c:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800d52e:	1dfb      	adds	r3, r7, #7
 800d530:	4619      	mov	r1, r3
 800d532:	f44f 7014 	mov.w	r0, #592	; 0x250
 800d536:	f7fe facb 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800d53a:	1dbb      	adds	r3, r7, #6
 800d53c:	4619      	mov	r1, r3
 800d53e:	f240 2051 	movw	r0, #593	; 0x251
 800d542:	f7fe fac5 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b21a      	sxth	r2, r3
 800d54c:	79bb      	ldrb	r3, [r7, #6]
 800d54e:	b21b      	sxth	r3, r3
 800d550:	4313      	orrs	r3, r2
 800d552:	b21b      	sxth	r3, r3
 800d554:	b29a      	uxth	r2, r3
 800d556:	4b17      	ldr	r3, [pc, #92]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800d55c:	1dfb      	adds	r3, r7, #7
 800d55e:	4619      	mov	r1, r3
 800d560:	f240 2052 	movw	r0, #594	; 0x252
 800d564:	f7fe fab4 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800d568:	1dbb      	adds	r3, r7, #6
 800d56a:	4619      	mov	r1, r3
 800d56c:	f240 2053 	movw	r0, #595	; 0x253
 800d570:	f7fe faae 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	b21a      	sxth	r2, r3
 800d57a:	79bb      	ldrb	r3, [r7, #6]
 800d57c:	b21b      	sxth	r3, r3
 800d57e:	4313      	orrs	r3, r2
 800d580:	b21b      	sxth	r3, r3
 800d582:	b29a      	uxth	r2, r3
 800d584:	4b0b      	ldr	r3, [pc, #44]	; (800d5b4 <read_bootloader_registers_no_rtos+0x614>)
 800d586:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800d58a:	1dfb      	adds	r3, r7, #7
 800d58c:	4619      	mov	r1, r3
 800d58e:	f44f 7015 	mov.w	r0, #596	; 0x254
 800d592:	f7fe fa9d 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800d596:	1dbb      	adds	r3, r7, #6
 800d598:	4619      	mov	r1, r3
 800d59a:	f240 2055 	movw	r0, #597	; 0x255
 800d59e:	f7fe fa97 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	021b      	lsls	r3, r3, #8
 800d5a6:	b21a      	sxth	r2, r3
 800d5a8:	79bb      	ldrb	r3, [r7, #6]
 800d5aa:	b21b      	sxth	r3, r3
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	b21b      	sxth	r3, r3
 800d5b0:	e002      	b.n	800d5b8 <read_bootloader_registers_no_rtos+0x618>
 800d5b2:	bf00      	nop
 800d5b4:	20019f98 	.word	0x20019f98
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	4b1a      	ldr	r3, [pc, #104]	; (800d624 <read_bootloader_registers_no_rtos+0x684>)
 800d5bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800d5c0:	1dfb      	adds	r3, r7, #7
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	f240 2056 	movw	r0, #598	; 0x256
 800d5c8:	f7fe fa82 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800d5cc:	1dbb      	adds	r3, r7, #6
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	f240 2057 	movw	r0, #599	; 0x257
 800d5d4:	f7fe fa7c 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	021b      	lsls	r3, r3, #8
 800d5dc:	b21a      	sxth	r2, r3
 800d5de:	79bb      	ldrb	r3, [r7, #6]
 800d5e0:	b21b      	sxth	r3, r3
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	b21b      	sxth	r3, r3
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <read_bootloader_registers_no_rtos+0x684>)
 800d5ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800d5ee:	1dfb      	adds	r3, r7, #7
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d5f6:	f7fe fa6b 	bl	800bad0 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800d5fa:	1dbb      	adds	r3, r7, #6
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	f240 2059 	movw	r0, #601	; 0x259
 800d602:	f7fe fa65 	bl	800bad0 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	021b      	lsls	r3, r3, #8
 800d60a:	b21a      	sxth	r2, r3
 800d60c:	79bb      	ldrb	r3, [r7, #6]
 800d60e:	b21b      	sxth	r3, r3
 800d610:	4313      	orrs	r3, r2
 800d612:	b21b      	sxth	r3, r3
 800d614:	b29a      	uxth	r2, r3
 800d616:	4b03      	ldr	r3, [pc, #12]	; (800d624 <read_bootloader_registers_no_rtos+0x684>)
 800d618:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20019f98 	.word	0x20019f98

0800d628 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 800d632:	23ff      	movs	r3, #255	; 0xff
 800d634:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 800d636:	23ff      	movs	r3, #255	; 0xff
 800d638:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 800d63a:	e013      	b.n	800d664 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	607a      	str	r2, [r7, #4]
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	4053      	eors	r3, r2
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 800d64c:	4a0d      	ldr	r2, [pc, #52]	; (800d684 <CRC16+0x5c>)
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	4413      	add	r3, r2
 800d652:	781a      	ldrb	r2, [r3, #0]
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4053      	eors	r3, r2
 800d658:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 800d65a:	4a0b      	ldr	r2, [pc, #44]	; (800d688 <CRC16+0x60>)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	1e5a      	subs	r2, r3, #1
 800d668:	603a      	str	r2, [r7, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1e6      	bne.n	800d63c <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	021a      	lsls	r2, r3, #8
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	4313      	orrs	r3, r2
}
 800d676:	4618      	mov	r0, r3
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	0800e398 	.word	0x0800e398
 800d688:	0800e498 	.word	0x0800e498

0800d68c <__errno>:
 800d68c:	4b01      	ldr	r3, [pc, #4]	; (800d694 <__errno+0x8>)
 800d68e:	6818      	ldr	r0, [r3, #0]
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	20000018 	.word	0x20000018

0800d698 <__libc_init_array>:
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	4d0d      	ldr	r5, [pc, #52]	; (800d6d0 <__libc_init_array+0x38>)
 800d69c:	4c0d      	ldr	r4, [pc, #52]	; (800d6d4 <__libc_init_array+0x3c>)
 800d69e:	1b64      	subs	r4, r4, r5
 800d6a0:	10a4      	asrs	r4, r4, #2
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	42a6      	cmp	r6, r4
 800d6a6:	d109      	bne.n	800d6bc <__libc_init_array+0x24>
 800d6a8:	4d0b      	ldr	r5, [pc, #44]	; (800d6d8 <__libc_init_array+0x40>)
 800d6aa:	4c0c      	ldr	r4, [pc, #48]	; (800d6dc <__libc_init_array+0x44>)
 800d6ac:	f000 fcd0 	bl	800e050 <_init>
 800d6b0:	1b64      	subs	r4, r4, r5
 800d6b2:	10a4      	asrs	r4, r4, #2
 800d6b4:	2600      	movs	r6, #0
 800d6b6:	42a6      	cmp	r6, r4
 800d6b8:	d105      	bne.n	800d6c6 <__libc_init_array+0x2e>
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6c0:	4798      	blx	r3
 800d6c2:	3601      	adds	r6, #1
 800d6c4:	e7ee      	b.n	800d6a4 <__libc_init_array+0xc>
 800d6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ca:	4798      	blx	r3
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	e7f2      	b.n	800d6b6 <__libc_init_array+0x1e>
 800d6d0:	0800e634 	.word	0x0800e634
 800d6d4:	0800e634 	.word	0x0800e634
 800d6d8:	0800e634 	.word	0x0800e634
 800d6dc:	0800e638 	.word	0x0800e638

0800d6e0 <__retarget_lock_acquire_recursive>:
 800d6e0:	4770      	bx	lr

0800d6e2 <__retarget_lock_release_recursive>:
 800d6e2:	4770      	bx	lr

0800d6e4 <memcpy>:
 800d6e4:	440a      	add	r2, r1
 800d6e6:	4291      	cmp	r1, r2
 800d6e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6ec:	d100      	bne.n	800d6f0 <memcpy+0xc>
 800d6ee:	4770      	bx	lr
 800d6f0:	b510      	push	{r4, lr}
 800d6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6fa:	4291      	cmp	r1, r2
 800d6fc:	d1f9      	bne.n	800d6f2 <memcpy+0xe>
 800d6fe:	bd10      	pop	{r4, pc}

0800d700 <memset>:
 800d700:	4402      	add	r2, r0
 800d702:	4603      	mov	r3, r0
 800d704:	4293      	cmp	r3, r2
 800d706:	d100      	bne.n	800d70a <memset+0xa>
 800d708:	4770      	bx	lr
 800d70a:	f803 1b01 	strb.w	r1, [r3], #1
 800d70e:	e7f9      	b.n	800d704 <memset+0x4>

0800d710 <_malloc_r>:
 800d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d712:	1ccd      	adds	r5, r1, #3
 800d714:	f025 0503 	bic.w	r5, r5, #3
 800d718:	3508      	adds	r5, #8
 800d71a:	2d0c      	cmp	r5, #12
 800d71c:	bf38      	it	cc
 800d71e:	250c      	movcc	r5, #12
 800d720:	2d00      	cmp	r5, #0
 800d722:	4606      	mov	r6, r0
 800d724:	db01      	blt.n	800d72a <_malloc_r+0x1a>
 800d726:	42a9      	cmp	r1, r5
 800d728:	d903      	bls.n	800d732 <_malloc_r+0x22>
 800d72a:	230c      	movs	r3, #12
 800d72c:	6033      	str	r3, [r6, #0]
 800d72e:	2000      	movs	r0, #0
 800d730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d732:	f000 f8f9 	bl	800d928 <__malloc_lock>
 800d736:	4921      	ldr	r1, [pc, #132]	; (800d7bc <_malloc_r+0xac>)
 800d738:	680a      	ldr	r2, [r1, #0]
 800d73a:	4614      	mov	r4, r2
 800d73c:	b99c      	cbnz	r4, 800d766 <_malloc_r+0x56>
 800d73e:	4f20      	ldr	r7, [pc, #128]	; (800d7c0 <_malloc_r+0xb0>)
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	b923      	cbnz	r3, 800d74e <_malloc_r+0x3e>
 800d744:	4621      	mov	r1, r4
 800d746:	4630      	mov	r0, r6
 800d748:	f000 f8a6 	bl	800d898 <_sbrk_r>
 800d74c:	6038      	str	r0, [r7, #0]
 800d74e:	4629      	mov	r1, r5
 800d750:	4630      	mov	r0, r6
 800d752:	f000 f8a1 	bl	800d898 <_sbrk_r>
 800d756:	1c43      	adds	r3, r0, #1
 800d758:	d123      	bne.n	800d7a2 <_malloc_r+0x92>
 800d75a:	230c      	movs	r3, #12
 800d75c:	6033      	str	r3, [r6, #0]
 800d75e:	4630      	mov	r0, r6
 800d760:	f000 f8e8 	bl	800d934 <__malloc_unlock>
 800d764:	e7e3      	b.n	800d72e <_malloc_r+0x1e>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	1b5b      	subs	r3, r3, r5
 800d76a:	d417      	bmi.n	800d79c <_malloc_r+0x8c>
 800d76c:	2b0b      	cmp	r3, #11
 800d76e:	d903      	bls.n	800d778 <_malloc_r+0x68>
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	441c      	add	r4, r3
 800d774:	6025      	str	r5, [r4, #0]
 800d776:	e004      	b.n	800d782 <_malloc_r+0x72>
 800d778:	6863      	ldr	r3, [r4, #4]
 800d77a:	42a2      	cmp	r2, r4
 800d77c:	bf0c      	ite	eq
 800d77e:	600b      	streq	r3, [r1, #0]
 800d780:	6053      	strne	r3, [r2, #4]
 800d782:	4630      	mov	r0, r6
 800d784:	f000 f8d6 	bl	800d934 <__malloc_unlock>
 800d788:	f104 000b 	add.w	r0, r4, #11
 800d78c:	1d23      	adds	r3, r4, #4
 800d78e:	f020 0007 	bic.w	r0, r0, #7
 800d792:	1ac2      	subs	r2, r0, r3
 800d794:	d0cc      	beq.n	800d730 <_malloc_r+0x20>
 800d796:	1a1b      	subs	r3, r3, r0
 800d798:	50a3      	str	r3, [r4, r2]
 800d79a:	e7c9      	b.n	800d730 <_malloc_r+0x20>
 800d79c:	4622      	mov	r2, r4
 800d79e:	6864      	ldr	r4, [r4, #4]
 800d7a0:	e7cc      	b.n	800d73c <_malloc_r+0x2c>
 800d7a2:	1cc4      	adds	r4, r0, #3
 800d7a4:	f024 0403 	bic.w	r4, r4, #3
 800d7a8:	42a0      	cmp	r0, r4
 800d7aa:	d0e3      	beq.n	800d774 <_malloc_r+0x64>
 800d7ac:	1a21      	subs	r1, r4, r0
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f000 f872 	bl	800d898 <_sbrk_r>
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d1dd      	bne.n	800d774 <_malloc_r+0x64>
 800d7b8:	e7cf      	b.n	800d75a <_malloc_r+0x4a>
 800d7ba:	bf00      	nop
 800d7bc:	20007f9c 	.word	0x20007f9c
 800d7c0:	20007fa0 	.word	0x20007fa0

0800d7c4 <cleanup_glue>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	6809      	ldr	r1, [r1, #0]
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	b109      	cbz	r1, 800d7d2 <cleanup_glue+0xe>
 800d7ce:	f7ff fff9 	bl	800d7c4 <cleanup_glue>
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7da:	f000 b8b1 	b.w	800d940 <_free_r>
	...

0800d7e0 <_reclaim_reent>:
 800d7e0:	4b2c      	ldr	r3, [pc, #176]	; (800d894 <_reclaim_reent+0xb4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4283      	cmp	r3, r0
 800d7e6:	b570      	push	{r4, r5, r6, lr}
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	d051      	beq.n	800d890 <_reclaim_reent+0xb0>
 800d7ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d7ee:	b143      	cbz	r3, 800d802 <_reclaim_reent+0x22>
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d14a      	bne.n	800d88c <_reclaim_reent+0xac>
 800d7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7f8:	6819      	ldr	r1, [r3, #0]
 800d7fa:	b111      	cbz	r1, 800d802 <_reclaim_reent+0x22>
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f000 f89f 	bl	800d940 <_free_r>
 800d802:	6961      	ldr	r1, [r4, #20]
 800d804:	b111      	cbz	r1, 800d80c <_reclaim_reent+0x2c>
 800d806:	4620      	mov	r0, r4
 800d808:	f000 f89a 	bl	800d940 <_free_r>
 800d80c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d80e:	b111      	cbz	r1, 800d816 <_reclaim_reent+0x36>
 800d810:	4620      	mov	r0, r4
 800d812:	f000 f895 	bl	800d940 <_free_r>
 800d816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d818:	b111      	cbz	r1, 800d820 <_reclaim_reent+0x40>
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 f890 	bl	800d940 <_free_r>
 800d820:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d822:	b111      	cbz	r1, 800d82a <_reclaim_reent+0x4a>
 800d824:	4620      	mov	r0, r4
 800d826:	f000 f88b 	bl	800d940 <_free_r>
 800d82a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d82c:	b111      	cbz	r1, 800d834 <_reclaim_reent+0x54>
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 f886 	bl	800d940 <_free_r>
 800d834:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d836:	b111      	cbz	r1, 800d83e <_reclaim_reent+0x5e>
 800d838:	4620      	mov	r0, r4
 800d83a:	f000 f881 	bl	800d940 <_free_r>
 800d83e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d840:	b111      	cbz	r1, 800d848 <_reclaim_reent+0x68>
 800d842:	4620      	mov	r0, r4
 800d844:	f000 f87c 	bl	800d940 <_free_r>
 800d848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d84a:	b111      	cbz	r1, 800d852 <_reclaim_reent+0x72>
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 f877 	bl	800d940 <_free_r>
 800d852:	69a3      	ldr	r3, [r4, #24]
 800d854:	b1e3      	cbz	r3, 800d890 <_reclaim_reent+0xb0>
 800d856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d858:	4620      	mov	r0, r4
 800d85a:	4798      	blx	r3
 800d85c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d85e:	b1b9      	cbz	r1, 800d890 <_reclaim_reent+0xb0>
 800d860:	4620      	mov	r0, r4
 800d862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d866:	f7ff bfad 	b.w	800d7c4 <cleanup_glue>
 800d86a:	5949      	ldr	r1, [r1, r5]
 800d86c:	b941      	cbnz	r1, 800d880 <_reclaim_reent+0xa0>
 800d86e:	3504      	adds	r5, #4
 800d870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d872:	2d80      	cmp	r5, #128	; 0x80
 800d874:	68d9      	ldr	r1, [r3, #12]
 800d876:	d1f8      	bne.n	800d86a <_reclaim_reent+0x8a>
 800d878:	4620      	mov	r0, r4
 800d87a:	f000 f861 	bl	800d940 <_free_r>
 800d87e:	e7ba      	b.n	800d7f6 <_reclaim_reent+0x16>
 800d880:	680e      	ldr	r6, [r1, #0]
 800d882:	4620      	mov	r0, r4
 800d884:	f000 f85c 	bl	800d940 <_free_r>
 800d888:	4631      	mov	r1, r6
 800d88a:	e7ef      	b.n	800d86c <_reclaim_reent+0x8c>
 800d88c:	2500      	movs	r5, #0
 800d88e:	e7ef      	b.n	800d870 <_reclaim_reent+0x90>
 800d890:	bd70      	pop	{r4, r5, r6, pc}
 800d892:	bf00      	nop
 800d894:	20000018 	.word	0x20000018

0800d898 <_sbrk_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d06      	ldr	r5, [pc, #24]	; (800d8b4 <_sbrk_r+0x1c>)
 800d89c:	2300      	movs	r3, #0
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f3 ff64 	bl	8001770 <_sbrk>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_sbrk_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_sbrk_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	2001a130 	.word	0x2001a130

0800d8b8 <siprintf>:
 800d8b8:	b40e      	push	{r1, r2, r3}
 800d8ba:	b500      	push	{lr}
 800d8bc:	b09c      	sub	sp, #112	; 0x70
 800d8be:	ab1d      	add	r3, sp, #116	; 0x74
 800d8c0:	9002      	str	r0, [sp, #8]
 800d8c2:	9006      	str	r0, [sp, #24]
 800d8c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8c8:	4809      	ldr	r0, [pc, #36]	; (800d8f0 <siprintf+0x38>)
 800d8ca:	9107      	str	r1, [sp, #28]
 800d8cc:	9104      	str	r1, [sp, #16]
 800d8ce:	4909      	ldr	r1, [pc, #36]	; (800d8f4 <siprintf+0x3c>)
 800d8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8d4:	9105      	str	r1, [sp, #20]
 800d8d6:	6800      	ldr	r0, [r0, #0]
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	a902      	add	r1, sp, #8
 800d8dc:	f000 f8dc 	bl	800da98 <_svfiprintf_r>
 800d8e0:	9b02      	ldr	r3, [sp, #8]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
 800d8e6:	b01c      	add	sp, #112	; 0x70
 800d8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8ec:	b003      	add	sp, #12
 800d8ee:	4770      	bx	lr
 800d8f0:	20000018 	.word	0x20000018
 800d8f4:	ffff0208 	.word	0xffff0208

0800d8f8 <strstr>:
 800d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8fa:	780c      	ldrb	r4, [r1, #0]
 800d8fc:	b164      	cbz	r4, 800d918 <strstr+0x20>
 800d8fe:	4603      	mov	r3, r0
 800d900:	781a      	ldrb	r2, [r3, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	1c5e      	adds	r6, r3, #1
 800d906:	b90a      	cbnz	r2, 800d90c <strstr+0x14>
 800d908:	4610      	mov	r0, r2
 800d90a:	e005      	b.n	800d918 <strstr+0x20>
 800d90c:	4294      	cmp	r4, r2
 800d90e:	d108      	bne.n	800d922 <strstr+0x2a>
 800d910:	460d      	mov	r5, r1
 800d912:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d916:	b902      	cbnz	r2, 800d91a <strstr+0x22>
 800d918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d91a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d91e:	4297      	cmp	r7, r2
 800d920:	d0f7      	beq.n	800d912 <strstr+0x1a>
 800d922:	4633      	mov	r3, r6
 800d924:	e7ec      	b.n	800d900 <strstr+0x8>
	...

0800d928 <__malloc_lock>:
 800d928:	4801      	ldr	r0, [pc, #4]	; (800d930 <__malloc_lock+0x8>)
 800d92a:	f7ff bed9 	b.w	800d6e0 <__retarget_lock_acquire_recursive>
 800d92e:	bf00      	nop
 800d930:	2001a128 	.word	0x2001a128

0800d934 <__malloc_unlock>:
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__malloc_unlock+0x8>)
 800d936:	f7ff bed4 	b.w	800d6e2 <__retarget_lock_release_recursive>
 800d93a:	bf00      	nop
 800d93c:	2001a128 	.word	0x2001a128

0800d940 <_free_r>:
 800d940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d942:	2900      	cmp	r1, #0
 800d944:	d048      	beq.n	800d9d8 <_free_r+0x98>
 800d946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d94a:	9001      	str	r0, [sp, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f1a1 0404 	sub.w	r4, r1, #4
 800d952:	bfb8      	it	lt
 800d954:	18e4      	addlt	r4, r4, r3
 800d956:	f7ff ffe7 	bl	800d928 <__malloc_lock>
 800d95a:	4a20      	ldr	r2, [pc, #128]	; (800d9dc <_free_r+0x9c>)
 800d95c:	9801      	ldr	r0, [sp, #4]
 800d95e:	6813      	ldr	r3, [r2, #0]
 800d960:	4615      	mov	r5, r2
 800d962:	b933      	cbnz	r3, 800d972 <_free_r+0x32>
 800d964:	6063      	str	r3, [r4, #4]
 800d966:	6014      	str	r4, [r2, #0]
 800d968:	b003      	add	sp, #12
 800d96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d96e:	f7ff bfe1 	b.w	800d934 <__malloc_unlock>
 800d972:	42a3      	cmp	r3, r4
 800d974:	d90b      	bls.n	800d98e <_free_r+0x4e>
 800d976:	6821      	ldr	r1, [r4, #0]
 800d978:	1862      	adds	r2, r4, r1
 800d97a:	4293      	cmp	r3, r2
 800d97c:	bf04      	itt	eq
 800d97e:	681a      	ldreq	r2, [r3, #0]
 800d980:	685b      	ldreq	r3, [r3, #4]
 800d982:	6063      	str	r3, [r4, #4]
 800d984:	bf04      	itt	eq
 800d986:	1852      	addeq	r2, r2, r1
 800d988:	6022      	streq	r2, [r4, #0]
 800d98a:	602c      	str	r4, [r5, #0]
 800d98c:	e7ec      	b.n	800d968 <_free_r+0x28>
 800d98e:	461a      	mov	r2, r3
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	b10b      	cbz	r3, 800d998 <_free_r+0x58>
 800d994:	42a3      	cmp	r3, r4
 800d996:	d9fa      	bls.n	800d98e <_free_r+0x4e>
 800d998:	6811      	ldr	r1, [r2, #0]
 800d99a:	1855      	adds	r5, r2, r1
 800d99c:	42a5      	cmp	r5, r4
 800d99e:	d10b      	bne.n	800d9b8 <_free_r+0x78>
 800d9a0:	6824      	ldr	r4, [r4, #0]
 800d9a2:	4421      	add	r1, r4
 800d9a4:	1854      	adds	r4, r2, r1
 800d9a6:	42a3      	cmp	r3, r4
 800d9a8:	6011      	str	r1, [r2, #0]
 800d9aa:	d1dd      	bne.n	800d968 <_free_r+0x28>
 800d9ac:	681c      	ldr	r4, [r3, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	6053      	str	r3, [r2, #4]
 800d9b2:	4421      	add	r1, r4
 800d9b4:	6011      	str	r1, [r2, #0]
 800d9b6:	e7d7      	b.n	800d968 <_free_r+0x28>
 800d9b8:	d902      	bls.n	800d9c0 <_free_r+0x80>
 800d9ba:	230c      	movs	r3, #12
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	e7d3      	b.n	800d968 <_free_r+0x28>
 800d9c0:	6825      	ldr	r5, [r4, #0]
 800d9c2:	1961      	adds	r1, r4, r5
 800d9c4:	428b      	cmp	r3, r1
 800d9c6:	bf04      	itt	eq
 800d9c8:	6819      	ldreq	r1, [r3, #0]
 800d9ca:	685b      	ldreq	r3, [r3, #4]
 800d9cc:	6063      	str	r3, [r4, #4]
 800d9ce:	bf04      	itt	eq
 800d9d0:	1949      	addeq	r1, r1, r5
 800d9d2:	6021      	streq	r1, [r4, #0]
 800d9d4:	6054      	str	r4, [r2, #4]
 800d9d6:	e7c7      	b.n	800d968 <_free_r+0x28>
 800d9d8:	b003      	add	sp, #12
 800d9da:	bd30      	pop	{r4, r5, pc}
 800d9dc:	20007f9c 	.word	0x20007f9c

0800d9e0 <__ssputs_r>:
 800d9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	688e      	ldr	r6, [r1, #8]
 800d9e6:	429e      	cmp	r6, r3
 800d9e8:	4682      	mov	sl, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	4690      	mov	r8, r2
 800d9ee:	461f      	mov	r7, r3
 800d9f0:	d838      	bhi.n	800da64 <__ssputs_r+0x84>
 800d9f2:	898a      	ldrh	r2, [r1, #12]
 800d9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9f8:	d032      	beq.n	800da60 <__ssputs_r+0x80>
 800d9fa:	6825      	ldr	r5, [r4, #0]
 800d9fc:	6909      	ldr	r1, [r1, #16]
 800d9fe:	eba5 0901 	sub.w	r9, r5, r1
 800da02:	6965      	ldr	r5, [r4, #20]
 800da04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da0c:	3301      	adds	r3, #1
 800da0e:	444b      	add	r3, r9
 800da10:	106d      	asrs	r5, r5, #1
 800da12:	429d      	cmp	r5, r3
 800da14:	bf38      	it	cc
 800da16:	461d      	movcc	r5, r3
 800da18:	0553      	lsls	r3, r2, #21
 800da1a:	d531      	bpl.n	800da80 <__ssputs_r+0xa0>
 800da1c:	4629      	mov	r1, r5
 800da1e:	f7ff fe77 	bl	800d710 <_malloc_r>
 800da22:	4606      	mov	r6, r0
 800da24:	b950      	cbnz	r0, 800da3c <__ssputs_r+0x5c>
 800da26:	230c      	movs	r3, #12
 800da28:	f8ca 3000 	str.w	r3, [sl]
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da32:	81a3      	strh	r3, [r4, #12]
 800da34:	f04f 30ff 	mov.w	r0, #4294967295
 800da38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3c:	6921      	ldr	r1, [r4, #16]
 800da3e:	464a      	mov	r2, r9
 800da40:	f7ff fe50 	bl	800d6e4 <memcpy>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da4e:	81a3      	strh	r3, [r4, #12]
 800da50:	6126      	str	r6, [r4, #16]
 800da52:	6165      	str	r5, [r4, #20]
 800da54:	444e      	add	r6, r9
 800da56:	eba5 0509 	sub.w	r5, r5, r9
 800da5a:	6026      	str	r6, [r4, #0]
 800da5c:	60a5      	str	r5, [r4, #8]
 800da5e:	463e      	mov	r6, r7
 800da60:	42be      	cmp	r6, r7
 800da62:	d900      	bls.n	800da66 <__ssputs_r+0x86>
 800da64:	463e      	mov	r6, r7
 800da66:	4632      	mov	r2, r6
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	4641      	mov	r1, r8
 800da6c:	f000 faa8 	bl	800dfc0 <memmove>
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	6822      	ldr	r2, [r4, #0]
 800da74:	1b9b      	subs	r3, r3, r6
 800da76:	4432      	add	r2, r6
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	6022      	str	r2, [r4, #0]
 800da7c:	2000      	movs	r0, #0
 800da7e:	e7db      	b.n	800da38 <__ssputs_r+0x58>
 800da80:	462a      	mov	r2, r5
 800da82:	f000 fab7 	bl	800dff4 <_realloc_r>
 800da86:	4606      	mov	r6, r0
 800da88:	2800      	cmp	r0, #0
 800da8a:	d1e1      	bne.n	800da50 <__ssputs_r+0x70>
 800da8c:	6921      	ldr	r1, [r4, #16]
 800da8e:	4650      	mov	r0, sl
 800da90:	f7ff ff56 	bl	800d940 <_free_r>
 800da94:	e7c7      	b.n	800da26 <__ssputs_r+0x46>
	...

0800da98 <_svfiprintf_r>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	4698      	mov	r8, r3
 800da9e:	898b      	ldrh	r3, [r1, #12]
 800daa0:	061b      	lsls	r3, r3, #24
 800daa2:	b09d      	sub	sp, #116	; 0x74
 800daa4:	4607      	mov	r7, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	4614      	mov	r4, r2
 800daaa:	d50e      	bpl.n	800daca <_svfiprintf_r+0x32>
 800daac:	690b      	ldr	r3, [r1, #16]
 800daae:	b963      	cbnz	r3, 800daca <_svfiprintf_r+0x32>
 800dab0:	2140      	movs	r1, #64	; 0x40
 800dab2:	f7ff fe2d 	bl	800d710 <_malloc_r>
 800dab6:	6028      	str	r0, [r5, #0]
 800dab8:	6128      	str	r0, [r5, #16]
 800daba:	b920      	cbnz	r0, 800dac6 <_svfiprintf_r+0x2e>
 800dabc:	230c      	movs	r3, #12
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	f04f 30ff 	mov.w	r0, #4294967295
 800dac4:	e0d1      	b.n	800dc6a <_svfiprintf_r+0x1d2>
 800dac6:	2340      	movs	r3, #64	; 0x40
 800dac8:	616b      	str	r3, [r5, #20]
 800daca:	2300      	movs	r3, #0
 800dacc:	9309      	str	r3, [sp, #36]	; 0x24
 800dace:	2320      	movs	r3, #32
 800dad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dad8:	2330      	movs	r3, #48	; 0x30
 800dada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc84 <_svfiprintf_r+0x1ec>
 800dade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dae2:	f04f 0901 	mov.w	r9, #1
 800dae6:	4623      	mov	r3, r4
 800dae8:	469a      	mov	sl, r3
 800daea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daee:	b10a      	cbz	r2, 800daf4 <_svfiprintf_r+0x5c>
 800daf0:	2a25      	cmp	r2, #37	; 0x25
 800daf2:	d1f9      	bne.n	800dae8 <_svfiprintf_r+0x50>
 800daf4:	ebba 0b04 	subs.w	fp, sl, r4
 800daf8:	d00b      	beq.n	800db12 <_svfiprintf_r+0x7a>
 800dafa:	465b      	mov	r3, fp
 800dafc:	4622      	mov	r2, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	4638      	mov	r0, r7
 800db02:	f7ff ff6d 	bl	800d9e0 <__ssputs_r>
 800db06:	3001      	adds	r0, #1
 800db08:	f000 80aa 	beq.w	800dc60 <_svfiprintf_r+0x1c8>
 800db0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db0e:	445a      	add	r2, fp
 800db10:	9209      	str	r2, [sp, #36]	; 0x24
 800db12:	f89a 3000 	ldrb.w	r3, [sl]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80a2 	beq.w	800dc60 <_svfiprintf_r+0x1c8>
 800db1c:	2300      	movs	r3, #0
 800db1e:	f04f 32ff 	mov.w	r2, #4294967295
 800db22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db26:	f10a 0a01 	add.w	sl, sl, #1
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	9307      	str	r3, [sp, #28]
 800db2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db32:	931a      	str	r3, [sp, #104]	; 0x68
 800db34:	4654      	mov	r4, sl
 800db36:	2205      	movs	r2, #5
 800db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3c:	4851      	ldr	r0, [pc, #324]	; (800dc84 <_svfiprintf_r+0x1ec>)
 800db3e:	f7f2 fb4f 	bl	80001e0 <memchr>
 800db42:	9a04      	ldr	r2, [sp, #16]
 800db44:	b9d8      	cbnz	r0, 800db7e <_svfiprintf_r+0xe6>
 800db46:	06d0      	lsls	r0, r2, #27
 800db48:	bf44      	itt	mi
 800db4a:	2320      	movmi	r3, #32
 800db4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db50:	0711      	lsls	r1, r2, #28
 800db52:	bf44      	itt	mi
 800db54:	232b      	movmi	r3, #43	; 0x2b
 800db56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db5a:	f89a 3000 	ldrb.w	r3, [sl]
 800db5e:	2b2a      	cmp	r3, #42	; 0x2a
 800db60:	d015      	beq.n	800db8e <_svfiprintf_r+0xf6>
 800db62:	9a07      	ldr	r2, [sp, #28]
 800db64:	4654      	mov	r4, sl
 800db66:	2000      	movs	r0, #0
 800db68:	f04f 0c0a 	mov.w	ip, #10
 800db6c:	4621      	mov	r1, r4
 800db6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db72:	3b30      	subs	r3, #48	; 0x30
 800db74:	2b09      	cmp	r3, #9
 800db76:	d94e      	bls.n	800dc16 <_svfiprintf_r+0x17e>
 800db78:	b1b0      	cbz	r0, 800dba8 <_svfiprintf_r+0x110>
 800db7a:	9207      	str	r2, [sp, #28]
 800db7c:	e014      	b.n	800dba8 <_svfiprintf_r+0x110>
 800db7e:	eba0 0308 	sub.w	r3, r0, r8
 800db82:	fa09 f303 	lsl.w	r3, r9, r3
 800db86:	4313      	orrs	r3, r2
 800db88:	9304      	str	r3, [sp, #16]
 800db8a:	46a2      	mov	sl, r4
 800db8c:	e7d2      	b.n	800db34 <_svfiprintf_r+0x9c>
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	1d19      	adds	r1, r3, #4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	9103      	str	r1, [sp, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	bfbb      	ittet	lt
 800db9a:	425b      	neglt	r3, r3
 800db9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dba0:	9307      	strge	r3, [sp, #28]
 800dba2:	9307      	strlt	r3, [sp, #28]
 800dba4:	bfb8      	it	lt
 800dba6:	9204      	strlt	r2, [sp, #16]
 800dba8:	7823      	ldrb	r3, [r4, #0]
 800dbaa:	2b2e      	cmp	r3, #46	; 0x2e
 800dbac:	d10c      	bne.n	800dbc8 <_svfiprintf_r+0x130>
 800dbae:	7863      	ldrb	r3, [r4, #1]
 800dbb0:	2b2a      	cmp	r3, #42	; 0x2a
 800dbb2:	d135      	bne.n	800dc20 <_svfiprintf_r+0x188>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	1d1a      	adds	r2, r3, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	9203      	str	r2, [sp, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bfb8      	it	lt
 800dbc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbc4:	3402      	adds	r4, #2
 800dbc6:	9305      	str	r3, [sp, #20]
 800dbc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc94 <_svfiprintf_r+0x1fc>
 800dbcc:	7821      	ldrb	r1, [r4, #0]
 800dbce:	2203      	movs	r2, #3
 800dbd0:	4650      	mov	r0, sl
 800dbd2:	f7f2 fb05 	bl	80001e0 <memchr>
 800dbd6:	b140      	cbz	r0, 800dbea <_svfiprintf_r+0x152>
 800dbd8:	2340      	movs	r3, #64	; 0x40
 800dbda:	eba0 000a 	sub.w	r0, r0, sl
 800dbde:	fa03 f000 	lsl.w	r0, r3, r0
 800dbe2:	9b04      	ldr	r3, [sp, #16]
 800dbe4:	4303      	orrs	r3, r0
 800dbe6:	3401      	adds	r4, #1
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbee:	4826      	ldr	r0, [pc, #152]	; (800dc88 <_svfiprintf_r+0x1f0>)
 800dbf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbf4:	2206      	movs	r2, #6
 800dbf6:	f7f2 faf3 	bl	80001e0 <memchr>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d038      	beq.n	800dc70 <_svfiprintf_r+0x1d8>
 800dbfe:	4b23      	ldr	r3, [pc, #140]	; (800dc8c <_svfiprintf_r+0x1f4>)
 800dc00:	bb1b      	cbnz	r3, 800dc4a <_svfiprintf_r+0x1b2>
 800dc02:	9b03      	ldr	r3, [sp, #12]
 800dc04:	3307      	adds	r3, #7
 800dc06:	f023 0307 	bic.w	r3, r3, #7
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	9303      	str	r3, [sp, #12]
 800dc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc10:	4433      	add	r3, r6
 800dc12:	9309      	str	r3, [sp, #36]	; 0x24
 800dc14:	e767      	b.n	800dae6 <_svfiprintf_r+0x4e>
 800dc16:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	e7a5      	b.n	800db6c <_svfiprintf_r+0xd4>
 800dc20:	2300      	movs	r3, #0
 800dc22:	3401      	adds	r4, #1
 800dc24:	9305      	str	r3, [sp, #20]
 800dc26:	4619      	mov	r1, r3
 800dc28:	f04f 0c0a 	mov.w	ip, #10
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc32:	3a30      	subs	r2, #48	; 0x30
 800dc34:	2a09      	cmp	r2, #9
 800dc36:	d903      	bls.n	800dc40 <_svfiprintf_r+0x1a8>
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d0c5      	beq.n	800dbc8 <_svfiprintf_r+0x130>
 800dc3c:	9105      	str	r1, [sp, #20]
 800dc3e:	e7c3      	b.n	800dbc8 <_svfiprintf_r+0x130>
 800dc40:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc44:	4604      	mov	r4, r0
 800dc46:	2301      	movs	r3, #1
 800dc48:	e7f0      	b.n	800dc2c <_svfiprintf_r+0x194>
 800dc4a:	ab03      	add	r3, sp, #12
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	462a      	mov	r2, r5
 800dc50:	4b0f      	ldr	r3, [pc, #60]	; (800dc90 <_svfiprintf_r+0x1f8>)
 800dc52:	a904      	add	r1, sp, #16
 800dc54:	4638      	mov	r0, r7
 800dc56:	f3af 8000 	nop.w
 800dc5a:	1c42      	adds	r2, r0, #1
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	d1d6      	bne.n	800dc0e <_svfiprintf_r+0x176>
 800dc60:	89ab      	ldrh	r3, [r5, #12]
 800dc62:	065b      	lsls	r3, r3, #25
 800dc64:	f53f af2c 	bmi.w	800dac0 <_svfiprintf_r+0x28>
 800dc68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc6a:	b01d      	add	sp, #116	; 0x74
 800dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc70:	ab03      	add	r3, sp, #12
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	462a      	mov	r2, r5
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <_svfiprintf_r+0x1f8>)
 800dc78:	a904      	add	r1, sp, #16
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	f000 f87a 	bl	800dd74 <_printf_i>
 800dc80:	e7eb      	b.n	800dc5a <_svfiprintf_r+0x1c2>
 800dc82:	bf00      	nop
 800dc84:	0800e5f8 	.word	0x0800e5f8
 800dc88:	0800e602 	.word	0x0800e602
 800dc8c:	00000000 	.word	0x00000000
 800dc90:	0800d9e1 	.word	0x0800d9e1
 800dc94:	0800e5fe 	.word	0x0800e5fe

0800dc98 <_printf_common>:
 800dc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc9c:	4616      	mov	r6, r2
 800dc9e:	4699      	mov	r9, r3
 800dca0:	688a      	ldr	r2, [r1, #8]
 800dca2:	690b      	ldr	r3, [r1, #16]
 800dca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	bfb8      	it	lt
 800dcac:	4613      	movlt	r3, r2
 800dcae:	6033      	str	r3, [r6, #0]
 800dcb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcb4:	4607      	mov	r7, r0
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	b10a      	cbz	r2, 800dcbe <_printf_common+0x26>
 800dcba:	3301      	adds	r3, #1
 800dcbc:	6033      	str	r3, [r6, #0]
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	0699      	lsls	r1, r3, #26
 800dcc2:	bf42      	ittt	mi
 800dcc4:	6833      	ldrmi	r3, [r6, #0]
 800dcc6:	3302      	addmi	r3, #2
 800dcc8:	6033      	strmi	r3, [r6, #0]
 800dcca:	6825      	ldr	r5, [r4, #0]
 800dccc:	f015 0506 	ands.w	r5, r5, #6
 800dcd0:	d106      	bne.n	800dce0 <_printf_common+0x48>
 800dcd2:	f104 0a19 	add.w	sl, r4, #25
 800dcd6:	68e3      	ldr	r3, [r4, #12]
 800dcd8:	6832      	ldr	r2, [r6, #0]
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	42ab      	cmp	r3, r5
 800dcde:	dc26      	bgt.n	800dd2e <_printf_common+0x96>
 800dce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dce4:	1e13      	subs	r3, r2, #0
 800dce6:	6822      	ldr	r2, [r4, #0]
 800dce8:	bf18      	it	ne
 800dcea:	2301      	movne	r3, #1
 800dcec:	0692      	lsls	r2, r2, #26
 800dcee:	d42b      	bmi.n	800dd48 <_printf_common+0xb0>
 800dcf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	47c0      	blx	r8
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	d01e      	beq.n	800dd3c <_printf_common+0xa4>
 800dcfe:	6823      	ldr	r3, [r4, #0]
 800dd00:	68e5      	ldr	r5, [r4, #12]
 800dd02:	6832      	ldr	r2, [r6, #0]
 800dd04:	f003 0306 	and.w	r3, r3, #6
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	bf08      	it	eq
 800dd0c:	1aad      	subeq	r5, r5, r2
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	6922      	ldr	r2, [r4, #16]
 800dd12:	bf0c      	ite	eq
 800dd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd18:	2500      	movne	r5, #0
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	bfc4      	itt	gt
 800dd1e:	1a9b      	subgt	r3, r3, r2
 800dd20:	18ed      	addgt	r5, r5, r3
 800dd22:	2600      	movs	r6, #0
 800dd24:	341a      	adds	r4, #26
 800dd26:	42b5      	cmp	r5, r6
 800dd28:	d11a      	bne.n	800dd60 <_printf_common+0xc8>
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	e008      	b.n	800dd40 <_printf_common+0xa8>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	4652      	mov	r2, sl
 800dd32:	4649      	mov	r1, r9
 800dd34:	4638      	mov	r0, r7
 800dd36:	47c0      	blx	r8
 800dd38:	3001      	adds	r0, #1
 800dd3a:	d103      	bne.n	800dd44 <_printf_common+0xac>
 800dd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd44:	3501      	adds	r5, #1
 800dd46:	e7c6      	b.n	800dcd6 <_printf_common+0x3e>
 800dd48:	18e1      	adds	r1, r4, r3
 800dd4a:	1c5a      	adds	r2, r3, #1
 800dd4c:	2030      	movs	r0, #48	; 0x30
 800dd4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd52:	4422      	add	r2, r4
 800dd54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd5c:	3302      	adds	r3, #2
 800dd5e:	e7c7      	b.n	800dcf0 <_printf_common+0x58>
 800dd60:	2301      	movs	r3, #1
 800dd62:	4622      	mov	r2, r4
 800dd64:	4649      	mov	r1, r9
 800dd66:	4638      	mov	r0, r7
 800dd68:	47c0      	blx	r8
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	d0e6      	beq.n	800dd3c <_printf_common+0xa4>
 800dd6e:	3601      	adds	r6, #1
 800dd70:	e7d9      	b.n	800dd26 <_printf_common+0x8e>
	...

0800dd74 <_printf_i>:
 800dd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd78:	460c      	mov	r4, r1
 800dd7a:	4691      	mov	r9, r2
 800dd7c:	7e27      	ldrb	r7, [r4, #24]
 800dd7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd80:	2f78      	cmp	r7, #120	; 0x78
 800dd82:	4680      	mov	r8, r0
 800dd84:	469a      	mov	sl, r3
 800dd86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd8a:	d807      	bhi.n	800dd9c <_printf_i+0x28>
 800dd8c:	2f62      	cmp	r7, #98	; 0x62
 800dd8e:	d80a      	bhi.n	800dda6 <_printf_i+0x32>
 800dd90:	2f00      	cmp	r7, #0
 800dd92:	f000 80d8 	beq.w	800df46 <_printf_i+0x1d2>
 800dd96:	2f58      	cmp	r7, #88	; 0x58
 800dd98:	f000 80a3 	beq.w	800dee2 <_printf_i+0x16e>
 800dd9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dda4:	e03a      	b.n	800de1c <_printf_i+0xa8>
 800dda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddaa:	2b15      	cmp	r3, #21
 800ddac:	d8f6      	bhi.n	800dd9c <_printf_i+0x28>
 800ddae:	a001      	add	r0, pc, #4	; (adr r0, 800ddb4 <_printf_i+0x40>)
 800ddb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ddb4:	0800de0d 	.word	0x0800de0d
 800ddb8:	0800de21 	.word	0x0800de21
 800ddbc:	0800dd9d 	.word	0x0800dd9d
 800ddc0:	0800dd9d 	.word	0x0800dd9d
 800ddc4:	0800dd9d 	.word	0x0800dd9d
 800ddc8:	0800dd9d 	.word	0x0800dd9d
 800ddcc:	0800de21 	.word	0x0800de21
 800ddd0:	0800dd9d 	.word	0x0800dd9d
 800ddd4:	0800dd9d 	.word	0x0800dd9d
 800ddd8:	0800dd9d 	.word	0x0800dd9d
 800dddc:	0800dd9d 	.word	0x0800dd9d
 800dde0:	0800df2d 	.word	0x0800df2d
 800dde4:	0800de51 	.word	0x0800de51
 800dde8:	0800df0f 	.word	0x0800df0f
 800ddec:	0800dd9d 	.word	0x0800dd9d
 800ddf0:	0800dd9d 	.word	0x0800dd9d
 800ddf4:	0800df4f 	.word	0x0800df4f
 800ddf8:	0800dd9d 	.word	0x0800dd9d
 800ddfc:	0800de51 	.word	0x0800de51
 800de00:	0800dd9d 	.word	0x0800dd9d
 800de04:	0800dd9d 	.word	0x0800dd9d
 800de08:	0800df17 	.word	0x0800df17
 800de0c:	680b      	ldr	r3, [r1, #0]
 800de0e:	1d1a      	adds	r2, r3, #4
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	600a      	str	r2, [r1, #0]
 800de14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de1c:	2301      	movs	r3, #1
 800de1e:	e0a3      	b.n	800df68 <_printf_i+0x1f4>
 800de20:	6825      	ldr	r5, [r4, #0]
 800de22:	6808      	ldr	r0, [r1, #0]
 800de24:	062e      	lsls	r6, r5, #24
 800de26:	f100 0304 	add.w	r3, r0, #4
 800de2a:	d50a      	bpl.n	800de42 <_printf_i+0xce>
 800de2c:	6805      	ldr	r5, [r0, #0]
 800de2e:	600b      	str	r3, [r1, #0]
 800de30:	2d00      	cmp	r5, #0
 800de32:	da03      	bge.n	800de3c <_printf_i+0xc8>
 800de34:	232d      	movs	r3, #45	; 0x2d
 800de36:	426d      	negs	r5, r5
 800de38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de3c:	485e      	ldr	r0, [pc, #376]	; (800dfb8 <_printf_i+0x244>)
 800de3e:	230a      	movs	r3, #10
 800de40:	e019      	b.n	800de76 <_printf_i+0x102>
 800de42:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de46:	6805      	ldr	r5, [r0, #0]
 800de48:	600b      	str	r3, [r1, #0]
 800de4a:	bf18      	it	ne
 800de4c:	b22d      	sxthne	r5, r5
 800de4e:	e7ef      	b.n	800de30 <_printf_i+0xbc>
 800de50:	680b      	ldr	r3, [r1, #0]
 800de52:	6825      	ldr	r5, [r4, #0]
 800de54:	1d18      	adds	r0, r3, #4
 800de56:	6008      	str	r0, [r1, #0]
 800de58:	0628      	lsls	r0, r5, #24
 800de5a:	d501      	bpl.n	800de60 <_printf_i+0xec>
 800de5c:	681d      	ldr	r5, [r3, #0]
 800de5e:	e002      	b.n	800de66 <_printf_i+0xf2>
 800de60:	0669      	lsls	r1, r5, #25
 800de62:	d5fb      	bpl.n	800de5c <_printf_i+0xe8>
 800de64:	881d      	ldrh	r5, [r3, #0]
 800de66:	4854      	ldr	r0, [pc, #336]	; (800dfb8 <_printf_i+0x244>)
 800de68:	2f6f      	cmp	r7, #111	; 0x6f
 800de6a:	bf0c      	ite	eq
 800de6c:	2308      	moveq	r3, #8
 800de6e:	230a      	movne	r3, #10
 800de70:	2100      	movs	r1, #0
 800de72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de76:	6866      	ldr	r6, [r4, #4]
 800de78:	60a6      	str	r6, [r4, #8]
 800de7a:	2e00      	cmp	r6, #0
 800de7c:	bfa2      	ittt	ge
 800de7e:	6821      	ldrge	r1, [r4, #0]
 800de80:	f021 0104 	bicge.w	r1, r1, #4
 800de84:	6021      	strge	r1, [r4, #0]
 800de86:	b90d      	cbnz	r5, 800de8c <_printf_i+0x118>
 800de88:	2e00      	cmp	r6, #0
 800de8a:	d04d      	beq.n	800df28 <_printf_i+0x1b4>
 800de8c:	4616      	mov	r6, r2
 800de8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800de92:	fb03 5711 	mls	r7, r3, r1, r5
 800de96:	5dc7      	ldrb	r7, [r0, r7]
 800de98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de9c:	462f      	mov	r7, r5
 800de9e:	42bb      	cmp	r3, r7
 800dea0:	460d      	mov	r5, r1
 800dea2:	d9f4      	bls.n	800de8e <_printf_i+0x11a>
 800dea4:	2b08      	cmp	r3, #8
 800dea6:	d10b      	bne.n	800dec0 <_printf_i+0x14c>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	07df      	lsls	r7, r3, #31
 800deac:	d508      	bpl.n	800dec0 <_printf_i+0x14c>
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6861      	ldr	r1, [r4, #4]
 800deb2:	4299      	cmp	r1, r3
 800deb4:	bfde      	ittt	le
 800deb6:	2330      	movle	r3, #48	; 0x30
 800deb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800debc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dec0:	1b92      	subs	r2, r2, r6
 800dec2:	6122      	str	r2, [r4, #16]
 800dec4:	f8cd a000 	str.w	sl, [sp]
 800dec8:	464b      	mov	r3, r9
 800deca:	aa03      	add	r2, sp, #12
 800decc:	4621      	mov	r1, r4
 800dece:	4640      	mov	r0, r8
 800ded0:	f7ff fee2 	bl	800dc98 <_printf_common>
 800ded4:	3001      	adds	r0, #1
 800ded6:	d14c      	bne.n	800df72 <_printf_i+0x1fe>
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	b004      	add	sp, #16
 800dede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee2:	4835      	ldr	r0, [pc, #212]	; (800dfb8 <_printf_i+0x244>)
 800dee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	680e      	ldr	r6, [r1, #0]
 800deec:	061f      	lsls	r7, r3, #24
 800deee:	f856 5b04 	ldr.w	r5, [r6], #4
 800def2:	600e      	str	r6, [r1, #0]
 800def4:	d514      	bpl.n	800df20 <_printf_i+0x1ac>
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	bf44      	itt	mi
 800defa:	f043 0320 	orrmi.w	r3, r3, #32
 800defe:	6023      	strmi	r3, [r4, #0]
 800df00:	b91d      	cbnz	r5, 800df0a <_printf_i+0x196>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	f023 0320 	bic.w	r3, r3, #32
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	2310      	movs	r3, #16
 800df0c:	e7b0      	b.n	800de70 <_printf_i+0xfc>
 800df0e:	6823      	ldr	r3, [r4, #0]
 800df10:	f043 0320 	orr.w	r3, r3, #32
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	2378      	movs	r3, #120	; 0x78
 800df18:	4828      	ldr	r0, [pc, #160]	; (800dfbc <_printf_i+0x248>)
 800df1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df1e:	e7e3      	b.n	800dee8 <_printf_i+0x174>
 800df20:	065e      	lsls	r6, r3, #25
 800df22:	bf48      	it	mi
 800df24:	b2ad      	uxthmi	r5, r5
 800df26:	e7e6      	b.n	800def6 <_printf_i+0x182>
 800df28:	4616      	mov	r6, r2
 800df2a:	e7bb      	b.n	800dea4 <_printf_i+0x130>
 800df2c:	680b      	ldr	r3, [r1, #0]
 800df2e:	6826      	ldr	r6, [r4, #0]
 800df30:	6960      	ldr	r0, [r4, #20]
 800df32:	1d1d      	adds	r5, r3, #4
 800df34:	600d      	str	r5, [r1, #0]
 800df36:	0635      	lsls	r5, r6, #24
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	d501      	bpl.n	800df40 <_printf_i+0x1cc>
 800df3c:	6018      	str	r0, [r3, #0]
 800df3e:	e002      	b.n	800df46 <_printf_i+0x1d2>
 800df40:	0671      	lsls	r1, r6, #25
 800df42:	d5fb      	bpl.n	800df3c <_printf_i+0x1c8>
 800df44:	8018      	strh	r0, [r3, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	6123      	str	r3, [r4, #16]
 800df4a:	4616      	mov	r6, r2
 800df4c:	e7ba      	b.n	800dec4 <_printf_i+0x150>
 800df4e:	680b      	ldr	r3, [r1, #0]
 800df50:	1d1a      	adds	r2, r3, #4
 800df52:	600a      	str	r2, [r1, #0]
 800df54:	681e      	ldr	r6, [r3, #0]
 800df56:	6862      	ldr	r2, [r4, #4]
 800df58:	2100      	movs	r1, #0
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7f2 f940 	bl	80001e0 <memchr>
 800df60:	b108      	cbz	r0, 800df66 <_printf_i+0x1f2>
 800df62:	1b80      	subs	r0, r0, r6
 800df64:	6060      	str	r0, [r4, #4]
 800df66:	6863      	ldr	r3, [r4, #4]
 800df68:	6123      	str	r3, [r4, #16]
 800df6a:	2300      	movs	r3, #0
 800df6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df70:	e7a8      	b.n	800dec4 <_printf_i+0x150>
 800df72:	6923      	ldr	r3, [r4, #16]
 800df74:	4632      	mov	r2, r6
 800df76:	4649      	mov	r1, r9
 800df78:	4640      	mov	r0, r8
 800df7a:	47d0      	blx	sl
 800df7c:	3001      	adds	r0, #1
 800df7e:	d0ab      	beq.n	800ded8 <_printf_i+0x164>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	079b      	lsls	r3, r3, #30
 800df84:	d413      	bmi.n	800dfae <_printf_i+0x23a>
 800df86:	68e0      	ldr	r0, [r4, #12]
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	4298      	cmp	r0, r3
 800df8c:	bfb8      	it	lt
 800df8e:	4618      	movlt	r0, r3
 800df90:	e7a4      	b.n	800dedc <_printf_i+0x168>
 800df92:	2301      	movs	r3, #1
 800df94:	4632      	mov	r2, r6
 800df96:	4649      	mov	r1, r9
 800df98:	4640      	mov	r0, r8
 800df9a:	47d0      	blx	sl
 800df9c:	3001      	adds	r0, #1
 800df9e:	d09b      	beq.n	800ded8 <_printf_i+0x164>
 800dfa0:	3501      	adds	r5, #1
 800dfa2:	68e3      	ldr	r3, [r4, #12]
 800dfa4:	9903      	ldr	r1, [sp, #12]
 800dfa6:	1a5b      	subs	r3, r3, r1
 800dfa8:	42ab      	cmp	r3, r5
 800dfaa:	dcf2      	bgt.n	800df92 <_printf_i+0x21e>
 800dfac:	e7eb      	b.n	800df86 <_printf_i+0x212>
 800dfae:	2500      	movs	r5, #0
 800dfb0:	f104 0619 	add.w	r6, r4, #25
 800dfb4:	e7f5      	b.n	800dfa2 <_printf_i+0x22e>
 800dfb6:	bf00      	nop
 800dfb8:	0800e609 	.word	0x0800e609
 800dfbc:	0800e61a 	.word	0x0800e61a

0800dfc0 <memmove>:
 800dfc0:	4288      	cmp	r0, r1
 800dfc2:	b510      	push	{r4, lr}
 800dfc4:	eb01 0402 	add.w	r4, r1, r2
 800dfc8:	d902      	bls.n	800dfd0 <memmove+0x10>
 800dfca:	4284      	cmp	r4, r0
 800dfcc:	4623      	mov	r3, r4
 800dfce:	d807      	bhi.n	800dfe0 <memmove+0x20>
 800dfd0:	1e43      	subs	r3, r0, #1
 800dfd2:	42a1      	cmp	r1, r4
 800dfd4:	d008      	beq.n	800dfe8 <memmove+0x28>
 800dfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfde:	e7f8      	b.n	800dfd2 <memmove+0x12>
 800dfe0:	4402      	add	r2, r0
 800dfe2:	4601      	mov	r1, r0
 800dfe4:	428a      	cmp	r2, r1
 800dfe6:	d100      	bne.n	800dfea <memmove+0x2a>
 800dfe8:	bd10      	pop	{r4, pc}
 800dfea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dff2:	e7f7      	b.n	800dfe4 <memmove+0x24>

0800dff4 <_realloc_r>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	4607      	mov	r7, r0
 800dff8:	4614      	mov	r4, r2
 800dffa:	460e      	mov	r6, r1
 800dffc:	b921      	cbnz	r1, 800e008 <_realloc_r+0x14>
 800dffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e002:	4611      	mov	r1, r2
 800e004:	f7ff bb84 	b.w	800d710 <_malloc_r>
 800e008:	b922      	cbnz	r2, 800e014 <_realloc_r+0x20>
 800e00a:	f7ff fc99 	bl	800d940 <_free_r>
 800e00e:	4625      	mov	r5, r4
 800e010:	4628      	mov	r0, r5
 800e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e014:	f000 f814 	bl	800e040 <_malloc_usable_size_r>
 800e018:	42a0      	cmp	r0, r4
 800e01a:	d20f      	bcs.n	800e03c <_realloc_r+0x48>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4638      	mov	r0, r7
 800e020:	f7ff fb76 	bl	800d710 <_malloc_r>
 800e024:	4605      	mov	r5, r0
 800e026:	2800      	cmp	r0, #0
 800e028:	d0f2      	beq.n	800e010 <_realloc_r+0x1c>
 800e02a:	4631      	mov	r1, r6
 800e02c:	4622      	mov	r2, r4
 800e02e:	f7ff fb59 	bl	800d6e4 <memcpy>
 800e032:	4631      	mov	r1, r6
 800e034:	4638      	mov	r0, r7
 800e036:	f7ff fc83 	bl	800d940 <_free_r>
 800e03a:	e7e9      	b.n	800e010 <_realloc_r+0x1c>
 800e03c:	4635      	mov	r5, r6
 800e03e:	e7e7      	b.n	800e010 <_realloc_r+0x1c>

0800e040 <_malloc_usable_size_r>:
 800e040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e044:	1f18      	subs	r0, r3, #4
 800e046:	2b00      	cmp	r3, #0
 800e048:	bfbc      	itt	lt
 800e04a:	580b      	ldrlt	r3, [r1, r0]
 800e04c:	18c0      	addlt	r0, r0, r3
 800e04e:	4770      	bx	lr

0800e050 <_init>:
 800e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e052:	bf00      	nop
 800e054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e056:	bc08      	pop	{r3}
 800e058:	469e      	mov	lr, r3
 800e05a:	4770      	bx	lr

0800e05c <_fini>:
 800e05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05e:	bf00      	nop
 800e060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e062:	bc08      	pop	{r3}
 800e064:	469e      	mov	lr, r3
 800e066:	4770      	bx	lr
